// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to Cronet
class Cronet {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Cronet(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Cronet.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// ////////////////////
  ffi.Pointer<Cronet_Buffer> Cronet_Buffer_Create() {
    return _Cronet_Buffer_Create();
  }

  late final _Cronet_Buffer_Create_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Buffer_Create>>(
          'Cronet_Buffer_Create');
  late final _dart_Cronet_Buffer_Create _Cronet_Buffer_Create =
      _Cronet_Buffer_Create_ptr.asFunction<_dart_Cronet_Buffer_Create>();

  void Cronet_Buffer_Destroy(
    ffi.Pointer<Cronet_Buffer> self,
  ) {
    return _Cronet_Buffer_Destroy(
      self,
    );
  }

  late final _Cronet_Buffer_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Buffer_Destroy>>(
          'Cronet_Buffer_Destroy');
  late final _dart_Cronet_Buffer_Destroy _Cronet_Buffer_Destroy =
      _Cronet_Buffer_Destroy_ptr.asFunction<_dart_Cronet_Buffer_Destroy>();

  void Cronet_Buffer_SetClientContext(
    ffi.Pointer<Cronet_Buffer> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_Buffer_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_Buffer_SetClientContext_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Buffer_SetClientContext>>(
          'Cronet_Buffer_SetClientContext');
  late final _dart_Cronet_Buffer_SetClientContext
      _Cronet_Buffer_SetClientContext = _Cronet_Buffer_SetClientContext_ptr
          .asFunction<_dart_Cronet_Buffer_SetClientContext>();

  ffi.Pointer<ffi.Void> Cronet_Buffer_GetClientContext(
    ffi.Pointer<Cronet_Buffer> self,
  ) {
    return _Cronet_Buffer_GetClientContext(
      self,
    );
  }

  late final _Cronet_Buffer_GetClientContext_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Buffer_GetClientContext>>(
          'Cronet_Buffer_GetClientContext');
  late final _dart_Cronet_Buffer_GetClientContext
      _Cronet_Buffer_GetClientContext = _Cronet_Buffer_GetClientContext_ptr
          .asFunction<_dart_Cronet_Buffer_GetClientContext>();

  void Cronet_Buffer_InitWithDataAndCallback(
    ffi.Pointer<Cronet_Buffer> self,
    ffi.Pointer<ffi.Void> data,
    int size,
    ffi.Pointer<Cronet_BufferCallback> callback,
  ) {
    return _Cronet_Buffer_InitWithDataAndCallback(
      self,
      data,
      size,
      callback,
    );
  }

  late final _Cronet_Buffer_InitWithDataAndCallback_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Buffer_InitWithDataAndCallback>>(
          'Cronet_Buffer_InitWithDataAndCallback');
  late final _dart_Cronet_Buffer_InitWithDataAndCallback
      _Cronet_Buffer_InitWithDataAndCallback =
      _Cronet_Buffer_InitWithDataAndCallback_ptr.asFunction<
          _dart_Cronet_Buffer_InitWithDataAndCallback>();

  void Cronet_Buffer_InitWithAlloc(
    ffi.Pointer<Cronet_Buffer> self,
    int size,
  ) {
    return _Cronet_Buffer_InitWithAlloc(
      self,
      size,
    );
  }

  late final _Cronet_Buffer_InitWithAlloc_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Buffer_InitWithAlloc>>(
          'Cronet_Buffer_InitWithAlloc');
  late final _dart_Cronet_Buffer_InitWithAlloc _Cronet_Buffer_InitWithAlloc =
      _Cronet_Buffer_InitWithAlloc_ptr.asFunction<
          _dart_Cronet_Buffer_InitWithAlloc>();

  int Cronet_Buffer_GetSize(
    ffi.Pointer<Cronet_Buffer> self,
  ) {
    return _Cronet_Buffer_GetSize(
      self,
    );
  }

  late final _Cronet_Buffer_GetSize_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Buffer_GetSize>>(
          'Cronet_Buffer_GetSize');
  late final _dart_Cronet_Buffer_GetSize _Cronet_Buffer_GetSize =
      _Cronet_Buffer_GetSize_ptr.asFunction<_dart_Cronet_Buffer_GetSize>();

  ffi.Pointer<ffi.Void> Cronet_Buffer_GetData(
    ffi.Pointer<Cronet_Buffer> self,
  ) {
    return _Cronet_Buffer_GetData(
      self,
    );
  }

  late final _Cronet_Buffer_GetData_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Buffer_GetData>>(
          'Cronet_Buffer_GetData');
  late final _dart_Cronet_Buffer_GetData _Cronet_Buffer_GetData =
      _Cronet_Buffer_GetData_ptr.asFunction<_dart_Cronet_Buffer_GetData>();

  ffi.Pointer<Cronet_Buffer> Cronet_Buffer_CreateWith(
    ffi.Pointer<ffi.NativeFunction<Cronet_Buffer_InitWithDataAndCallbackFunc>>
        InitWithDataAndCallbackFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_Buffer_InitWithAllocFunc>>
        InitWithAllocFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_Buffer_GetSizeFunc>> GetSizeFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_Buffer_GetDataFunc>> GetDataFunc,
  ) {
    return _Cronet_Buffer_CreateWith(
      InitWithDataAndCallbackFunc,
      InitWithAllocFunc,
      GetSizeFunc,
      GetDataFunc,
    );
  }

  late final _Cronet_Buffer_CreateWith_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Buffer_CreateWith>>(
          'Cronet_Buffer_CreateWith');
  late final _dart_Cronet_Buffer_CreateWith _Cronet_Buffer_CreateWith =
      _Cronet_Buffer_CreateWith_ptr.asFunction<
          _dart_Cronet_Buffer_CreateWith>();

  /// ////////////////////
  void Cronet_BufferCallback_Destroy(
    ffi.Pointer<Cronet_BufferCallback> self,
  ) {
    return _Cronet_BufferCallback_Destroy(
      self,
    );
  }

  late final _Cronet_BufferCallback_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_BufferCallback_Destroy>>(
          'Cronet_BufferCallback_Destroy');
  late final _dart_Cronet_BufferCallback_Destroy
      _Cronet_BufferCallback_Destroy = _Cronet_BufferCallback_Destroy_ptr
          .asFunction<_dart_Cronet_BufferCallback_Destroy>();

  void Cronet_BufferCallback_SetClientContext(
    ffi.Pointer<Cronet_BufferCallback> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_BufferCallback_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_BufferCallback_SetClientContext_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_BufferCallback_SetClientContext>>(
          'Cronet_BufferCallback_SetClientContext');
  late final _dart_Cronet_BufferCallback_SetClientContext
      _Cronet_BufferCallback_SetClientContext =
      _Cronet_BufferCallback_SetClientContext_ptr.asFunction<
          _dart_Cronet_BufferCallback_SetClientContext>();

  ffi.Pointer<ffi.Void> Cronet_BufferCallback_GetClientContext(
    ffi.Pointer<Cronet_BufferCallback> self,
  ) {
    return _Cronet_BufferCallback_GetClientContext(
      self,
    );
  }

  late final _Cronet_BufferCallback_GetClientContext_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_BufferCallback_GetClientContext>>(
          'Cronet_BufferCallback_GetClientContext');
  late final _dart_Cronet_BufferCallback_GetClientContext
      _Cronet_BufferCallback_GetClientContext =
      _Cronet_BufferCallback_GetClientContext_ptr.asFunction<
          _dart_Cronet_BufferCallback_GetClientContext>();

  void Cronet_BufferCallback_OnDestroy(
    ffi.Pointer<Cronet_BufferCallback> self,
    ffi.Pointer<Cronet_Buffer> buffer,
  ) {
    return _Cronet_BufferCallback_OnDestroy(
      self,
      buffer,
    );
  }

  late final _Cronet_BufferCallback_OnDestroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_BufferCallback_OnDestroy>>(
          'Cronet_BufferCallback_OnDestroy');
  late final _dart_Cronet_BufferCallback_OnDestroy
      _Cronet_BufferCallback_OnDestroy = _Cronet_BufferCallback_OnDestroy_ptr
          .asFunction<_dart_Cronet_BufferCallback_OnDestroy>();

  ffi.Pointer<Cronet_BufferCallback> Cronet_BufferCallback_CreateWith(
    ffi.Pointer<ffi.NativeFunction<Cronet_BufferCallback_OnDestroyFunc>>
        OnDestroyFunc,
  ) {
    return _Cronet_BufferCallback_CreateWith(
      OnDestroyFunc,
    );
  }

  late final _Cronet_BufferCallback_CreateWith_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_BufferCallback_CreateWith>>(
          'Cronet_BufferCallback_CreateWith');
  late final _dart_Cronet_BufferCallback_CreateWith
      _Cronet_BufferCallback_CreateWith = _Cronet_BufferCallback_CreateWith_ptr
          .asFunction<_dart_Cronet_BufferCallback_CreateWith>();

  /// ////////////////////
  void Cronet_Runnable_Destroy(
    ffi.Pointer<Cronet_Runnable> self,
  ) {
    return _Cronet_Runnable_Destroy(
      self,
    );
  }

  late final _Cronet_Runnable_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Runnable_Destroy>>(
          'Cronet_Runnable_Destroy');
  late final _dart_Cronet_Runnable_Destroy _Cronet_Runnable_Destroy =
      _Cronet_Runnable_Destroy_ptr.asFunction<_dart_Cronet_Runnable_Destroy>();

  void Cronet_Runnable_SetClientContext(
    ffi.Pointer<Cronet_Runnable> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_Runnable_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_Runnable_SetClientContext_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Runnable_SetClientContext>>(
          'Cronet_Runnable_SetClientContext');
  late final _dart_Cronet_Runnable_SetClientContext
      _Cronet_Runnable_SetClientContext = _Cronet_Runnable_SetClientContext_ptr
          .asFunction<_dart_Cronet_Runnable_SetClientContext>();

  ffi.Pointer<ffi.Void> Cronet_Runnable_GetClientContext(
    ffi.Pointer<Cronet_Runnable> self,
  ) {
    return _Cronet_Runnable_GetClientContext(
      self,
    );
  }

  late final _Cronet_Runnable_GetClientContext_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Runnable_GetClientContext>>(
          'Cronet_Runnable_GetClientContext');
  late final _dart_Cronet_Runnable_GetClientContext
      _Cronet_Runnable_GetClientContext = _Cronet_Runnable_GetClientContext_ptr
          .asFunction<_dart_Cronet_Runnable_GetClientContext>();

  void Cronet_Runnable_Run(
    ffi.Pointer<Cronet_Runnable> self,
  ) {
    return _Cronet_Runnable_Run(
      self,
    );
  }

  late final _Cronet_Runnable_Run_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Runnable_Run>>(
          'Cronet_Runnable_Run');
  late final _dart_Cronet_Runnable_Run _Cronet_Runnable_Run =
      _Cronet_Runnable_Run_ptr.asFunction<_dart_Cronet_Runnable_Run>();

  ffi.Pointer<Cronet_Runnable> Cronet_Runnable_CreateWith(
    ffi.Pointer<ffi.NativeFunction<Cronet_Runnable_RunFunc>> RunFunc,
  ) {
    return _Cronet_Runnable_CreateWith(
      RunFunc,
    );
  }

  late final _Cronet_Runnable_CreateWith_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Runnable_CreateWith>>(
          'Cronet_Runnable_CreateWith');
  late final _dart_Cronet_Runnable_CreateWith _Cronet_Runnable_CreateWith =
      _Cronet_Runnable_CreateWith_ptr.asFunction<
          _dart_Cronet_Runnable_CreateWith>();

  /// ////////////////////
  void Cronet_Executor_Destroy(
    ffi.Pointer<Cronet_Executor> self,
  ) {
    return _Cronet_Executor_Destroy(
      self,
    );
  }

  late final _Cronet_Executor_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Executor_Destroy>>(
          'Cronet_Executor_Destroy');
  late final _dart_Cronet_Executor_Destroy _Cronet_Executor_Destroy =
      _Cronet_Executor_Destroy_ptr.asFunction<_dart_Cronet_Executor_Destroy>();

  void Cronet_Executor_SetClientContext(
    ffi.Pointer<Cronet_Executor> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_Executor_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_Executor_SetClientContext_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Executor_SetClientContext>>(
          'Cronet_Executor_SetClientContext');
  late final _dart_Cronet_Executor_SetClientContext
      _Cronet_Executor_SetClientContext = _Cronet_Executor_SetClientContext_ptr
          .asFunction<_dart_Cronet_Executor_SetClientContext>();

  ffi.Pointer<ffi.Void> Cronet_Executor_GetClientContext(
    ffi.Pointer<Cronet_Executor> self,
  ) {
    return _Cronet_Executor_GetClientContext(
      self,
    );
  }

  late final _Cronet_Executor_GetClientContext_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Executor_GetClientContext>>(
          'Cronet_Executor_GetClientContext');
  late final _dart_Cronet_Executor_GetClientContext
      _Cronet_Executor_GetClientContext = _Cronet_Executor_GetClientContext_ptr
          .asFunction<_dart_Cronet_Executor_GetClientContext>();

  void Cronet_Executor_Execute(
    ffi.Pointer<Cronet_Executor> self,
    ffi.Pointer<Cronet_Runnable> command,
  ) {
    return _Cronet_Executor_Execute(
      self,
      command,
    );
  }

  late final _Cronet_Executor_Execute_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Executor_Execute>>(
          'Cronet_Executor_Execute');
  late final _dart_Cronet_Executor_Execute _Cronet_Executor_Execute =
      _Cronet_Executor_Execute_ptr.asFunction<_dart_Cronet_Executor_Execute>();

  ffi.Pointer<Cronet_Executor> Cronet_Executor_CreateWith(
    ffi.Pointer<ffi.NativeFunction<Cronet_Executor_ExecuteFunc>> ExecuteFunc,
  ) {
    return _Cronet_Executor_CreateWith(
      ExecuteFunc,
    );
  }

  late final _Cronet_Executor_CreateWith_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Executor_CreateWith>>(
          'Cronet_Executor_CreateWith');
  late final _dart_Cronet_Executor_CreateWith _Cronet_Executor_CreateWith =
      _Cronet_Executor_CreateWith_ptr.asFunction<
          _dart_Cronet_Executor_CreateWith>();

  /// ////////////////////
  ffi.Pointer<Cronet_Engine> Cronet_Engine_Create() {
    return _Cronet_Engine_Create();
  }

  late final _Cronet_Engine_Create_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Engine_Create>>(
          'Cronet_Engine_Create');
  late final _dart_Cronet_Engine_Create _Cronet_Engine_Create =
      _Cronet_Engine_Create_ptr.asFunction<_dart_Cronet_Engine_Create>();

  void Cronet_Engine_Destroy(
    ffi.Pointer<Cronet_Engine> self,
  ) {
    return _Cronet_Engine_Destroy(
      self,
    );
  }

  late final _Cronet_Engine_Destroy_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Engine_Destroy>>(
          'Cronet_Engine_Destroy');
  late final _dart_Cronet_Engine_Destroy _Cronet_Engine_Destroy =
      _Cronet_Engine_Destroy_ptr.asFunction<_dart_Cronet_Engine_Destroy>();

  void Cronet_Engine_SetClientContext(
    ffi.Pointer<Cronet_Engine> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_Engine_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_Engine_SetClientContext_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Engine_SetClientContext>>(
          'Cronet_Engine_SetClientContext');
  late final _dart_Cronet_Engine_SetClientContext
      _Cronet_Engine_SetClientContext = _Cronet_Engine_SetClientContext_ptr
          .asFunction<_dart_Cronet_Engine_SetClientContext>();

  ffi.Pointer<ffi.Void> Cronet_Engine_GetClientContext(
    ffi.Pointer<Cronet_Engine> self,
  ) {
    return _Cronet_Engine_GetClientContext(
      self,
    );
  }

  late final _Cronet_Engine_GetClientContext_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Engine_GetClientContext>>(
          'Cronet_Engine_GetClientContext');
  late final _dart_Cronet_Engine_GetClientContext
      _Cronet_Engine_GetClientContext = _Cronet_Engine_GetClientContext_ptr
          .asFunction<_dart_Cronet_Engine_GetClientContext>();

  int Cronet_Engine_StartWithParams(
    ffi.Pointer<Cronet_Engine> self,
    ffi.Pointer<Cronet_EngineParams> params,
  ) {
    return _Cronet_Engine_StartWithParams(
      self,
      params,
    );
  }

  late final _Cronet_Engine_StartWithParams_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Engine_StartWithParams>>(
          'Cronet_Engine_StartWithParams');
  late final _dart_Cronet_Engine_StartWithParams
      _Cronet_Engine_StartWithParams = _Cronet_Engine_StartWithParams_ptr
          .asFunction<_dart_Cronet_Engine_StartWithParams>();

  bool Cronet_Engine_StartNetLogToFile(
    ffi.Pointer<Cronet_Engine> self,
    ffi.Pointer<ffi.Int8> file_name,
    bool log_all,
  ) {
    return _Cronet_Engine_StartNetLogToFile(
          self,
          file_name,
          log_all ? 1 : 0,
        ) !=
        0;
  }

  late final _Cronet_Engine_StartNetLogToFile_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Engine_StartNetLogToFile>>(
          'Cronet_Engine_StartNetLogToFile');
  late final _dart_Cronet_Engine_StartNetLogToFile
      _Cronet_Engine_StartNetLogToFile = _Cronet_Engine_StartNetLogToFile_ptr
          .asFunction<_dart_Cronet_Engine_StartNetLogToFile>();

  void Cronet_Engine_StopNetLog(
    ffi.Pointer<Cronet_Engine> self,
  ) {
    return _Cronet_Engine_StopNetLog(
      self,
    );
  }

  late final _Cronet_Engine_StopNetLog_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Engine_StopNetLog>>(
          'Cronet_Engine_StopNetLog');
  late final _dart_Cronet_Engine_StopNetLog _Cronet_Engine_StopNetLog =
      _Cronet_Engine_StopNetLog_ptr.asFunction<
          _dart_Cronet_Engine_StopNetLog>();

  int Cronet_Engine_Shutdown(
    ffi.Pointer<Cronet_Engine> self,
  ) {
    return _Cronet_Engine_Shutdown(
      self,
    );
  }

  late final _Cronet_Engine_Shutdown_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Engine_Shutdown>>(
          'Cronet_Engine_Shutdown');
  late final _dart_Cronet_Engine_Shutdown _Cronet_Engine_Shutdown =
      _Cronet_Engine_Shutdown_ptr.asFunction<_dart_Cronet_Engine_Shutdown>();

  ffi.Pointer<ffi.Int8> Cronet_Engine_GetVersionString(
    ffi.Pointer<Cronet_Engine> self,
  ) {
    return _Cronet_Engine_GetVersionString(
      self,
    );
  }

  late final _Cronet_Engine_GetVersionString_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Engine_GetVersionString>>(
          'Cronet_Engine_GetVersionString');
  late final _dart_Cronet_Engine_GetVersionString
      _Cronet_Engine_GetVersionString = _Cronet_Engine_GetVersionString_ptr
          .asFunction<_dart_Cronet_Engine_GetVersionString>();

  ffi.Pointer<ffi.Int8> Cronet_Engine_GetDefaultUserAgent(
    ffi.Pointer<Cronet_Engine> self,
  ) {
    return _Cronet_Engine_GetDefaultUserAgent(
      self,
    );
  }

  late final _Cronet_Engine_GetDefaultUserAgent_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Engine_GetDefaultUserAgent>>(
          'Cronet_Engine_GetDefaultUserAgent');
  late final _dart_Cronet_Engine_GetDefaultUserAgent
      _Cronet_Engine_GetDefaultUserAgent =
      _Cronet_Engine_GetDefaultUserAgent_ptr.asFunction<
          _dart_Cronet_Engine_GetDefaultUserAgent>();

  void Cronet_Engine_AddRequestFinishedListener(
    ffi.Pointer<Cronet_Engine> self,
    ffi.Pointer<Cronet_RequestFinishedInfoListener> listener,
    ffi.Pointer<Cronet_Executor> executor,
  ) {
    return _Cronet_Engine_AddRequestFinishedListener(
      self,
      listener,
      executor,
    );
  }

  late final _Cronet_Engine_AddRequestFinishedListener_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Engine_AddRequestFinishedListener>>(
          'Cronet_Engine_AddRequestFinishedListener');
  late final _dart_Cronet_Engine_AddRequestFinishedListener
      _Cronet_Engine_AddRequestFinishedListener =
      _Cronet_Engine_AddRequestFinishedListener_ptr.asFunction<
          _dart_Cronet_Engine_AddRequestFinishedListener>();

  void Cronet_Engine_RemoveRequestFinishedListener(
    ffi.Pointer<Cronet_Engine> self,
    ffi.Pointer<Cronet_RequestFinishedInfoListener> listener,
  ) {
    return _Cronet_Engine_RemoveRequestFinishedListener(
      self,
      listener,
    );
  }

  late final _Cronet_Engine_RemoveRequestFinishedListener_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_Engine_RemoveRequestFinishedListener>>(
      'Cronet_Engine_RemoveRequestFinishedListener');
  late final _dart_Cronet_Engine_RemoveRequestFinishedListener
      _Cronet_Engine_RemoveRequestFinishedListener =
      _Cronet_Engine_RemoveRequestFinishedListener_ptr.asFunction<
          _dart_Cronet_Engine_RemoveRequestFinishedListener>();

  ffi.Pointer<Cronet_Engine> Cronet_Engine_CreateWith(
    ffi.Pointer<ffi.NativeFunction<Cronet_Engine_StartWithParamsFunc>>
        StartWithParamsFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_Engine_StartNetLogToFileFunc>>
        StartNetLogToFileFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_Engine_StopNetLogFunc>>
        StopNetLogFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_Engine_ShutdownFunc>> ShutdownFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_Engine_GetVersionStringFunc>>
        GetVersionStringFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_Engine_GetDefaultUserAgentFunc>>
        GetDefaultUserAgentFunc,
    ffi.Pointer<
            ffi.NativeFunction<Cronet_Engine_AddRequestFinishedListenerFunc>>
        AddRequestFinishedListenerFunc,
    ffi.Pointer<
            ffi.NativeFunction<Cronet_Engine_RemoveRequestFinishedListenerFunc>>
        RemoveRequestFinishedListenerFunc,
  ) {
    return _Cronet_Engine_CreateWith(
      StartWithParamsFunc,
      StartNetLogToFileFunc,
      StopNetLogFunc,
      ShutdownFunc,
      GetVersionStringFunc,
      GetDefaultUserAgentFunc,
      AddRequestFinishedListenerFunc,
      RemoveRequestFinishedListenerFunc,
    );
  }

  late final _Cronet_Engine_CreateWith_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Engine_CreateWith>>(
          'Cronet_Engine_CreateWith');
  late final _dart_Cronet_Engine_CreateWith _Cronet_Engine_CreateWith =
      _Cronet_Engine_CreateWith_ptr.asFunction<
          _dart_Cronet_Engine_CreateWith>();

  /// ////////////////////
  void Cronet_UrlRequestStatusListener_Destroy(
    ffi.Pointer<Cronet_UrlRequestStatusListener> self,
  ) {
    return _Cronet_UrlRequestStatusListener_Destroy(
      self,
    );
  }

  late final _Cronet_UrlRequestStatusListener_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestStatusListener_Destroy>>(
          'Cronet_UrlRequestStatusListener_Destroy');
  late final _dart_Cronet_UrlRequestStatusListener_Destroy
      _Cronet_UrlRequestStatusListener_Destroy =
      _Cronet_UrlRequestStatusListener_Destroy_ptr.asFunction<
          _dart_Cronet_UrlRequestStatusListener_Destroy>();

  void Cronet_UrlRequestStatusListener_SetClientContext(
    ffi.Pointer<Cronet_UrlRequestStatusListener> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_UrlRequestStatusListener_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UrlRequestStatusListener_SetClientContext_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_UrlRequestStatusListener_SetClientContext>>(
      'Cronet_UrlRequestStatusListener_SetClientContext');
  late final _dart_Cronet_UrlRequestStatusListener_SetClientContext
      _Cronet_UrlRequestStatusListener_SetClientContext =
      _Cronet_UrlRequestStatusListener_SetClientContext_ptr.asFunction<
          _dart_Cronet_UrlRequestStatusListener_SetClientContext>();

  ffi.Pointer<ffi.Void> Cronet_UrlRequestStatusListener_GetClientContext(
    ffi.Pointer<Cronet_UrlRequestStatusListener> self,
  ) {
    return _Cronet_UrlRequestStatusListener_GetClientContext(
      self,
    );
  }

  late final _Cronet_UrlRequestStatusListener_GetClientContext_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_UrlRequestStatusListener_GetClientContext>>(
      'Cronet_UrlRequestStatusListener_GetClientContext');
  late final _dart_Cronet_UrlRequestStatusListener_GetClientContext
      _Cronet_UrlRequestStatusListener_GetClientContext =
      _Cronet_UrlRequestStatusListener_GetClientContext_ptr.asFunction<
          _dart_Cronet_UrlRequestStatusListener_GetClientContext>();

  void Cronet_UrlRequestStatusListener_OnStatus(
    ffi.Pointer<Cronet_UrlRequestStatusListener> self,
    int status,
  ) {
    return _Cronet_UrlRequestStatusListener_OnStatus(
      self,
      status,
    );
  }

  late final _Cronet_UrlRequestStatusListener_OnStatus_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestStatusListener_OnStatus>>(
          'Cronet_UrlRequestStatusListener_OnStatus');
  late final _dart_Cronet_UrlRequestStatusListener_OnStatus
      _Cronet_UrlRequestStatusListener_OnStatus =
      _Cronet_UrlRequestStatusListener_OnStatus_ptr.asFunction<
          _dart_Cronet_UrlRequestStatusListener_OnStatus>();

  ffi.Pointer<Cronet_UrlRequestStatusListener>
      Cronet_UrlRequestStatusListener_CreateWith(
    ffi.Pointer<
            ffi.NativeFunction<Cronet_UrlRequestStatusListener_OnStatusFunc>>
        OnStatusFunc,
  ) {
    return _Cronet_UrlRequestStatusListener_CreateWith(
      OnStatusFunc,
    );
  }

  late final _Cronet_UrlRequestStatusListener_CreateWith_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlRequestStatusListener_CreateWith>>(
      'Cronet_UrlRequestStatusListener_CreateWith');
  late final _dart_Cronet_UrlRequestStatusListener_CreateWith
      _Cronet_UrlRequestStatusListener_CreateWith =
      _Cronet_UrlRequestStatusListener_CreateWith_ptr.asFunction<
          _dart_Cronet_UrlRequestStatusListener_CreateWith>();

  /// ////////////////////
  void Cronet_UrlRequestCallback_Destroy(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
  ) {
    return _Cronet_UrlRequestCallback_Destroy(
      self,
    );
  }

  late final _Cronet_UrlRequestCallback_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestCallback_Destroy>>(
          'Cronet_UrlRequestCallback_Destroy');
  late final _dart_Cronet_UrlRequestCallback_Destroy
      _Cronet_UrlRequestCallback_Destroy =
      _Cronet_UrlRequestCallback_Destroy_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_Destroy>();

  void Cronet_UrlRequestCallback_SetClientContext(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_UrlRequestCallback_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UrlRequestCallback_SetClientContext_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlRequestCallback_SetClientContext>>(
      'Cronet_UrlRequestCallback_SetClientContext');
  late final _dart_Cronet_UrlRequestCallback_SetClientContext
      _Cronet_UrlRequestCallback_SetClientContext =
      _Cronet_UrlRequestCallback_SetClientContext_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_SetClientContext>();

  ffi.Pointer<ffi.Void> Cronet_UrlRequestCallback_GetClientContext(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
  ) {
    return _Cronet_UrlRequestCallback_GetClientContext(
      self,
    );
  }

  late final _Cronet_UrlRequestCallback_GetClientContext_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlRequestCallback_GetClientContext>>(
      'Cronet_UrlRequestCallback_GetClientContext');
  late final _dart_Cronet_UrlRequestCallback_GetClientContext
      _Cronet_UrlRequestCallback_GetClientContext =
      _Cronet_UrlRequestCallback_GetClientContext_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_GetClientContext>();

  void Cronet_UrlRequestCallback_OnRedirectReceived(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfo> info,
    ffi.Pointer<ffi.Int8> new_location_url,
  ) {
    return _Cronet_UrlRequestCallback_OnRedirectReceived(
      self,
      request,
      info,
      new_location_url,
    );
  }

  late final _Cronet_UrlRequestCallback_OnRedirectReceived_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlRequestCallback_OnRedirectReceived>>(
      'Cronet_UrlRequestCallback_OnRedirectReceived');
  late final _dart_Cronet_UrlRequestCallback_OnRedirectReceived
      _Cronet_UrlRequestCallback_OnRedirectReceived =
      _Cronet_UrlRequestCallback_OnRedirectReceived_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_OnRedirectReceived>();

  void Cronet_UrlRequestCallback_OnResponseStarted(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfo> info,
  ) {
    return _Cronet_UrlRequestCallback_OnResponseStarted(
      self,
      request,
      info,
    );
  }

  late final _Cronet_UrlRequestCallback_OnResponseStarted_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlRequestCallback_OnResponseStarted>>(
      'Cronet_UrlRequestCallback_OnResponseStarted');
  late final _dart_Cronet_UrlRequestCallback_OnResponseStarted
      _Cronet_UrlRequestCallback_OnResponseStarted =
      _Cronet_UrlRequestCallback_OnResponseStarted_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_OnResponseStarted>();

  void Cronet_UrlRequestCallback_OnReadCompleted(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfo> info,
    ffi.Pointer<Cronet_Buffer> buffer,
    int bytes_read,
  ) {
    return _Cronet_UrlRequestCallback_OnReadCompleted(
      self,
      request,
      info,
      buffer,
      bytes_read,
    );
  }

  late final _Cronet_UrlRequestCallback_OnReadCompleted_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestCallback_OnReadCompleted>>(
          'Cronet_UrlRequestCallback_OnReadCompleted');
  late final _dart_Cronet_UrlRequestCallback_OnReadCompleted
      _Cronet_UrlRequestCallback_OnReadCompleted =
      _Cronet_UrlRequestCallback_OnReadCompleted_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_OnReadCompleted>();

  void Cronet_UrlRequestCallback_OnSucceeded(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfo> info,
  ) {
    return _Cronet_UrlRequestCallback_OnSucceeded(
      self,
      request,
      info,
    );
  }

  late final _Cronet_UrlRequestCallback_OnSucceeded_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestCallback_OnSucceeded>>(
          'Cronet_UrlRequestCallback_OnSucceeded');
  late final _dart_Cronet_UrlRequestCallback_OnSucceeded
      _Cronet_UrlRequestCallback_OnSucceeded =
      _Cronet_UrlRequestCallback_OnSucceeded_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_OnSucceeded>();

  void Cronet_UrlRequestCallback_OnFailed(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfo> info,
    ffi.Pointer<Cronet_Error> error,
  ) {
    return _Cronet_UrlRequestCallback_OnFailed(
      self,
      request,
      info,
      error,
    );
  }

  late final _Cronet_UrlRequestCallback_OnFailed_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestCallback_OnFailed>>(
          'Cronet_UrlRequestCallback_OnFailed');
  late final _dart_Cronet_UrlRequestCallback_OnFailed
      _Cronet_UrlRequestCallback_OnFailed =
      _Cronet_UrlRequestCallback_OnFailed_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_OnFailed>();

  void Cronet_UrlRequestCallback_OnCanceled(
    ffi.Pointer<Cronet_UrlRequestCallback> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfo> info,
  ) {
    return _Cronet_UrlRequestCallback_OnCanceled(
      self,
      request,
      info,
    );
  }

  late final _Cronet_UrlRequestCallback_OnCanceled_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestCallback_OnCanceled>>(
          'Cronet_UrlRequestCallback_OnCanceled');
  late final _dart_Cronet_UrlRequestCallback_OnCanceled
      _Cronet_UrlRequestCallback_OnCanceled =
      _Cronet_UrlRequestCallback_OnCanceled_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_OnCanceled>();

  ffi.Pointer<Cronet_UrlRequestCallback> Cronet_UrlRequestCallback_CreateWith(
    ffi.Pointer<
            ffi.NativeFunction<
                Cronet_UrlRequestCallback_OnRedirectReceivedFunc>>
        OnRedirectReceivedFunc,
    ffi.Pointer<
            ffi.NativeFunction<Cronet_UrlRequestCallback_OnResponseStartedFunc>>
        OnResponseStartedFunc,
    ffi.Pointer<
            ffi.NativeFunction<Cronet_UrlRequestCallback_OnReadCompletedFunc>>
        OnReadCompletedFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestCallback_OnSucceededFunc>>
        OnSucceededFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestCallback_OnFailedFunc>>
        OnFailedFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestCallback_OnCanceledFunc>>
        OnCanceledFunc,
  ) {
    return _Cronet_UrlRequestCallback_CreateWith(
      OnRedirectReceivedFunc,
      OnResponseStartedFunc,
      OnReadCompletedFunc,
      OnSucceededFunc,
      OnFailedFunc,
      OnCanceledFunc,
    );
  }

  late final _Cronet_UrlRequestCallback_CreateWith_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestCallback_CreateWith>>(
          'Cronet_UrlRequestCallback_CreateWith');
  late final _dart_Cronet_UrlRequestCallback_CreateWith
      _Cronet_UrlRequestCallback_CreateWith =
      _Cronet_UrlRequestCallback_CreateWith_ptr.asFunction<
          _dart_Cronet_UrlRequestCallback_CreateWith>();

  /// ////////////////////
  ffi.Pointer<Cronet_UploadDataSink> Cronet_UploadDataSink_Create() {
    return _Cronet_UploadDataSink_Create();
  }

  late final _Cronet_UploadDataSink_Create_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataSink_Create>>(
          'Cronet_UploadDataSink_Create');
  late final _dart_Cronet_UploadDataSink_Create _Cronet_UploadDataSink_Create =
      _Cronet_UploadDataSink_Create_ptr.asFunction<
          _dart_Cronet_UploadDataSink_Create>();

  void Cronet_UploadDataSink_Destroy(
    ffi.Pointer<Cronet_UploadDataSink> self,
  ) {
    return _Cronet_UploadDataSink_Destroy(
      self,
    );
  }

  late final _Cronet_UploadDataSink_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataSink_Destroy>>(
          'Cronet_UploadDataSink_Destroy');
  late final _dart_Cronet_UploadDataSink_Destroy
      _Cronet_UploadDataSink_Destroy = _Cronet_UploadDataSink_Destroy_ptr
          .asFunction<_dart_Cronet_UploadDataSink_Destroy>();

  void Cronet_UploadDataSink_SetClientContext(
    ffi.Pointer<Cronet_UploadDataSink> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_UploadDataSink_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UploadDataSink_SetClientContext_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataSink_SetClientContext>>(
          'Cronet_UploadDataSink_SetClientContext');
  late final _dart_Cronet_UploadDataSink_SetClientContext
      _Cronet_UploadDataSink_SetClientContext =
      _Cronet_UploadDataSink_SetClientContext_ptr.asFunction<
          _dart_Cronet_UploadDataSink_SetClientContext>();

  ffi.Pointer<ffi.Void> Cronet_UploadDataSink_GetClientContext(
    ffi.Pointer<Cronet_UploadDataSink> self,
  ) {
    return _Cronet_UploadDataSink_GetClientContext(
      self,
    );
  }

  late final _Cronet_UploadDataSink_GetClientContext_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataSink_GetClientContext>>(
          'Cronet_UploadDataSink_GetClientContext');
  late final _dart_Cronet_UploadDataSink_GetClientContext
      _Cronet_UploadDataSink_GetClientContext =
      _Cronet_UploadDataSink_GetClientContext_ptr.asFunction<
          _dart_Cronet_UploadDataSink_GetClientContext>();

  void Cronet_UploadDataSink_OnReadSucceeded(
    ffi.Pointer<Cronet_UploadDataSink> self,
    int bytes_read,
    bool final_chunk,
  ) {
    return _Cronet_UploadDataSink_OnReadSucceeded(
      self,
      bytes_read,
      final_chunk ? 1 : 0,
    );
  }

  late final _Cronet_UploadDataSink_OnReadSucceeded_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataSink_OnReadSucceeded>>(
          'Cronet_UploadDataSink_OnReadSucceeded');
  late final _dart_Cronet_UploadDataSink_OnReadSucceeded
      _Cronet_UploadDataSink_OnReadSucceeded =
      _Cronet_UploadDataSink_OnReadSucceeded_ptr.asFunction<
          _dart_Cronet_UploadDataSink_OnReadSucceeded>();

  void Cronet_UploadDataSink_OnReadError(
    ffi.Pointer<Cronet_UploadDataSink> self,
    ffi.Pointer<ffi.Int8> error_message,
  ) {
    return _Cronet_UploadDataSink_OnReadError(
      self,
      error_message,
    );
  }

  late final _Cronet_UploadDataSink_OnReadError_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataSink_OnReadError>>(
          'Cronet_UploadDataSink_OnReadError');
  late final _dart_Cronet_UploadDataSink_OnReadError
      _Cronet_UploadDataSink_OnReadError =
      _Cronet_UploadDataSink_OnReadError_ptr.asFunction<
          _dart_Cronet_UploadDataSink_OnReadError>();

  void Cronet_UploadDataSink_OnRewindSucceeded(
    ffi.Pointer<Cronet_UploadDataSink> self,
  ) {
    return _Cronet_UploadDataSink_OnRewindSucceeded(
      self,
    );
  }

  late final _Cronet_UploadDataSink_OnRewindSucceeded_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataSink_OnRewindSucceeded>>(
          'Cronet_UploadDataSink_OnRewindSucceeded');
  late final _dart_Cronet_UploadDataSink_OnRewindSucceeded
      _Cronet_UploadDataSink_OnRewindSucceeded =
      _Cronet_UploadDataSink_OnRewindSucceeded_ptr.asFunction<
          _dart_Cronet_UploadDataSink_OnRewindSucceeded>();

  void Cronet_UploadDataSink_OnRewindError(
    ffi.Pointer<Cronet_UploadDataSink> self,
    ffi.Pointer<ffi.Int8> error_message,
  ) {
    return _Cronet_UploadDataSink_OnRewindError(
      self,
      error_message,
    );
  }

  late final _Cronet_UploadDataSink_OnRewindError_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataSink_OnRewindError>>(
          'Cronet_UploadDataSink_OnRewindError');
  late final _dart_Cronet_UploadDataSink_OnRewindError
      _Cronet_UploadDataSink_OnRewindError =
      _Cronet_UploadDataSink_OnRewindError_ptr.asFunction<
          _dart_Cronet_UploadDataSink_OnRewindError>();

  ffi.Pointer<Cronet_UploadDataSink> Cronet_UploadDataSink_CreateWith(
    ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataSink_OnReadSucceededFunc>>
        OnReadSucceededFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataSink_OnReadErrorFunc>>
        OnReadErrorFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataSink_OnRewindSucceededFunc>>
        OnRewindSucceededFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataSink_OnRewindErrorFunc>>
        OnRewindErrorFunc,
  ) {
    return _Cronet_UploadDataSink_CreateWith(
      OnReadSucceededFunc,
      OnReadErrorFunc,
      OnRewindSucceededFunc,
      OnRewindErrorFunc,
    );
  }

  late final _Cronet_UploadDataSink_CreateWith_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataSink_CreateWith>>(
          'Cronet_UploadDataSink_CreateWith');
  late final _dart_Cronet_UploadDataSink_CreateWith
      _Cronet_UploadDataSink_CreateWith = _Cronet_UploadDataSink_CreateWith_ptr
          .asFunction<_dart_Cronet_UploadDataSink_CreateWith>();

  /// ////////////////////
  void Cronet_UploadDataProvider_Destroy(
    ffi.Pointer<Cronet_UploadDataProvider> self,
  ) {
    return _Cronet_UploadDataProvider_Destroy(
      self,
    );
  }

  late final _Cronet_UploadDataProvider_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataProvider_Destroy>>(
          'Cronet_UploadDataProvider_Destroy');
  late final _dart_Cronet_UploadDataProvider_Destroy
      _Cronet_UploadDataProvider_Destroy =
      _Cronet_UploadDataProvider_Destroy_ptr.asFunction<
          _dart_Cronet_UploadDataProvider_Destroy>();

  void Cronet_UploadDataProvider_SetClientContext(
    ffi.Pointer<Cronet_UploadDataProvider> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_UploadDataProvider_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UploadDataProvider_SetClientContext_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UploadDataProvider_SetClientContext>>(
      'Cronet_UploadDataProvider_SetClientContext');
  late final _dart_Cronet_UploadDataProvider_SetClientContext
      _Cronet_UploadDataProvider_SetClientContext =
      _Cronet_UploadDataProvider_SetClientContext_ptr.asFunction<
          _dart_Cronet_UploadDataProvider_SetClientContext>();

  ffi.Pointer<ffi.Void> Cronet_UploadDataProvider_GetClientContext(
    ffi.Pointer<Cronet_UploadDataProvider> self,
  ) {
    return _Cronet_UploadDataProvider_GetClientContext(
      self,
    );
  }

  late final _Cronet_UploadDataProvider_GetClientContext_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UploadDataProvider_GetClientContext>>(
      'Cronet_UploadDataProvider_GetClientContext');
  late final _dart_Cronet_UploadDataProvider_GetClientContext
      _Cronet_UploadDataProvider_GetClientContext =
      _Cronet_UploadDataProvider_GetClientContext_ptr.asFunction<
          _dart_Cronet_UploadDataProvider_GetClientContext>();

  int Cronet_UploadDataProvider_GetLength(
    ffi.Pointer<Cronet_UploadDataProvider> self,
  ) {
    return _Cronet_UploadDataProvider_GetLength(
      self,
    );
  }

  late final _Cronet_UploadDataProvider_GetLength_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataProvider_GetLength>>(
          'Cronet_UploadDataProvider_GetLength');
  late final _dart_Cronet_UploadDataProvider_GetLength
      _Cronet_UploadDataProvider_GetLength =
      _Cronet_UploadDataProvider_GetLength_ptr.asFunction<
          _dart_Cronet_UploadDataProvider_GetLength>();

  void Cronet_UploadDataProvider_Read(
    ffi.Pointer<Cronet_UploadDataProvider> self,
    ffi.Pointer<Cronet_UploadDataSink> upload_data_sink,
    ffi.Pointer<Cronet_Buffer> buffer,
  ) {
    return _Cronet_UploadDataProvider_Read(
      self,
      upload_data_sink,
      buffer,
    );
  }

  late final _Cronet_UploadDataProvider_Read_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataProvider_Read>>(
          'Cronet_UploadDataProvider_Read');
  late final _dart_Cronet_UploadDataProvider_Read
      _Cronet_UploadDataProvider_Read = _Cronet_UploadDataProvider_Read_ptr
          .asFunction<_dart_Cronet_UploadDataProvider_Read>();

  void Cronet_UploadDataProvider_Rewind(
    ffi.Pointer<Cronet_UploadDataProvider> self,
    ffi.Pointer<Cronet_UploadDataSink> upload_data_sink,
  ) {
    return _Cronet_UploadDataProvider_Rewind(
      self,
      upload_data_sink,
    );
  }

  late final _Cronet_UploadDataProvider_Rewind_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataProvider_Rewind>>(
          'Cronet_UploadDataProvider_Rewind');
  late final _dart_Cronet_UploadDataProvider_Rewind
      _Cronet_UploadDataProvider_Rewind = _Cronet_UploadDataProvider_Rewind_ptr
          .asFunction<_dart_Cronet_UploadDataProvider_Rewind>();

  void Cronet_UploadDataProvider_Close(
    ffi.Pointer<Cronet_UploadDataProvider> self,
  ) {
    return _Cronet_UploadDataProvider_Close(
      self,
    );
  }

  late final _Cronet_UploadDataProvider_Close_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataProvider_Close>>(
          'Cronet_UploadDataProvider_Close');
  late final _dart_Cronet_UploadDataProvider_Close
      _Cronet_UploadDataProvider_Close = _Cronet_UploadDataProvider_Close_ptr
          .asFunction<_dart_Cronet_UploadDataProvider_Close>();

  ffi.Pointer<Cronet_UploadDataProvider> Cronet_UploadDataProvider_CreateWith(
    ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataProvider_GetLengthFunc>>
        GetLengthFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataProvider_ReadFunc>>
        ReadFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataProvider_RewindFunc>>
        RewindFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataProvider_CloseFunc>>
        CloseFunc,
  ) {
    return _Cronet_UploadDataProvider_CreateWith(
      GetLengthFunc,
      ReadFunc,
      RewindFunc,
      CloseFunc,
    );
  }

  late final _Cronet_UploadDataProvider_CreateWith_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UploadDataProvider_CreateWith>>(
          'Cronet_UploadDataProvider_CreateWith');
  late final _dart_Cronet_UploadDataProvider_CreateWith
      _Cronet_UploadDataProvider_CreateWith =
      _Cronet_UploadDataProvider_CreateWith_ptr.asFunction<
          _dart_Cronet_UploadDataProvider_CreateWith>();

  /// ////////////////////
  ffi.Pointer<Cronet_UrlRequest> Cronet_UrlRequest_Create() {
    return _Cronet_UrlRequest_Create();
  }

  late final _Cronet_UrlRequest_Create_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequest_Create>>(
          'Cronet_UrlRequest_Create');
  late final _dart_Cronet_UrlRequest_Create _Cronet_UrlRequest_Create =
      _Cronet_UrlRequest_Create_ptr.asFunction<
          _dart_Cronet_UrlRequest_Create>();

  void Cronet_UrlRequest_Destroy(
    ffi.Pointer<Cronet_UrlRequest> self,
  ) {
    return _Cronet_UrlRequest_Destroy(
      self,
    );
  }

  late final _Cronet_UrlRequest_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequest_Destroy>>(
          'Cronet_UrlRequest_Destroy');
  late final _dart_Cronet_UrlRequest_Destroy _Cronet_UrlRequest_Destroy =
      _Cronet_UrlRequest_Destroy_ptr.asFunction<
          _dart_Cronet_UrlRequest_Destroy>();

  void Cronet_UrlRequest_SetClientContext(
    ffi.Pointer<Cronet_UrlRequest> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_UrlRequest_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UrlRequest_SetClientContext_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequest_SetClientContext>>(
          'Cronet_UrlRequest_SetClientContext');
  late final _dart_Cronet_UrlRequest_SetClientContext
      _Cronet_UrlRequest_SetClientContext =
      _Cronet_UrlRequest_SetClientContext_ptr.asFunction<
          _dart_Cronet_UrlRequest_SetClientContext>();

  ffi.Pointer<ffi.Void> Cronet_UrlRequest_GetClientContext(
    ffi.Pointer<Cronet_UrlRequest> self,
  ) {
    return _Cronet_UrlRequest_GetClientContext(
      self,
    );
  }

  late final _Cronet_UrlRequest_GetClientContext_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequest_GetClientContext>>(
          'Cronet_UrlRequest_GetClientContext');
  late final _dart_Cronet_UrlRequest_GetClientContext
      _Cronet_UrlRequest_GetClientContext =
      _Cronet_UrlRequest_GetClientContext_ptr.asFunction<
          _dart_Cronet_UrlRequest_GetClientContext>();

  int Cronet_UrlRequest_InitWithParams(
    ffi.Pointer<Cronet_UrlRequest> self,
    ffi.Pointer<Cronet_Engine> engine,
    ffi.Pointer<ffi.Int8> url,
    ffi.Pointer<Cronet_UrlRequestParams> params,
    ffi.Pointer<Cronet_UrlRequestCallback> callback,
    ffi.Pointer<Cronet_Executor> executor,
  ) {
    return _Cronet_UrlRequest_InitWithParams(
      self,
      engine,
      url,
      params,
      callback,
      executor,
    );
  }

  late final _Cronet_UrlRequest_InitWithParams_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequest_InitWithParams>>(
          'Cronet_UrlRequest_InitWithParams');
  late final _dart_Cronet_UrlRequest_InitWithParams
      _Cronet_UrlRequest_InitWithParams = _Cronet_UrlRequest_InitWithParams_ptr
          .asFunction<_dart_Cronet_UrlRequest_InitWithParams>();

  int Cronet_UrlRequest_Start(
    ffi.Pointer<Cronet_UrlRequest> self,
  ) {
    return _Cronet_UrlRequest_Start(
      self,
    );
  }

  late final _Cronet_UrlRequest_Start_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequest_Start>>(
          'Cronet_UrlRequest_Start');
  late final _dart_Cronet_UrlRequest_Start _Cronet_UrlRequest_Start =
      _Cronet_UrlRequest_Start_ptr.asFunction<_dart_Cronet_UrlRequest_Start>();

  int Cronet_UrlRequest_FollowRedirect(
    ffi.Pointer<Cronet_UrlRequest> self,
  ) {
    return _Cronet_UrlRequest_FollowRedirect(
      self,
    );
  }

  late final _Cronet_UrlRequest_FollowRedirect_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequest_FollowRedirect>>(
          'Cronet_UrlRequest_FollowRedirect');
  late final _dart_Cronet_UrlRequest_FollowRedirect
      _Cronet_UrlRequest_FollowRedirect = _Cronet_UrlRequest_FollowRedirect_ptr
          .asFunction<_dart_Cronet_UrlRequest_FollowRedirect>();

  int Cronet_UrlRequest_Read(
    ffi.Pointer<Cronet_UrlRequest> self,
    ffi.Pointer<Cronet_Buffer> buffer,
  ) {
    return _Cronet_UrlRequest_Read(
      self,
      buffer,
    );
  }

  late final _Cronet_UrlRequest_Read_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequest_Read>>(
          'Cronet_UrlRequest_Read');
  late final _dart_Cronet_UrlRequest_Read _Cronet_UrlRequest_Read =
      _Cronet_UrlRequest_Read_ptr.asFunction<_dart_Cronet_UrlRequest_Read>();

  void Cronet_UrlRequest_Cancel(
    ffi.Pointer<Cronet_UrlRequest> self,
  ) {
    return _Cronet_UrlRequest_Cancel(
      self,
    );
  }

  late final _Cronet_UrlRequest_Cancel_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequest_Cancel>>(
          'Cronet_UrlRequest_Cancel');
  late final _dart_Cronet_UrlRequest_Cancel _Cronet_UrlRequest_Cancel =
      _Cronet_UrlRequest_Cancel_ptr.asFunction<
          _dart_Cronet_UrlRequest_Cancel>();

  bool Cronet_UrlRequest_IsDone(
    ffi.Pointer<Cronet_UrlRequest> self,
  ) {
    return _Cronet_UrlRequest_IsDone(
          self,
        ) !=
        0;
  }

  late final _Cronet_UrlRequest_IsDone_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequest_IsDone>>(
          'Cronet_UrlRequest_IsDone');
  late final _dart_Cronet_UrlRequest_IsDone _Cronet_UrlRequest_IsDone =
      _Cronet_UrlRequest_IsDone_ptr.asFunction<
          _dart_Cronet_UrlRequest_IsDone>();

  void Cronet_UrlRequest_GetStatus(
    ffi.Pointer<Cronet_UrlRequest> self,
    ffi.Pointer<Cronet_UrlRequestStatusListener> listener,
  ) {
    return _Cronet_UrlRequest_GetStatus(
      self,
      listener,
    );
  }

  late final _Cronet_UrlRequest_GetStatus_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequest_GetStatus>>(
          'Cronet_UrlRequest_GetStatus');
  late final _dart_Cronet_UrlRequest_GetStatus _Cronet_UrlRequest_GetStatus =
      _Cronet_UrlRequest_GetStatus_ptr.asFunction<
          _dart_Cronet_UrlRequest_GetStatus>();

  ffi.Pointer<Cronet_UrlRequest> Cronet_UrlRequest_CreateWith(
    ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_InitWithParamsFunc>>
        InitWithParamsFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_StartFunc>> StartFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_FollowRedirectFunc>>
        FollowRedirectFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_ReadFunc>> ReadFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_CancelFunc>> CancelFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_IsDoneFunc>> IsDoneFunc,
    ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_GetStatusFunc>>
        GetStatusFunc,
  ) {
    return _Cronet_UrlRequest_CreateWith(
      InitWithParamsFunc,
      StartFunc,
      FollowRedirectFunc,
      ReadFunc,
      CancelFunc,
      IsDoneFunc,
      GetStatusFunc,
    );
  }

  late final _Cronet_UrlRequest_CreateWith_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequest_CreateWith>>(
          'Cronet_UrlRequest_CreateWith');
  late final _dart_Cronet_UrlRequest_CreateWith _Cronet_UrlRequest_CreateWith =
      _Cronet_UrlRequest_CreateWith_ptr.asFunction<
          _dart_Cronet_UrlRequest_CreateWith>();

  /// ////////////////////
  void Cronet_RequestFinishedInfoListener_Destroy(
    ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
  ) {
    return _Cronet_RequestFinishedInfoListener_Destroy(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfoListener_Destroy_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_RequestFinishedInfoListener_Destroy>>(
      'Cronet_RequestFinishedInfoListener_Destroy');
  late final _dart_Cronet_RequestFinishedInfoListener_Destroy
      _Cronet_RequestFinishedInfoListener_Destroy =
      _Cronet_RequestFinishedInfoListener_Destroy_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfoListener_Destroy>();

  void Cronet_RequestFinishedInfoListener_SetClientContext(
    ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
    ffi.Pointer<ffi.Void> client_context,
  ) {
    return _Cronet_RequestFinishedInfoListener_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_RequestFinishedInfoListener_SetClientContext_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_RequestFinishedInfoListener_SetClientContext>>(
      'Cronet_RequestFinishedInfoListener_SetClientContext');
  late final _dart_Cronet_RequestFinishedInfoListener_SetClientContext
      _Cronet_RequestFinishedInfoListener_SetClientContext =
      _Cronet_RequestFinishedInfoListener_SetClientContext_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfoListener_SetClientContext>();

  ffi.Pointer<ffi.Void> Cronet_RequestFinishedInfoListener_GetClientContext(
    ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
  ) {
    return _Cronet_RequestFinishedInfoListener_GetClientContext(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfoListener_GetClientContext_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_RequestFinishedInfoListener_GetClientContext>>(
      'Cronet_RequestFinishedInfoListener_GetClientContext');
  late final _dart_Cronet_RequestFinishedInfoListener_GetClientContext
      _Cronet_RequestFinishedInfoListener_GetClientContext =
      _Cronet_RequestFinishedInfoListener_GetClientContext_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfoListener_GetClientContext>();

  void Cronet_RequestFinishedInfoListener_OnRequestFinished(
    ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
    ffi.Pointer<Cronet_RequestFinishedInfo> request_info,
    ffi.Pointer<Cronet_UrlResponseInfo> response_info,
    ffi.Pointer<Cronet_Error> error,
  ) {
    return _Cronet_RequestFinishedInfoListener_OnRequestFinished(
      self,
      request_info,
      response_info,
      error,
    );
  }

  late final _Cronet_RequestFinishedInfoListener_OnRequestFinished_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_Cronet_RequestFinishedInfoListener_OnRequestFinished>>(
          'Cronet_RequestFinishedInfoListener_OnRequestFinished');
  late final _dart_Cronet_RequestFinishedInfoListener_OnRequestFinished
      _Cronet_RequestFinishedInfoListener_OnRequestFinished =
      _Cronet_RequestFinishedInfoListener_OnRequestFinished_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfoListener_OnRequestFinished>();

  ffi.Pointer<Cronet_RequestFinishedInfoListener>
      Cronet_RequestFinishedInfoListener_CreateWith(
    ffi.Pointer<
            ffi.NativeFunction<
                Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc>>
        OnRequestFinishedFunc,
  ) {
    return _Cronet_RequestFinishedInfoListener_CreateWith(
      OnRequestFinishedFunc,
    );
  }

  late final _Cronet_RequestFinishedInfoListener_CreateWith_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_RequestFinishedInfoListener_CreateWith>>(
      'Cronet_RequestFinishedInfoListener_CreateWith');
  late final _dart_Cronet_RequestFinishedInfoListener_CreateWith
      _Cronet_RequestFinishedInfoListener_CreateWith =
      _Cronet_RequestFinishedInfoListener_CreateWith_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfoListener_CreateWith>();

  /// ////////////////////
  ffi.Pointer<Cronet_Error> Cronet_Error_Create() {
    return _Cronet_Error_Create();
  }

  late final _Cronet_Error_Create_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Error_Create>>(
          'Cronet_Error_Create');
  late final _dart_Cronet_Error_Create _Cronet_Error_Create =
      _Cronet_Error_Create_ptr.asFunction<_dart_Cronet_Error_Create>();

  void Cronet_Error_Destroy(
    ffi.Pointer<Cronet_Error> self,
  ) {
    return _Cronet_Error_Destroy(
      self,
    );
  }

  late final _Cronet_Error_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Error_Destroy>>(
          'Cronet_Error_Destroy');
  late final _dart_Cronet_Error_Destroy _Cronet_Error_Destroy =
      _Cronet_Error_Destroy_ptr.asFunction<_dart_Cronet_Error_Destroy>();

  void Cronet_Error_error_code_set(
    ffi.Pointer<Cronet_Error> self,
    int error_code,
  ) {
    return _Cronet_Error_error_code_set(
      self,
      error_code,
    );
  }

  late final _Cronet_Error_error_code_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Error_error_code_set>>(
          'Cronet_Error_error_code_set');
  late final _dart_Cronet_Error_error_code_set _Cronet_Error_error_code_set =
      _Cronet_Error_error_code_set_ptr.asFunction<
          _dart_Cronet_Error_error_code_set>();

  void Cronet_Error_message_set(
    ffi.Pointer<Cronet_Error> self,
    ffi.Pointer<ffi.Int8> message,
  ) {
    return _Cronet_Error_message_set(
      self,
      message,
    );
  }

  late final _Cronet_Error_message_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Error_message_set>>(
          'Cronet_Error_message_set');
  late final _dart_Cronet_Error_message_set _Cronet_Error_message_set =
      _Cronet_Error_message_set_ptr.asFunction<
          _dart_Cronet_Error_message_set>();

  void Cronet_Error_internal_error_code_set(
    ffi.Pointer<Cronet_Error> self,
    int internal_error_code,
  ) {
    return _Cronet_Error_internal_error_code_set(
      self,
      internal_error_code,
    );
  }

  late final _Cronet_Error_internal_error_code_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Error_internal_error_code_set>>(
          'Cronet_Error_internal_error_code_set');
  late final _dart_Cronet_Error_internal_error_code_set
      _Cronet_Error_internal_error_code_set =
      _Cronet_Error_internal_error_code_set_ptr.asFunction<
          _dart_Cronet_Error_internal_error_code_set>();

  void Cronet_Error_immediately_retryable_set(
    ffi.Pointer<Cronet_Error> self,
    bool immediately_retryable,
  ) {
    return _Cronet_Error_immediately_retryable_set(
      self,
      immediately_retryable ? 1 : 0,
    );
  }

  late final _Cronet_Error_immediately_retryable_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Error_immediately_retryable_set>>(
          'Cronet_Error_immediately_retryable_set');
  late final _dart_Cronet_Error_immediately_retryable_set
      _Cronet_Error_immediately_retryable_set =
      _Cronet_Error_immediately_retryable_set_ptr.asFunction<
          _dart_Cronet_Error_immediately_retryable_set>();

  void Cronet_Error_quic_detailed_error_code_set(
    ffi.Pointer<Cronet_Error> self,
    int quic_detailed_error_code,
  ) {
    return _Cronet_Error_quic_detailed_error_code_set(
      self,
      quic_detailed_error_code,
    );
  }

  late final _Cronet_Error_quic_detailed_error_code_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Error_quic_detailed_error_code_set>>(
          'Cronet_Error_quic_detailed_error_code_set');
  late final _dart_Cronet_Error_quic_detailed_error_code_set
      _Cronet_Error_quic_detailed_error_code_set =
      _Cronet_Error_quic_detailed_error_code_set_ptr.asFunction<
          _dart_Cronet_Error_quic_detailed_error_code_set>();

  int Cronet_Error_error_code_get(
    ffi.Pointer<Cronet_Error> self,
  ) {
    return _Cronet_Error_error_code_get(
      self,
    );
  }

  late final _Cronet_Error_error_code_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Error_error_code_get>>(
          'Cronet_Error_error_code_get');
  late final _dart_Cronet_Error_error_code_get _Cronet_Error_error_code_get =
      _Cronet_Error_error_code_get_ptr.asFunction<
          _dart_Cronet_Error_error_code_get>();

  ffi.Pointer<ffi.Int8> Cronet_Error_message_get(
    ffi.Pointer<Cronet_Error> self,
  ) {
    return _Cronet_Error_message_get(
      self,
    );
  }

  late final _Cronet_Error_message_get_ptr =
      _lookup<ffi.NativeFunction<Native_Cronet_Error_message_get>>(
          'Cronet_Error_message_get');
  late final _dart_Cronet_Error_message_get _Cronet_Error_message_get =
      _Cronet_Error_message_get_ptr.asFunction<
          _dart_Cronet_Error_message_get>();

  int Cronet_Error_internal_error_code_get(
    ffi.Pointer<Cronet_Error> self,
  ) {
    return _Cronet_Error_internal_error_code_get(
      self,
    );
  }

  late final _Cronet_Error_internal_error_code_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Error_internal_error_code_get>>(
          'Cronet_Error_internal_error_code_get');
  late final _dart_Cronet_Error_internal_error_code_get
      _Cronet_Error_internal_error_code_get =
      _Cronet_Error_internal_error_code_get_ptr.asFunction<
          _dart_Cronet_Error_internal_error_code_get>();

  bool Cronet_Error_immediately_retryable_get(
    ffi.Pointer<Cronet_Error> self,
  ) {
    return _Cronet_Error_immediately_retryable_get(
          self,
        ) !=
        0;
  }

  late final _Cronet_Error_immediately_retryable_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Error_immediately_retryable_get>>(
          'Cronet_Error_immediately_retryable_get');
  late final _dart_Cronet_Error_immediately_retryable_get
      _Cronet_Error_immediately_retryable_get =
      _Cronet_Error_immediately_retryable_get_ptr.asFunction<
          _dart_Cronet_Error_immediately_retryable_get>();

  int Cronet_Error_quic_detailed_error_code_get(
    ffi.Pointer<Cronet_Error> self,
  ) {
    return _Cronet_Error_quic_detailed_error_code_get(
      self,
    );
  }

  late final _Cronet_Error_quic_detailed_error_code_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Error_quic_detailed_error_code_get>>(
          'Cronet_Error_quic_detailed_error_code_get');
  late final _dart_Cronet_Error_quic_detailed_error_code_get
      _Cronet_Error_quic_detailed_error_code_get =
      _Cronet_Error_quic_detailed_error_code_get_ptr.asFunction<
          _dart_Cronet_Error_quic_detailed_error_code_get>();

  /// ////////////////////
  ffi.Pointer<Cronet_QuicHint> Cronet_QuicHint_Create() {
    return _Cronet_QuicHint_Create();
  }

  late final _Cronet_QuicHint_Create_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_QuicHint_Create>>(
          'Cronet_QuicHint_Create');
  late final _dart_Cronet_QuicHint_Create _Cronet_QuicHint_Create =
      _Cronet_QuicHint_Create_ptr.asFunction<_dart_Cronet_QuicHint_Create>();

  void Cronet_QuicHint_Destroy(
    ffi.Pointer<Cronet_QuicHint> self,
  ) {
    return _Cronet_QuicHint_Destroy(
      self,
    );
  }

  late final _Cronet_QuicHint_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_QuicHint_Destroy>>(
          'Cronet_QuicHint_Destroy');
  late final _dart_Cronet_QuicHint_Destroy _Cronet_QuicHint_Destroy =
      _Cronet_QuicHint_Destroy_ptr.asFunction<_dart_Cronet_QuicHint_Destroy>();

  void Cronet_QuicHint_host_set(
    ffi.Pointer<Cronet_QuicHint> self,
    ffi.Pointer<ffi.Int8> host,
  ) {
    return _Cronet_QuicHint_host_set(
      self,
      host,
    );
  }

  late final _Cronet_QuicHint_host_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_QuicHint_host_set>>(
          'Cronet_QuicHint_host_set');
  late final _dart_Cronet_QuicHint_host_set _Cronet_QuicHint_host_set =
      _Cronet_QuicHint_host_set_ptr.asFunction<
          _dart_Cronet_QuicHint_host_set>();

  void Cronet_QuicHint_port_set(
    ffi.Pointer<Cronet_QuicHint> self,
    int port,
  ) {
    return _Cronet_QuicHint_port_set(
      self,
      port,
    );
  }

  late final _Cronet_QuicHint_port_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_QuicHint_port_set>>(
          'Cronet_QuicHint_port_set');
  late final _dart_Cronet_QuicHint_port_set _Cronet_QuicHint_port_set =
      _Cronet_QuicHint_port_set_ptr.asFunction<
          _dart_Cronet_QuicHint_port_set>();

  void Cronet_QuicHint_alternate_port_set(
    ffi.Pointer<Cronet_QuicHint> self,
    int alternate_port,
  ) {
    return _Cronet_QuicHint_alternate_port_set(
      self,
      alternate_port,
    );
  }

  late final _Cronet_QuicHint_alternate_port_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_QuicHint_alternate_port_set>>(
          'Cronet_QuicHint_alternate_port_set');
  late final _dart_Cronet_QuicHint_alternate_port_set
      _Cronet_QuicHint_alternate_port_set =
      _Cronet_QuicHint_alternate_port_set_ptr.asFunction<
          _dart_Cronet_QuicHint_alternate_port_set>();

  ffi.Pointer<ffi.Int8> Cronet_QuicHint_host_get(
    ffi.Pointer<Cronet_QuicHint> self,
  ) {
    return _Cronet_QuicHint_host_get(
      self,
    );
  }

  late final _Cronet_QuicHint_host_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_QuicHint_host_get>>(
          'Cronet_QuicHint_host_get');
  late final _dart_Cronet_QuicHint_host_get _Cronet_QuicHint_host_get =
      _Cronet_QuicHint_host_get_ptr.asFunction<
          _dart_Cronet_QuicHint_host_get>();

  int Cronet_QuicHint_port_get(
    ffi.Pointer<Cronet_QuicHint> self,
  ) {
    return _Cronet_QuicHint_port_get(
      self,
    );
  }

  late final _Cronet_QuicHint_port_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_QuicHint_port_get>>(
          'Cronet_QuicHint_port_get');
  late final _dart_Cronet_QuicHint_port_get _Cronet_QuicHint_port_get =
      _Cronet_QuicHint_port_get_ptr.asFunction<
          _dart_Cronet_QuicHint_port_get>();

  int Cronet_QuicHint_alternate_port_get(
    ffi.Pointer<Cronet_QuicHint> self,
  ) {
    return _Cronet_QuicHint_alternate_port_get(
      self,
    );
  }

  late final _Cronet_QuicHint_alternate_port_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_QuicHint_alternate_port_get>>(
          'Cronet_QuicHint_alternate_port_get');
  late final _dart_Cronet_QuicHint_alternate_port_get
      _Cronet_QuicHint_alternate_port_get =
      _Cronet_QuicHint_alternate_port_get_ptr.asFunction<
          _dart_Cronet_QuicHint_alternate_port_get>();

  /// ////////////////////
  ffi.Pointer<Cronet_PublicKeyPins> Cronet_PublicKeyPins_Create() {
    return _Cronet_PublicKeyPins_Create();
  }

  late final _Cronet_PublicKeyPins_Create_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_PublicKeyPins_Create>>(
          'Cronet_PublicKeyPins_Create');
  late final _dart_Cronet_PublicKeyPins_Create _Cronet_PublicKeyPins_Create =
      _Cronet_PublicKeyPins_Create_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_Create>();

  void Cronet_PublicKeyPins_Destroy(
    ffi.Pointer<Cronet_PublicKeyPins> self,
  ) {
    return _Cronet_PublicKeyPins_Destroy(
      self,
    );
  }

  late final _Cronet_PublicKeyPins_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_PublicKeyPins_Destroy>>(
          'Cronet_PublicKeyPins_Destroy');
  late final _dart_Cronet_PublicKeyPins_Destroy _Cronet_PublicKeyPins_Destroy =
      _Cronet_PublicKeyPins_Destroy_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_Destroy>();

  void Cronet_PublicKeyPins_host_set(
    ffi.Pointer<Cronet_PublicKeyPins> self,
    ffi.Pointer<ffi.Int8> host,
  ) {
    return _Cronet_PublicKeyPins_host_set(
      self,
      host,
    );
  }

  late final _Cronet_PublicKeyPins_host_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_PublicKeyPins_host_set>>(
          'Cronet_PublicKeyPins_host_set');
  late final _dart_Cronet_PublicKeyPins_host_set
      _Cronet_PublicKeyPins_host_set = _Cronet_PublicKeyPins_host_set_ptr
          .asFunction<_dart_Cronet_PublicKeyPins_host_set>();

  void Cronet_PublicKeyPins_pins_sha256_add(
    ffi.Pointer<Cronet_PublicKeyPins> self,
    ffi.Pointer<ffi.Int8> element,
  ) {
    return _Cronet_PublicKeyPins_pins_sha256_add(
      self,
      element,
    );
  }

  late final _Cronet_PublicKeyPins_pins_sha256_add_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_PublicKeyPins_pins_sha256_add>>(
          'Cronet_PublicKeyPins_pins_sha256_add');
  late final _dart_Cronet_PublicKeyPins_pins_sha256_add
      _Cronet_PublicKeyPins_pins_sha256_add =
      _Cronet_PublicKeyPins_pins_sha256_add_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_pins_sha256_add>();

  void Cronet_PublicKeyPins_include_subdomains_set(
    ffi.Pointer<Cronet_PublicKeyPins> self,
    bool include_subdomains,
  ) {
    return _Cronet_PublicKeyPins_include_subdomains_set(
      self,
      include_subdomains ? 1 : 0,
    );
  }

  late final _Cronet_PublicKeyPins_include_subdomains_set_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_PublicKeyPins_include_subdomains_set>>(
      'Cronet_PublicKeyPins_include_subdomains_set');
  late final _dart_Cronet_PublicKeyPins_include_subdomains_set
      _Cronet_PublicKeyPins_include_subdomains_set =
      _Cronet_PublicKeyPins_include_subdomains_set_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_include_subdomains_set>();

  void Cronet_PublicKeyPins_expiration_date_set(
    ffi.Pointer<Cronet_PublicKeyPins> self,
    int expiration_date,
  ) {
    return _Cronet_PublicKeyPins_expiration_date_set(
      self,
      expiration_date,
    );
  }

  late final _Cronet_PublicKeyPins_expiration_date_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_PublicKeyPins_expiration_date_set>>(
          'Cronet_PublicKeyPins_expiration_date_set');
  late final _dart_Cronet_PublicKeyPins_expiration_date_set
      _Cronet_PublicKeyPins_expiration_date_set =
      _Cronet_PublicKeyPins_expiration_date_set_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_expiration_date_set>();

  ffi.Pointer<ffi.Int8> Cronet_PublicKeyPins_host_get(
    ffi.Pointer<Cronet_PublicKeyPins> self,
  ) {
    return _Cronet_PublicKeyPins_host_get(
      self,
    );
  }

  late final _Cronet_PublicKeyPins_host_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_PublicKeyPins_host_get>>(
          'Cronet_PublicKeyPins_host_get');
  late final _dart_Cronet_PublicKeyPins_host_get
      _Cronet_PublicKeyPins_host_get = _Cronet_PublicKeyPins_host_get_ptr
          .asFunction<_dart_Cronet_PublicKeyPins_host_get>();

  int Cronet_PublicKeyPins_pins_sha256_size(
    ffi.Pointer<Cronet_PublicKeyPins> self,
  ) {
    return _Cronet_PublicKeyPins_pins_sha256_size(
      self,
    );
  }

  late final _Cronet_PublicKeyPins_pins_sha256_size_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_PublicKeyPins_pins_sha256_size>>(
          'Cronet_PublicKeyPins_pins_sha256_size');
  late final _dart_Cronet_PublicKeyPins_pins_sha256_size
      _Cronet_PublicKeyPins_pins_sha256_size =
      _Cronet_PublicKeyPins_pins_sha256_size_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_pins_sha256_size>();

  ffi.Pointer<ffi.Int8> Cronet_PublicKeyPins_pins_sha256_at(
    ffi.Pointer<Cronet_PublicKeyPins> self,
    int index,
  ) {
    return _Cronet_PublicKeyPins_pins_sha256_at(
      self,
      index,
    );
  }

  late final _Cronet_PublicKeyPins_pins_sha256_at_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_PublicKeyPins_pins_sha256_at>>(
          'Cronet_PublicKeyPins_pins_sha256_at');
  late final _dart_Cronet_PublicKeyPins_pins_sha256_at
      _Cronet_PublicKeyPins_pins_sha256_at =
      _Cronet_PublicKeyPins_pins_sha256_at_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_pins_sha256_at>();

  void Cronet_PublicKeyPins_pins_sha256_clear(
    ffi.Pointer<Cronet_PublicKeyPins> self,
  ) {
    return _Cronet_PublicKeyPins_pins_sha256_clear(
      self,
    );
  }

  late final _Cronet_PublicKeyPins_pins_sha256_clear_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_PublicKeyPins_pins_sha256_clear>>(
          'Cronet_PublicKeyPins_pins_sha256_clear');
  late final _dart_Cronet_PublicKeyPins_pins_sha256_clear
      _Cronet_PublicKeyPins_pins_sha256_clear =
      _Cronet_PublicKeyPins_pins_sha256_clear_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_pins_sha256_clear>();

  bool Cronet_PublicKeyPins_include_subdomains_get(
    ffi.Pointer<Cronet_PublicKeyPins> self,
  ) {
    return _Cronet_PublicKeyPins_include_subdomains_get(
          self,
        ) !=
        0;
  }

  late final _Cronet_PublicKeyPins_include_subdomains_get_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_PublicKeyPins_include_subdomains_get>>(
      'Cronet_PublicKeyPins_include_subdomains_get');
  late final _dart_Cronet_PublicKeyPins_include_subdomains_get
      _Cronet_PublicKeyPins_include_subdomains_get =
      _Cronet_PublicKeyPins_include_subdomains_get_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_include_subdomains_get>();

  int Cronet_PublicKeyPins_expiration_date_get(
    ffi.Pointer<Cronet_PublicKeyPins> self,
  ) {
    return _Cronet_PublicKeyPins_expiration_date_get(
      self,
    );
  }

  late final _Cronet_PublicKeyPins_expiration_date_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_PublicKeyPins_expiration_date_get>>(
          'Cronet_PublicKeyPins_expiration_date_get');
  late final _dart_Cronet_PublicKeyPins_expiration_date_get
      _Cronet_PublicKeyPins_expiration_date_get =
      _Cronet_PublicKeyPins_expiration_date_get_ptr.asFunction<
          _dart_Cronet_PublicKeyPins_expiration_date_get>();

  /// ////////////////////
  ffi.Pointer<Cronet_EngineParams> Cronet_EngineParams_Create() {
    return _Cronet_EngineParams_Create();
  }

  late final _Cronet_EngineParams_Create_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_Create>>(
          'Cronet_EngineParams_Create');
  late final _dart_Cronet_EngineParams_Create _Cronet_EngineParams_Create =
      _Cronet_EngineParams_Create_ptr.asFunction<
          _dart_Cronet_EngineParams_Create>();

  void Cronet_EngineParams_Destroy(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_Destroy(
      self,
    );
  }

  late final _Cronet_EngineParams_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_Destroy>>(
          'Cronet_EngineParams_Destroy');
  late final _dart_Cronet_EngineParams_Destroy _Cronet_EngineParams_Destroy =
      _Cronet_EngineParams_Destroy_ptr.asFunction<
          _dart_Cronet_EngineParams_Destroy>();

  void Cronet_EngineParams_enable_check_result_set(
    ffi.Pointer<Cronet_EngineParams> self,
    bool enable_check_result,
  ) {
    return _Cronet_EngineParams_enable_check_result_set(
      self,
      enable_check_result ? 1 : 0,
    );
  }

  late final _Cronet_EngineParams_enable_check_result_set_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_EngineParams_enable_check_result_set>>(
      'Cronet_EngineParams_enable_check_result_set');
  late final _dart_Cronet_EngineParams_enable_check_result_set
      _Cronet_EngineParams_enable_check_result_set =
      _Cronet_EngineParams_enable_check_result_set_ptr.asFunction<
          _dart_Cronet_EngineParams_enable_check_result_set>();

  void Cronet_EngineParams_user_agent_set(
    ffi.Pointer<Cronet_EngineParams> self,
    ffi.Pointer<ffi.Int8> user_agent,
  ) {
    return _Cronet_EngineParams_user_agent_set(
      self,
      user_agent,
    );
  }

  late final _Cronet_EngineParams_user_agent_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_user_agent_set>>(
          'Cronet_EngineParams_user_agent_set');
  late final _dart_Cronet_EngineParams_user_agent_set
      _Cronet_EngineParams_user_agent_set =
      _Cronet_EngineParams_user_agent_set_ptr.asFunction<
          _dart_Cronet_EngineParams_user_agent_set>();

  void Cronet_EngineParams_accept_language_set(
    ffi.Pointer<Cronet_EngineParams> self,
    ffi.Pointer<ffi.Int8> accept_language,
  ) {
    return _Cronet_EngineParams_accept_language_set(
      self,
      accept_language,
    );
  }

  late final _Cronet_EngineParams_accept_language_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_accept_language_set>>(
          'Cronet_EngineParams_accept_language_set');
  late final _dart_Cronet_EngineParams_accept_language_set
      _Cronet_EngineParams_accept_language_set =
      _Cronet_EngineParams_accept_language_set_ptr.asFunction<
          _dart_Cronet_EngineParams_accept_language_set>();

  void Cronet_EngineParams_storage_path_set(
    ffi.Pointer<Cronet_EngineParams> self,
    ffi.Pointer<ffi.Int8> storage_path,
  ) {
    return _Cronet_EngineParams_storage_path_set(
      self,
      storage_path,
    );
  }

  late final _Cronet_EngineParams_storage_path_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_storage_path_set>>(
          'Cronet_EngineParams_storage_path_set');
  late final _dart_Cronet_EngineParams_storage_path_set
      _Cronet_EngineParams_storage_path_set =
      _Cronet_EngineParams_storage_path_set_ptr.asFunction<
          _dart_Cronet_EngineParams_storage_path_set>();

  void Cronet_EngineParams_enable_quic_set(
    ffi.Pointer<Cronet_EngineParams> self,
    bool enable_quic,
  ) {
    return _Cronet_EngineParams_enable_quic_set(
      self,
      enable_quic ? 1 : 0,
    );
  }

  late final _Cronet_EngineParams_enable_quic_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_enable_quic_set>>(
          'Cronet_EngineParams_enable_quic_set');
  late final _dart_Cronet_EngineParams_enable_quic_set
      _Cronet_EngineParams_enable_quic_set =
      _Cronet_EngineParams_enable_quic_set_ptr.asFunction<
          _dart_Cronet_EngineParams_enable_quic_set>();

  void Cronet_EngineParams_enable_http2_set(
    ffi.Pointer<Cronet_EngineParams> self,
    bool enable_http2,
  ) {
    return _Cronet_EngineParams_enable_http2_set(
      self,
      enable_http2 ? 1 : 0,
    );
  }

  late final _Cronet_EngineParams_enable_http2_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_enable_http2_set>>(
          'Cronet_EngineParams_enable_http2_set');
  late final _dart_Cronet_EngineParams_enable_http2_set
      _Cronet_EngineParams_enable_http2_set =
      _Cronet_EngineParams_enable_http2_set_ptr.asFunction<
          _dart_Cronet_EngineParams_enable_http2_set>();

  void Cronet_EngineParams_enable_brotli_set(
    ffi.Pointer<Cronet_EngineParams> self,
    bool enable_brotli,
  ) {
    return _Cronet_EngineParams_enable_brotli_set(
      self,
      enable_brotli ? 1 : 0,
    );
  }

  late final _Cronet_EngineParams_enable_brotli_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_enable_brotli_set>>(
          'Cronet_EngineParams_enable_brotli_set');
  late final _dart_Cronet_EngineParams_enable_brotli_set
      _Cronet_EngineParams_enable_brotli_set =
      _Cronet_EngineParams_enable_brotli_set_ptr.asFunction<
          _dart_Cronet_EngineParams_enable_brotli_set>();

  void Cronet_EngineParams_http_cache_mode_set(
    ffi.Pointer<Cronet_EngineParams> self,
    int http_cache_mode,
  ) {
    return _Cronet_EngineParams_http_cache_mode_set(
      self,
      http_cache_mode,
    );
  }

  late final _Cronet_EngineParams_http_cache_mode_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_http_cache_mode_set>>(
          'Cronet_EngineParams_http_cache_mode_set');
  late final _dart_Cronet_EngineParams_http_cache_mode_set
      _Cronet_EngineParams_http_cache_mode_set =
      _Cronet_EngineParams_http_cache_mode_set_ptr.asFunction<
          _dart_Cronet_EngineParams_http_cache_mode_set>();

  void Cronet_EngineParams_http_cache_max_size_set(
    ffi.Pointer<Cronet_EngineParams> self,
    int http_cache_max_size,
  ) {
    return _Cronet_EngineParams_http_cache_max_size_set(
      self,
      http_cache_max_size,
    );
  }

  late final _Cronet_EngineParams_http_cache_max_size_set_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_EngineParams_http_cache_max_size_set>>(
      'Cronet_EngineParams_http_cache_max_size_set');
  late final _dart_Cronet_EngineParams_http_cache_max_size_set
      _Cronet_EngineParams_http_cache_max_size_set =
      _Cronet_EngineParams_http_cache_max_size_set_ptr.asFunction<
          _dart_Cronet_EngineParams_http_cache_max_size_set>();

  void Cronet_EngineParams_quic_hints_add(
    ffi.Pointer<Cronet_EngineParams> self,
    ffi.Pointer<Cronet_QuicHint> element,
  ) {
    return _Cronet_EngineParams_quic_hints_add(
      self,
      element,
    );
  }

  late final _Cronet_EngineParams_quic_hints_add_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_quic_hints_add>>(
          'Cronet_EngineParams_quic_hints_add');
  late final _dart_Cronet_EngineParams_quic_hints_add
      _Cronet_EngineParams_quic_hints_add =
      _Cronet_EngineParams_quic_hints_add_ptr.asFunction<
          _dart_Cronet_EngineParams_quic_hints_add>();

  void Cronet_EngineParams_public_key_pins_add(
    ffi.Pointer<Cronet_EngineParams> self,
    ffi.Pointer<Cronet_PublicKeyPins> element,
  ) {
    return _Cronet_EngineParams_public_key_pins_add(
      self,
      element,
    );
  }

  late final _Cronet_EngineParams_public_key_pins_add_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_public_key_pins_add>>(
          'Cronet_EngineParams_public_key_pins_add');
  late final _dart_Cronet_EngineParams_public_key_pins_add
      _Cronet_EngineParams_public_key_pins_add =
      _Cronet_EngineParams_public_key_pins_add_ptr.asFunction<
          _dart_Cronet_EngineParams_public_key_pins_add>();

  void
      Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set(
    ffi.Pointer<Cronet_EngineParams> self,
    bool enable_public_key_pinning_bypass_for_local_trust_anchors,
  ) {
    return _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set(
      self,
      enable_public_key_pinning_bypass_for_local_trust_anchors ? 1 : 0,
    );
  }

  late final _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set>>(
          'Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set');
  late final _dart_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set
      _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set =
      _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set_ptr
          .asFunction<
              _dart_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set>();

  void Cronet_EngineParams_network_thread_priority_set(
    ffi.Pointer<Cronet_EngineParams> self,
    double network_thread_priority,
  ) {
    return _Cronet_EngineParams_network_thread_priority_set(
      self,
      network_thread_priority,
    );
  }

  late final _Cronet_EngineParams_network_thread_priority_set_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_EngineParams_network_thread_priority_set>>(
      'Cronet_EngineParams_network_thread_priority_set');
  late final _dart_Cronet_EngineParams_network_thread_priority_set
      _Cronet_EngineParams_network_thread_priority_set =
      _Cronet_EngineParams_network_thread_priority_set_ptr.asFunction<
          _dart_Cronet_EngineParams_network_thread_priority_set>();

  void Cronet_EngineParams_experimental_options_set(
    ffi.Pointer<Cronet_EngineParams> self,
    ffi.Pointer<ffi.Int8> experimental_options,
  ) {
    return _Cronet_EngineParams_experimental_options_set(
      self,
      experimental_options,
    );
  }

  late final _Cronet_EngineParams_experimental_options_set_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_EngineParams_experimental_options_set>>(
      'Cronet_EngineParams_experimental_options_set');
  late final _dart_Cronet_EngineParams_experimental_options_set
      _Cronet_EngineParams_experimental_options_set =
      _Cronet_EngineParams_experimental_options_set_ptr.asFunction<
          _dart_Cronet_EngineParams_experimental_options_set>();

  bool Cronet_EngineParams_enable_check_result_get(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_enable_check_result_get(
          self,
        ) !=
        0;
  }

  late final _Cronet_EngineParams_enable_check_result_get_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_EngineParams_enable_check_result_get>>(
      'Cronet_EngineParams_enable_check_result_get');
  late final _dart_Cronet_EngineParams_enable_check_result_get
      _Cronet_EngineParams_enable_check_result_get =
      _Cronet_EngineParams_enable_check_result_get_ptr.asFunction<
          _dart_Cronet_EngineParams_enable_check_result_get>();

  ffi.Pointer<ffi.Int8> Cronet_EngineParams_user_agent_get(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_user_agent_get(
      self,
    );
  }

  late final _Cronet_EngineParams_user_agent_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_user_agent_get>>(
          'Cronet_EngineParams_user_agent_get');
  late final _dart_Cronet_EngineParams_user_agent_get
      _Cronet_EngineParams_user_agent_get =
      _Cronet_EngineParams_user_agent_get_ptr.asFunction<
          _dart_Cronet_EngineParams_user_agent_get>();

  ffi.Pointer<ffi.Int8> Cronet_EngineParams_accept_language_get(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_accept_language_get(
      self,
    );
  }

  late final _Cronet_EngineParams_accept_language_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_accept_language_get>>(
          'Cronet_EngineParams_accept_language_get');
  late final _dart_Cronet_EngineParams_accept_language_get
      _Cronet_EngineParams_accept_language_get =
      _Cronet_EngineParams_accept_language_get_ptr.asFunction<
          _dart_Cronet_EngineParams_accept_language_get>();

  ffi.Pointer<ffi.Int8> Cronet_EngineParams_storage_path_get(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_storage_path_get(
      self,
    );
  }

  late final _Cronet_EngineParams_storage_path_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_storage_path_get>>(
          'Cronet_EngineParams_storage_path_get');
  late final _dart_Cronet_EngineParams_storage_path_get
      _Cronet_EngineParams_storage_path_get =
      _Cronet_EngineParams_storage_path_get_ptr.asFunction<
          _dart_Cronet_EngineParams_storage_path_get>();

  bool Cronet_EngineParams_enable_quic_get(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_enable_quic_get(
          self,
        ) !=
        0;
  }

  late final _Cronet_EngineParams_enable_quic_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_enable_quic_get>>(
          'Cronet_EngineParams_enable_quic_get');
  late final _dart_Cronet_EngineParams_enable_quic_get
      _Cronet_EngineParams_enable_quic_get =
      _Cronet_EngineParams_enable_quic_get_ptr.asFunction<
          _dart_Cronet_EngineParams_enable_quic_get>();

  bool Cronet_EngineParams_enable_http2_get(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_enable_http2_get(
          self,
        ) !=
        0;
  }

  late final _Cronet_EngineParams_enable_http2_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_enable_http2_get>>(
          'Cronet_EngineParams_enable_http2_get');
  late final _dart_Cronet_EngineParams_enable_http2_get
      _Cronet_EngineParams_enable_http2_get =
      _Cronet_EngineParams_enable_http2_get_ptr.asFunction<
          _dart_Cronet_EngineParams_enable_http2_get>();

  bool Cronet_EngineParams_enable_brotli_get(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_enable_brotli_get(
          self,
        ) !=
        0;
  }

  late final _Cronet_EngineParams_enable_brotli_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_enable_brotli_get>>(
          'Cronet_EngineParams_enable_brotli_get');
  late final _dart_Cronet_EngineParams_enable_brotli_get
      _Cronet_EngineParams_enable_brotli_get =
      _Cronet_EngineParams_enable_brotli_get_ptr.asFunction<
          _dart_Cronet_EngineParams_enable_brotli_get>();

  int Cronet_EngineParams_http_cache_mode_get(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_http_cache_mode_get(
      self,
    );
  }

  late final _Cronet_EngineParams_http_cache_mode_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_http_cache_mode_get>>(
          'Cronet_EngineParams_http_cache_mode_get');
  late final _dart_Cronet_EngineParams_http_cache_mode_get
      _Cronet_EngineParams_http_cache_mode_get =
      _Cronet_EngineParams_http_cache_mode_get_ptr.asFunction<
          _dart_Cronet_EngineParams_http_cache_mode_get>();

  int Cronet_EngineParams_http_cache_max_size_get(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_http_cache_max_size_get(
      self,
    );
  }

  late final _Cronet_EngineParams_http_cache_max_size_get_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_EngineParams_http_cache_max_size_get>>(
      'Cronet_EngineParams_http_cache_max_size_get');
  late final _dart_Cronet_EngineParams_http_cache_max_size_get
      _Cronet_EngineParams_http_cache_max_size_get =
      _Cronet_EngineParams_http_cache_max_size_get_ptr.asFunction<
          _dart_Cronet_EngineParams_http_cache_max_size_get>();

  int Cronet_EngineParams_quic_hints_size(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_quic_hints_size(
      self,
    );
  }

  late final _Cronet_EngineParams_quic_hints_size_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_quic_hints_size>>(
          'Cronet_EngineParams_quic_hints_size');
  late final _dart_Cronet_EngineParams_quic_hints_size
      _Cronet_EngineParams_quic_hints_size =
      _Cronet_EngineParams_quic_hints_size_ptr.asFunction<
          _dart_Cronet_EngineParams_quic_hints_size>();

  ffi.Pointer<Cronet_QuicHint> Cronet_EngineParams_quic_hints_at(
    ffi.Pointer<Cronet_EngineParams> self,
    int index,
  ) {
    return _Cronet_EngineParams_quic_hints_at(
      self,
      index,
    );
  }

  late final _Cronet_EngineParams_quic_hints_at_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_quic_hints_at>>(
          'Cronet_EngineParams_quic_hints_at');
  late final _dart_Cronet_EngineParams_quic_hints_at
      _Cronet_EngineParams_quic_hints_at =
      _Cronet_EngineParams_quic_hints_at_ptr.asFunction<
          _dart_Cronet_EngineParams_quic_hints_at>();

  void Cronet_EngineParams_quic_hints_clear(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_quic_hints_clear(
      self,
    );
  }

  late final _Cronet_EngineParams_quic_hints_clear_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_quic_hints_clear>>(
          'Cronet_EngineParams_quic_hints_clear');
  late final _dart_Cronet_EngineParams_quic_hints_clear
      _Cronet_EngineParams_quic_hints_clear =
      _Cronet_EngineParams_quic_hints_clear_ptr.asFunction<
          _dart_Cronet_EngineParams_quic_hints_clear>();

  int Cronet_EngineParams_public_key_pins_size(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_public_key_pins_size(
      self,
    );
  }

  late final _Cronet_EngineParams_public_key_pins_size_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_public_key_pins_size>>(
          'Cronet_EngineParams_public_key_pins_size');
  late final _dart_Cronet_EngineParams_public_key_pins_size
      _Cronet_EngineParams_public_key_pins_size =
      _Cronet_EngineParams_public_key_pins_size_ptr.asFunction<
          _dart_Cronet_EngineParams_public_key_pins_size>();

  ffi.Pointer<Cronet_PublicKeyPins> Cronet_EngineParams_public_key_pins_at(
    ffi.Pointer<Cronet_EngineParams> self,
    int index,
  ) {
    return _Cronet_EngineParams_public_key_pins_at(
      self,
      index,
    );
  }

  late final _Cronet_EngineParams_public_key_pins_at_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_public_key_pins_at>>(
          'Cronet_EngineParams_public_key_pins_at');
  late final _dart_Cronet_EngineParams_public_key_pins_at
      _Cronet_EngineParams_public_key_pins_at =
      _Cronet_EngineParams_public_key_pins_at_ptr.asFunction<
          _dart_Cronet_EngineParams_public_key_pins_at>();

  void Cronet_EngineParams_public_key_pins_clear(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_public_key_pins_clear(
      self,
    );
  }

  late final _Cronet_EngineParams_public_key_pins_clear_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_EngineParams_public_key_pins_clear>>(
          'Cronet_EngineParams_public_key_pins_clear');
  late final _dart_Cronet_EngineParams_public_key_pins_clear
      _Cronet_EngineParams_public_key_pins_clear =
      _Cronet_EngineParams_public_key_pins_clear_ptr.asFunction<
          _dart_Cronet_EngineParams_public_key_pins_clear>();

  bool
      Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get(
          self,
        ) !=
        0;
  }

  late final _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get>>(
          'Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get');
  late final _dart_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get
      _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get =
      _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get_ptr
          .asFunction<
              _dart_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get>();

  double Cronet_EngineParams_network_thread_priority_get(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_network_thread_priority_get(
      self,
    );
  }

  late final _Cronet_EngineParams_network_thread_priority_get_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_EngineParams_network_thread_priority_get>>(
      'Cronet_EngineParams_network_thread_priority_get');
  late final _dart_Cronet_EngineParams_network_thread_priority_get
      _Cronet_EngineParams_network_thread_priority_get =
      _Cronet_EngineParams_network_thread_priority_get_ptr.asFunction<
          _dart_Cronet_EngineParams_network_thread_priority_get>();

  ffi.Pointer<ffi.Int8> Cronet_EngineParams_experimental_options_get(
    ffi.Pointer<Cronet_EngineParams> self,
  ) {
    return _Cronet_EngineParams_experimental_options_get(
      self,
    );
  }

  late final _Cronet_EngineParams_experimental_options_get_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_EngineParams_experimental_options_get>>(
      'Cronet_EngineParams_experimental_options_get');
  late final _dart_Cronet_EngineParams_experimental_options_get
      _Cronet_EngineParams_experimental_options_get =
      _Cronet_EngineParams_experimental_options_get_ptr.asFunction<
          _dart_Cronet_EngineParams_experimental_options_get>();

  /// ////////////////////
  ffi.Pointer<Cronet_HttpHeader> Cronet_HttpHeader_Create() {
    return _Cronet_HttpHeader_Create();
  }

  late final _Cronet_HttpHeader_Create_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_HttpHeader_Create>>(
          'Cronet_HttpHeader_Create');
  late final _dart_Cronet_HttpHeader_Create _Cronet_HttpHeader_Create =
      _Cronet_HttpHeader_Create_ptr.asFunction<
          _dart_Cronet_HttpHeader_Create>();

  void Cronet_HttpHeader_Destroy(
    ffi.Pointer<Cronet_HttpHeader> self,
  ) {
    return _Cronet_HttpHeader_Destroy(
      self,
    );
  }

  late final _Cronet_HttpHeader_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_HttpHeader_Destroy>>(
          'Cronet_HttpHeader_Destroy');
  late final _dart_Cronet_HttpHeader_Destroy _Cronet_HttpHeader_Destroy =
      _Cronet_HttpHeader_Destroy_ptr.asFunction<
          _dart_Cronet_HttpHeader_Destroy>();

  void Cronet_HttpHeader_name_set(
    ffi.Pointer<Cronet_HttpHeader> self,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _Cronet_HttpHeader_name_set(
      self,
      name,
    );
  }

  late final _Cronet_HttpHeader_name_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_HttpHeader_name_set>>(
          'Cronet_HttpHeader_name_set');
  late final _dart_Cronet_HttpHeader_name_set _Cronet_HttpHeader_name_set =
      _Cronet_HttpHeader_name_set_ptr.asFunction<
          _dart_Cronet_HttpHeader_name_set>();

  void Cronet_HttpHeader_value_set(
    ffi.Pointer<Cronet_HttpHeader> self,
    ffi.Pointer<ffi.Int8> value,
  ) {
    return _Cronet_HttpHeader_value_set(
      self,
      value,
    );
  }

  late final _Cronet_HttpHeader_value_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_HttpHeader_value_set>>(
          'Cronet_HttpHeader_value_set');
  late final _dart_Cronet_HttpHeader_value_set _Cronet_HttpHeader_value_set =
      _Cronet_HttpHeader_value_set_ptr.asFunction<
          _dart_Cronet_HttpHeader_value_set>();

  ffi.Pointer<ffi.Int8> Cronet_HttpHeader_name_get(
    ffi.Pointer<Cronet_HttpHeader> self,
  ) {
    return _Cronet_HttpHeader_name_get(
      self,
    );
  }

  late final _Cronet_HttpHeader_name_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_HttpHeader_name_get>>(
          'Cronet_HttpHeader_name_get');
  late final _dart_Cronet_HttpHeader_name_get _Cronet_HttpHeader_name_get =
      _Cronet_HttpHeader_name_get_ptr.asFunction<
          _dart_Cronet_HttpHeader_name_get>();

  ffi.Pointer<ffi.Int8> Cronet_HttpHeader_value_get(
    ffi.Pointer<Cronet_HttpHeader> self,
  ) {
    return _Cronet_HttpHeader_value_get(
      self,
    );
  }

  late final _Cronet_HttpHeader_value_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_HttpHeader_value_get>>(
          'Cronet_HttpHeader_value_get');
  late final _dart_Cronet_HttpHeader_value_get _Cronet_HttpHeader_value_get =
      _Cronet_HttpHeader_value_get_ptr.asFunction<
          _dart_Cronet_HttpHeader_value_get>();

  /// ////////////////////
  ffi.Pointer<Cronet_UrlResponseInfo> Cronet_UrlResponseInfo_Create() {
    return _Cronet_UrlResponseInfo_Create();
  }

  late final _Cronet_UrlResponseInfo_Create_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlResponseInfo_Create>>(
          'Cronet_UrlResponseInfo_Create');
  late final _dart_Cronet_UrlResponseInfo_Create
      _Cronet_UrlResponseInfo_Create = _Cronet_UrlResponseInfo_Create_ptr
          .asFunction<_dart_Cronet_UrlResponseInfo_Create>();

  void Cronet_UrlResponseInfo_Destroy(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_Destroy(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlResponseInfo_Destroy>>(
          'Cronet_UrlResponseInfo_Destroy');
  late final _dart_Cronet_UrlResponseInfo_Destroy
      _Cronet_UrlResponseInfo_Destroy = _Cronet_UrlResponseInfo_Destroy_ptr
          .asFunction<_dart_Cronet_UrlResponseInfo_Destroy>();

  void Cronet_UrlResponseInfo_url_set(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    ffi.Pointer<ffi.Int8> url,
  ) {
    return _Cronet_UrlResponseInfo_url_set(
      self,
      url,
    );
  }

  late final _Cronet_UrlResponseInfo_url_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlResponseInfo_url_set>>(
          'Cronet_UrlResponseInfo_url_set');
  late final _dart_Cronet_UrlResponseInfo_url_set
      _Cronet_UrlResponseInfo_url_set = _Cronet_UrlResponseInfo_url_set_ptr
          .asFunction<_dart_Cronet_UrlResponseInfo_url_set>();

  void Cronet_UrlResponseInfo_url_chain_add(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    ffi.Pointer<ffi.Int8> element,
  ) {
    return _Cronet_UrlResponseInfo_url_chain_add(
      self,
      element,
    );
  }

  late final _Cronet_UrlResponseInfo_url_chain_add_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlResponseInfo_url_chain_add>>(
          'Cronet_UrlResponseInfo_url_chain_add');
  late final _dart_Cronet_UrlResponseInfo_url_chain_add
      _Cronet_UrlResponseInfo_url_chain_add =
      _Cronet_UrlResponseInfo_url_chain_add_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_url_chain_add>();

  void Cronet_UrlResponseInfo_http_status_code_set(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    int http_status_code,
  ) {
    return _Cronet_UrlResponseInfo_http_status_code_set(
      self,
      http_status_code,
    );
  }

  late final _Cronet_UrlResponseInfo_http_status_code_set_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlResponseInfo_http_status_code_set>>(
      'Cronet_UrlResponseInfo_http_status_code_set');
  late final _dart_Cronet_UrlResponseInfo_http_status_code_set
      _Cronet_UrlResponseInfo_http_status_code_set =
      _Cronet_UrlResponseInfo_http_status_code_set_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_http_status_code_set>();

  void Cronet_UrlResponseInfo_http_status_text_set(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    ffi.Pointer<ffi.Int8> http_status_text,
  ) {
    return _Cronet_UrlResponseInfo_http_status_text_set(
      self,
      http_status_text,
    );
  }

  late final _Cronet_UrlResponseInfo_http_status_text_set_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlResponseInfo_http_status_text_set>>(
      'Cronet_UrlResponseInfo_http_status_text_set');
  late final _dart_Cronet_UrlResponseInfo_http_status_text_set
      _Cronet_UrlResponseInfo_http_status_text_set =
      _Cronet_UrlResponseInfo_http_status_text_set_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_http_status_text_set>();

  void Cronet_UrlResponseInfo_all_headers_list_add(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    ffi.Pointer<Cronet_HttpHeader> element,
  ) {
    return _Cronet_UrlResponseInfo_all_headers_list_add(
      self,
      element,
    );
  }

  late final _Cronet_UrlResponseInfo_all_headers_list_add_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlResponseInfo_all_headers_list_add>>(
      'Cronet_UrlResponseInfo_all_headers_list_add');
  late final _dart_Cronet_UrlResponseInfo_all_headers_list_add
      _Cronet_UrlResponseInfo_all_headers_list_add =
      _Cronet_UrlResponseInfo_all_headers_list_add_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_all_headers_list_add>();

  void Cronet_UrlResponseInfo_was_cached_set(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    bool was_cached,
  ) {
    return _Cronet_UrlResponseInfo_was_cached_set(
      self,
      was_cached ? 1 : 0,
    );
  }

  late final _Cronet_UrlResponseInfo_was_cached_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlResponseInfo_was_cached_set>>(
          'Cronet_UrlResponseInfo_was_cached_set');
  late final _dart_Cronet_UrlResponseInfo_was_cached_set
      _Cronet_UrlResponseInfo_was_cached_set =
      _Cronet_UrlResponseInfo_was_cached_set_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_was_cached_set>();

  void Cronet_UrlResponseInfo_negotiated_protocol_set(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    ffi.Pointer<ffi.Int8> negotiated_protocol,
  ) {
    return _Cronet_UrlResponseInfo_negotiated_protocol_set(
      self,
      negotiated_protocol,
    );
  }

  late final _Cronet_UrlResponseInfo_negotiated_protocol_set_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_UrlResponseInfo_negotiated_protocol_set>>(
      'Cronet_UrlResponseInfo_negotiated_protocol_set');
  late final _dart_Cronet_UrlResponseInfo_negotiated_protocol_set
      _Cronet_UrlResponseInfo_negotiated_protocol_set =
      _Cronet_UrlResponseInfo_negotiated_protocol_set_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_negotiated_protocol_set>();

  void Cronet_UrlResponseInfo_proxy_server_set(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    ffi.Pointer<ffi.Int8> proxy_server,
  ) {
    return _Cronet_UrlResponseInfo_proxy_server_set(
      self,
      proxy_server,
    );
  }

  late final _Cronet_UrlResponseInfo_proxy_server_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlResponseInfo_proxy_server_set>>(
          'Cronet_UrlResponseInfo_proxy_server_set');
  late final _dart_Cronet_UrlResponseInfo_proxy_server_set
      _Cronet_UrlResponseInfo_proxy_server_set =
      _Cronet_UrlResponseInfo_proxy_server_set_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_proxy_server_set>();

  void Cronet_UrlResponseInfo_received_byte_count_set(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    int received_byte_count,
  ) {
    return _Cronet_UrlResponseInfo_received_byte_count_set(
      self,
      received_byte_count,
    );
  }

  late final _Cronet_UrlResponseInfo_received_byte_count_set_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_UrlResponseInfo_received_byte_count_set>>(
      'Cronet_UrlResponseInfo_received_byte_count_set');
  late final _dart_Cronet_UrlResponseInfo_received_byte_count_set
      _Cronet_UrlResponseInfo_received_byte_count_set =
      _Cronet_UrlResponseInfo_received_byte_count_set_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_received_byte_count_set>();

  ffi.Pointer<ffi.Int8> Cronet_UrlResponseInfo_url_get(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_url_get(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_url_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlResponseInfo_url_get>>(
          'Cronet_UrlResponseInfo_url_get');
  late final _dart_Cronet_UrlResponseInfo_url_get
      _Cronet_UrlResponseInfo_url_get = _Cronet_UrlResponseInfo_url_get_ptr
          .asFunction<_dart_Cronet_UrlResponseInfo_url_get>();

  int Cronet_UrlResponseInfo_url_chain_size(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_url_chain_size(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_url_chain_size_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlResponseInfo_url_chain_size>>(
          'Cronet_UrlResponseInfo_url_chain_size');
  late final _dart_Cronet_UrlResponseInfo_url_chain_size
      _Cronet_UrlResponseInfo_url_chain_size =
      _Cronet_UrlResponseInfo_url_chain_size_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_url_chain_size>();

  ffi.Pointer<ffi.Int8> Cronet_UrlResponseInfo_url_chain_at(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    int index,
  ) {
    return _Cronet_UrlResponseInfo_url_chain_at(
      self,
      index,
    );
  }

  late final _Cronet_UrlResponseInfo_url_chain_at_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlResponseInfo_url_chain_at>>(
          'Cronet_UrlResponseInfo_url_chain_at');
  late final _dart_Cronet_UrlResponseInfo_url_chain_at
      _Cronet_UrlResponseInfo_url_chain_at =
      _Cronet_UrlResponseInfo_url_chain_at_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_url_chain_at>();

  void Cronet_UrlResponseInfo_url_chain_clear(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_url_chain_clear(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_url_chain_clear_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlResponseInfo_url_chain_clear>>(
          'Cronet_UrlResponseInfo_url_chain_clear');
  late final _dart_Cronet_UrlResponseInfo_url_chain_clear
      _Cronet_UrlResponseInfo_url_chain_clear =
      _Cronet_UrlResponseInfo_url_chain_clear_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_url_chain_clear>();

  int Cronet_UrlResponseInfo_http_status_code_get(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_http_status_code_get(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_http_status_code_get_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_http_status_code_get>>(
      'Cronet_UrlResponseInfo_http_status_code_get');
  late final _dart_Cronet_UrlResponseInfo_http_status_code_get
      _Cronet_UrlResponseInfo_http_status_code_get =
      _Cronet_UrlResponseInfo_http_status_code_get_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_http_status_code_get>();

  ffi.Pointer<ffi.Int8> Cronet_UrlResponseInfo_http_status_text_get(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_http_status_text_get(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_http_status_text_get_ptr = _lookup<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_http_status_text_get>>(
      'Cronet_UrlResponseInfo_http_status_text_get');
  late final _dart_Cronet_UrlResponseInfo_http_status_text_get
      _Cronet_UrlResponseInfo_http_status_text_get =
      _Cronet_UrlResponseInfo_http_status_text_get_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_http_status_text_get>();

  int Cronet_UrlResponseInfo_all_headers_list_size(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_all_headers_list_size(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_all_headers_list_size_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlResponseInfo_all_headers_list_size>>(
      'Cronet_UrlResponseInfo_all_headers_list_size');
  late final _dart_Cronet_UrlResponseInfo_all_headers_list_size
      _Cronet_UrlResponseInfo_all_headers_list_size =
      _Cronet_UrlResponseInfo_all_headers_list_size_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_all_headers_list_size>();

  ffi.Pointer<Cronet_HttpHeader> Cronet_UrlResponseInfo_all_headers_list_at(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
    int index,
  ) {
    return _Cronet_UrlResponseInfo_all_headers_list_at(
      self,
      index,
    );
  }

  late final _Cronet_UrlResponseInfo_all_headers_list_at_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlResponseInfo_all_headers_list_at>>(
      'Cronet_UrlResponseInfo_all_headers_list_at');
  late final _dart_Cronet_UrlResponseInfo_all_headers_list_at
      _Cronet_UrlResponseInfo_all_headers_list_at =
      _Cronet_UrlResponseInfo_all_headers_list_at_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_all_headers_list_at>();

  void Cronet_UrlResponseInfo_all_headers_list_clear(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_all_headers_list_clear(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_all_headers_list_clear_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlResponseInfo_all_headers_list_clear>>(
      'Cronet_UrlResponseInfo_all_headers_list_clear');
  late final _dart_Cronet_UrlResponseInfo_all_headers_list_clear
      _Cronet_UrlResponseInfo_all_headers_list_clear =
      _Cronet_UrlResponseInfo_all_headers_list_clear_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_all_headers_list_clear>();

  bool Cronet_UrlResponseInfo_was_cached_get(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_was_cached_get(
          self,
        ) !=
        0;
  }

  late final _Cronet_UrlResponseInfo_was_cached_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlResponseInfo_was_cached_get>>(
          'Cronet_UrlResponseInfo_was_cached_get');
  late final _dart_Cronet_UrlResponseInfo_was_cached_get
      _Cronet_UrlResponseInfo_was_cached_get =
      _Cronet_UrlResponseInfo_was_cached_get_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_was_cached_get>();

  ffi.Pointer<ffi.Int8> Cronet_UrlResponseInfo_negotiated_protocol_get(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_negotiated_protocol_get(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_negotiated_protocol_get_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_UrlResponseInfo_negotiated_protocol_get>>(
      'Cronet_UrlResponseInfo_negotiated_protocol_get');
  late final _dart_Cronet_UrlResponseInfo_negotiated_protocol_get
      _Cronet_UrlResponseInfo_negotiated_protocol_get =
      _Cronet_UrlResponseInfo_negotiated_protocol_get_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_negotiated_protocol_get>();

  ffi.Pointer<ffi.Int8> Cronet_UrlResponseInfo_proxy_server_get(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_proxy_server_get(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_proxy_server_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlResponseInfo_proxy_server_get>>(
          'Cronet_UrlResponseInfo_proxy_server_get');
  late final _dart_Cronet_UrlResponseInfo_proxy_server_get
      _Cronet_UrlResponseInfo_proxy_server_get =
      _Cronet_UrlResponseInfo_proxy_server_get_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_proxy_server_get>();

  int Cronet_UrlResponseInfo_received_byte_count_get(
    ffi.Pointer<Cronet_UrlResponseInfo> self,
  ) {
    return _Cronet_UrlResponseInfo_received_byte_count_get(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_received_byte_count_get_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_UrlResponseInfo_received_byte_count_get>>(
      'Cronet_UrlResponseInfo_received_byte_count_get');
  late final _dart_Cronet_UrlResponseInfo_received_byte_count_get
      _Cronet_UrlResponseInfo_received_byte_count_get =
      _Cronet_UrlResponseInfo_received_byte_count_get_ptr.asFunction<
          _dart_Cronet_UrlResponseInfo_received_byte_count_get>();

  /// ////////////////////
  ffi.Pointer<Cronet_UrlRequestParams> Cronet_UrlRequestParams_Create() {
    return _Cronet_UrlRequestParams_Create();
  }

  late final _Cronet_UrlRequestParams_Create_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestParams_Create>>(
          'Cronet_UrlRequestParams_Create');
  late final _dart_Cronet_UrlRequestParams_Create
      _Cronet_UrlRequestParams_Create = _Cronet_UrlRequestParams_Create_ptr
          .asFunction<_dart_Cronet_UrlRequestParams_Create>();

  void Cronet_UrlRequestParams_Destroy(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_Destroy(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestParams_Destroy>>(
          'Cronet_UrlRequestParams_Destroy');
  late final _dart_Cronet_UrlRequestParams_Destroy
      _Cronet_UrlRequestParams_Destroy = _Cronet_UrlRequestParams_Destroy_ptr
          .asFunction<_dart_Cronet_UrlRequestParams_Destroy>();

  void Cronet_UrlRequestParams_http_method_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    ffi.Pointer<ffi.Int8> http_method,
  ) {
    return _Cronet_UrlRequestParams_http_method_set(
      self,
      http_method,
    );
  }

  late final _Cronet_UrlRequestParams_http_method_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestParams_http_method_set>>(
          'Cronet_UrlRequestParams_http_method_set');
  late final _dart_Cronet_UrlRequestParams_http_method_set
      _Cronet_UrlRequestParams_http_method_set =
      _Cronet_UrlRequestParams_http_method_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_http_method_set>();

  void Cronet_UrlRequestParams_request_headers_add(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    ffi.Pointer<Cronet_HttpHeader> element,
  ) {
    return _Cronet_UrlRequestParams_request_headers_add(
      self,
      element,
    );
  }

  late final _Cronet_UrlRequestParams_request_headers_add_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlRequestParams_request_headers_add>>(
      'Cronet_UrlRequestParams_request_headers_add');
  late final _dart_Cronet_UrlRequestParams_request_headers_add
      _Cronet_UrlRequestParams_request_headers_add =
      _Cronet_UrlRequestParams_request_headers_add_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_request_headers_add>();

  void Cronet_UrlRequestParams_disable_cache_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    bool disable_cache,
  ) {
    return _Cronet_UrlRequestParams_disable_cache_set(
      self,
      disable_cache ? 1 : 0,
    );
  }

  late final _Cronet_UrlRequestParams_disable_cache_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestParams_disable_cache_set>>(
          'Cronet_UrlRequestParams_disable_cache_set');
  late final _dart_Cronet_UrlRequestParams_disable_cache_set
      _Cronet_UrlRequestParams_disable_cache_set =
      _Cronet_UrlRequestParams_disable_cache_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_disable_cache_set>();

  void Cronet_UrlRequestParams_priority_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    int priority,
  ) {
    return _Cronet_UrlRequestParams_priority_set(
      self,
      priority,
    );
  }

  late final _Cronet_UrlRequestParams_priority_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestParams_priority_set>>(
          'Cronet_UrlRequestParams_priority_set');
  late final _dart_Cronet_UrlRequestParams_priority_set
      _Cronet_UrlRequestParams_priority_set =
      _Cronet_UrlRequestParams_priority_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_priority_set>();

  void Cronet_UrlRequestParams_upload_data_provider_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    ffi.Pointer<Cronet_UploadDataProvider> upload_data_provider,
  ) {
    return _Cronet_UrlRequestParams_upload_data_provider_set(
      self,
      upload_data_provider,
    );
  }

  late final _Cronet_UrlRequestParams_upload_data_provider_set_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_UrlRequestParams_upload_data_provider_set>>(
      'Cronet_UrlRequestParams_upload_data_provider_set');
  late final _dart_Cronet_UrlRequestParams_upload_data_provider_set
      _Cronet_UrlRequestParams_upload_data_provider_set =
      _Cronet_UrlRequestParams_upload_data_provider_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_upload_data_provider_set>();

  void Cronet_UrlRequestParams_upload_data_provider_executor_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    ffi.Pointer<Cronet_Executor> upload_data_provider_executor,
  ) {
    return _Cronet_UrlRequestParams_upload_data_provider_executor_set(
      self,
      upload_data_provider_executor,
    );
  }

  late final _Cronet_UrlRequestParams_upload_data_provider_executor_set_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_Cronet_UrlRequestParams_upload_data_provider_executor_set>>(
          'Cronet_UrlRequestParams_upload_data_provider_executor_set');
  late final _dart_Cronet_UrlRequestParams_upload_data_provider_executor_set
      _Cronet_UrlRequestParams_upload_data_provider_executor_set =
      _Cronet_UrlRequestParams_upload_data_provider_executor_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_upload_data_provider_executor_set>();

  void Cronet_UrlRequestParams_allow_direct_executor_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    bool allow_direct_executor,
  ) {
    return _Cronet_UrlRequestParams_allow_direct_executor_set(
      self,
      allow_direct_executor ? 1 : 0,
    );
  }

  late final _Cronet_UrlRequestParams_allow_direct_executor_set_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_UrlRequestParams_allow_direct_executor_set>>(
      'Cronet_UrlRequestParams_allow_direct_executor_set');
  late final _dart_Cronet_UrlRequestParams_allow_direct_executor_set
      _Cronet_UrlRequestParams_allow_direct_executor_set =
      _Cronet_UrlRequestParams_allow_direct_executor_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_allow_direct_executor_set>();

  void Cronet_UrlRequestParams_annotations_add(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    ffi.Pointer<ffi.Void> element,
  ) {
    return _Cronet_UrlRequestParams_annotations_add(
      self,
      element,
    );
  }

  late final _Cronet_UrlRequestParams_annotations_add_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestParams_annotations_add>>(
          'Cronet_UrlRequestParams_annotations_add');
  late final _dart_Cronet_UrlRequestParams_annotations_add
      _Cronet_UrlRequestParams_annotations_add =
      _Cronet_UrlRequestParams_annotations_add_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_annotations_add>();

  void Cronet_UrlRequestParams_request_finished_listener_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    ffi.Pointer<Cronet_RequestFinishedInfoListener> request_finished_listener,
  ) {
    return _Cronet_UrlRequestParams_request_finished_listener_set(
      self,
      request_finished_listener,
    );
  }

  late final _Cronet_UrlRequestParams_request_finished_listener_set_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_Cronet_UrlRequestParams_request_finished_listener_set>>(
          'Cronet_UrlRequestParams_request_finished_listener_set');
  late final _dart_Cronet_UrlRequestParams_request_finished_listener_set
      _Cronet_UrlRequestParams_request_finished_listener_set =
      _Cronet_UrlRequestParams_request_finished_listener_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_request_finished_listener_set>();

  void Cronet_UrlRequestParams_request_finished_executor_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    ffi.Pointer<Cronet_Executor> request_finished_executor,
  ) {
    return _Cronet_UrlRequestParams_request_finished_executor_set(
      self,
      request_finished_executor,
    );
  }

  late final _Cronet_UrlRequestParams_request_finished_executor_set_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_Cronet_UrlRequestParams_request_finished_executor_set>>(
          'Cronet_UrlRequestParams_request_finished_executor_set');
  late final _dart_Cronet_UrlRequestParams_request_finished_executor_set
      _Cronet_UrlRequestParams_request_finished_executor_set =
      _Cronet_UrlRequestParams_request_finished_executor_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_request_finished_executor_set>();

  void Cronet_UrlRequestParams_idempotency_set(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    int idempotency,
  ) {
    return _Cronet_UrlRequestParams_idempotency_set(
      self,
      idempotency,
    );
  }

  late final _Cronet_UrlRequestParams_idempotency_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestParams_idempotency_set>>(
          'Cronet_UrlRequestParams_idempotency_set');
  late final _dart_Cronet_UrlRequestParams_idempotency_set
      _Cronet_UrlRequestParams_idempotency_set =
      _Cronet_UrlRequestParams_idempotency_set_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_idempotency_set>();

  ffi.Pointer<ffi.Int8> Cronet_UrlRequestParams_http_method_get(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_http_method_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_http_method_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestParams_http_method_get>>(
          'Cronet_UrlRequestParams_http_method_get');
  late final _dart_Cronet_UrlRequestParams_http_method_get
      _Cronet_UrlRequestParams_http_method_get =
      _Cronet_UrlRequestParams_http_method_get_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_http_method_get>();

  int Cronet_UrlRequestParams_request_headers_size(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_request_headers_size(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_request_headers_size_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlRequestParams_request_headers_size>>(
      'Cronet_UrlRequestParams_request_headers_size');
  late final _dart_Cronet_UrlRequestParams_request_headers_size
      _Cronet_UrlRequestParams_request_headers_size =
      _Cronet_UrlRequestParams_request_headers_size_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_request_headers_size>();

  ffi.Pointer<Cronet_HttpHeader> Cronet_UrlRequestParams_request_headers_at(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    int index,
  ) {
    return _Cronet_UrlRequestParams_request_headers_at(
      self,
      index,
    );
  }

  late final _Cronet_UrlRequestParams_request_headers_at_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlRequestParams_request_headers_at>>(
      'Cronet_UrlRequestParams_request_headers_at');
  late final _dart_Cronet_UrlRequestParams_request_headers_at
      _Cronet_UrlRequestParams_request_headers_at =
      _Cronet_UrlRequestParams_request_headers_at_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_request_headers_at>();

  void Cronet_UrlRequestParams_request_headers_clear(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_request_headers_clear(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_request_headers_clear_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_UrlRequestParams_request_headers_clear>>(
      'Cronet_UrlRequestParams_request_headers_clear');
  late final _dart_Cronet_UrlRequestParams_request_headers_clear
      _Cronet_UrlRequestParams_request_headers_clear =
      _Cronet_UrlRequestParams_request_headers_clear_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_request_headers_clear>();

  bool Cronet_UrlRequestParams_disable_cache_get(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_disable_cache_get(
          self,
        ) !=
        0;
  }

  late final _Cronet_UrlRequestParams_disable_cache_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestParams_disable_cache_get>>(
          'Cronet_UrlRequestParams_disable_cache_get');
  late final _dart_Cronet_UrlRequestParams_disable_cache_get
      _Cronet_UrlRequestParams_disable_cache_get =
      _Cronet_UrlRequestParams_disable_cache_get_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_disable_cache_get>();

  int Cronet_UrlRequestParams_priority_get(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_priority_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_priority_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestParams_priority_get>>(
          'Cronet_UrlRequestParams_priority_get');
  late final _dart_Cronet_UrlRequestParams_priority_get
      _Cronet_UrlRequestParams_priority_get =
      _Cronet_UrlRequestParams_priority_get_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_priority_get>();

  ffi.Pointer<Cronet_UploadDataProvider>
      Cronet_UrlRequestParams_upload_data_provider_get(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_upload_data_provider_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_upload_data_provider_get_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_UrlRequestParams_upload_data_provider_get>>(
      'Cronet_UrlRequestParams_upload_data_provider_get');
  late final _dart_Cronet_UrlRequestParams_upload_data_provider_get
      _Cronet_UrlRequestParams_upload_data_provider_get =
      _Cronet_UrlRequestParams_upload_data_provider_get_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_upload_data_provider_get>();

  ffi.Pointer<Cronet_Executor>
      Cronet_UrlRequestParams_upload_data_provider_executor_get(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_upload_data_provider_executor_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_upload_data_provider_executor_get_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_Cronet_UrlRequestParams_upload_data_provider_executor_get>>(
          'Cronet_UrlRequestParams_upload_data_provider_executor_get');
  late final _dart_Cronet_UrlRequestParams_upload_data_provider_executor_get
      _Cronet_UrlRequestParams_upload_data_provider_executor_get =
      _Cronet_UrlRequestParams_upload_data_provider_executor_get_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_upload_data_provider_executor_get>();

  bool Cronet_UrlRequestParams_allow_direct_executor_get(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_allow_direct_executor_get(
          self,
        ) !=
        0;
  }

  late final _Cronet_UrlRequestParams_allow_direct_executor_get_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_UrlRequestParams_allow_direct_executor_get>>(
      'Cronet_UrlRequestParams_allow_direct_executor_get');
  late final _dart_Cronet_UrlRequestParams_allow_direct_executor_get
      _Cronet_UrlRequestParams_allow_direct_executor_get =
      _Cronet_UrlRequestParams_allow_direct_executor_get_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_allow_direct_executor_get>();

  int Cronet_UrlRequestParams_annotations_size(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_annotations_size(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_annotations_size_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestParams_annotations_size>>(
          'Cronet_UrlRequestParams_annotations_size');
  late final _dart_Cronet_UrlRequestParams_annotations_size
      _Cronet_UrlRequestParams_annotations_size =
      _Cronet_UrlRequestParams_annotations_size_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_annotations_size>();

  ffi.Pointer<ffi.Void> Cronet_UrlRequestParams_annotations_at(
    ffi.Pointer<Cronet_UrlRequestParams> self,
    int index,
  ) {
    return _Cronet_UrlRequestParams_annotations_at(
      self,
      index,
    );
  }

  late final _Cronet_UrlRequestParams_annotations_at_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestParams_annotations_at>>(
          'Cronet_UrlRequestParams_annotations_at');
  late final _dart_Cronet_UrlRequestParams_annotations_at
      _Cronet_UrlRequestParams_annotations_at =
      _Cronet_UrlRequestParams_annotations_at_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_annotations_at>();

  void Cronet_UrlRequestParams_annotations_clear(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_annotations_clear(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_annotations_clear_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestParams_annotations_clear>>(
          'Cronet_UrlRequestParams_annotations_clear');
  late final _dart_Cronet_UrlRequestParams_annotations_clear
      _Cronet_UrlRequestParams_annotations_clear =
      _Cronet_UrlRequestParams_annotations_clear_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_annotations_clear>();

  ffi.Pointer<Cronet_RequestFinishedInfoListener>
      Cronet_UrlRequestParams_request_finished_listener_get(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_request_finished_listener_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_request_finished_listener_get_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_Cronet_UrlRequestParams_request_finished_listener_get>>(
          'Cronet_UrlRequestParams_request_finished_listener_get');
  late final _dart_Cronet_UrlRequestParams_request_finished_listener_get
      _Cronet_UrlRequestParams_request_finished_listener_get =
      _Cronet_UrlRequestParams_request_finished_listener_get_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_request_finished_listener_get>();

  ffi.Pointer<Cronet_Executor>
      Cronet_UrlRequestParams_request_finished_executor_get(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_request_finished_executor_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_request_finished_executor_get_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_Cronet_UrlRequestParams_request_finished_executor_get>>(
          'Cronet_UrlRequestParams_request_finished_executor_get');
  late final _dart_Cronet_UrlRequestParams_request_finished_executor_get
      _Cronet_UrlRequestParams_request_finished_executor_get =
      _Cronet_UrlRequestParams_request_finished_executor_get_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_request_finished_executor_get>();

  int Cronet_UrlRequestParams_idempotency_get(
    ffi.Pointer<Cronet_UrlRequestParams> self,
  ) {
    return _Cronet_UrlRequestParams_idempotency_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_idempotency_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequestParams_idempotency_get>>(
          'Cronet_UrlRequestParams_idempotency_get');
  late final _dart_Cronet_UrlRequestParams_idempotency_get
      _Cronet_UrlRequestParams_idempotency_get =
      _Cronet_UrlRequestParams_idempotency_get_ptr.asFunction<
          _dart_Cronet_UrlRequestParams_idempotency_get>();

  /// ////////////////////
  ffi.Pointer<Cronet_DateTime> Cronet_DateTime_Create() {
    return _Cronet_DateTime_Create();
  }

  late final _Cronet_DateTime_Create_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_DateTime_Create>>(
          'Cronet_DateTime_Create');
  late final _dart_Cronet_DateTime_Create _Cronet_DateTime_Create =
      _Cronet_DateTime_Create_ptr.asFunction<_dart_Cronet_DateTime_Create>();

  void Cronet_DateTime_Destroy(
    ffi.Pointer<Cronet_DateTime> self,
  ) {
    return _Cronet_DateTime_Destroy(
      self,
    );
  }

  late final _Cronet_DateTime_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_DateTime_Destroy>>(
          'Cronet_DateTime_Destroy');
  late final _dart_Cronet_DateTime_Destroy _Cronet_DateTime_Destroy =
      _Cronet_DateTime_Destroy_ptr.asFunction<_dart_Cronet_DateTime_Destroy>();

  void Cronet_DateTime_value_set(
    ffi.Pointer<Cronet_DateTime> self,
    int value,
  ) {
    return _Cronet_DateTime_value_set(
      self,
      value,
    );
  }

  late final _Cronet_DateTime_value_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_DateTime_value_set>>(
          'Cronet_DateTime_value_set');
  late final _dart_Cronet_DateTime_value_set _Cronet_DateTime_value_set =
      _Cronet_DateTime_value_set_ptr.asFunction<
          _dart_Cronet_DateTime_value_set>();

  int Cronet_DateTime_value_get(
    ffi.Pointer<Cronet_DateTime> self,
  ) {
    return _Cronet_DateTime_value_get(
      self,
    );
  }

  late final _Cronet_DateTime_value_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_DateTime_value_get>>(
          'Cronet_DateTime_value_get');
  late final _dart_Cronet_DateTime_value_get _Cronet_DateTime_value_get =
      _Cronet_DateTime_value_get_ptr.asFunction<
          _dart_Cronet_DateTime_value_get>();

  /// ////////////////////
  ffi.Pointer<Cronet_Metrics> Cronet_Metrics_Create() {
    return _Cronet_Metrics_Create();
  }

  late final _Cronet_Metrics_Create_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_Create>>(
          'Cronet_Metrics_Create');
  late final _dart_Cronet_Metrics_Create _Cronet_Metrics_Create =
      _Cronet_Metrics_Create_ptr.asFunction<_dart_Cronet_Metrics_Create>();

  void Cronet_Metrics_Destroy(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_Destroy(
      self,
    );
  }

  late final _Cronet_Metrics_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_Destroy>>(
          'Cronet_Metrics_Destroy');
  late final _dart_Cronet_Metrics_Destroy _Cronet_Metrics_Destroy =
      _Cronet_Metrics_Destroy_ptr.asFunction<_dart_Cronet_Metrics_Destroy>();

  void Cronet_Metrics_request_start_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> request_start,
  ) {
    return _Cronet_Metrics_request_start_set(
      self,
      request_start,
    );
  }

  late final _Cronet_Metrics_request_start_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_request_start_set>>(
          'Cronet_Metrics_request_start_set');
  late final _dart_Cronet_Metrics_request_start_set
      _Cronet_Metrics_request_start_set = _Cronet_Metrics_request_start_set_ptr
          .asFunction<_dart_Cronet_Metrics_request_start_set>();

  void Cronet_Metrics_request_start_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> request_start,
  ) {
    return _Cronet_Metrics_request_start_move(
      self,
      request_start,
    );
  }

  late final _Cronet_Metrics_request_start_move_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_request_start_move>>(
          'Cronet_Metrics_request_start_move');
  late final _dart_Cronet_Metrics_request_start_move
      _Cronet_Metrics_request_start_move =
      _Cronet_Metrics_request_start_move_ptr.asFunction<
          _dart_Cronet_Metrics_request_start_move>();

  void Cronet_Metrics_dns_start_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> dns_start,
  ) {
    return _Cronet_Metrics_dns_start_set(
      self,
      dns_start,
    );
  }

  late final _Cronet_Metrics_dns_start_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_dns_start_set>>(
          'Cronet_Metrics_dns_start_set');
  late final _dart_Cronet_Metrics_dns_start_set _Cronet_Metrics_dns_start_set =
      _Cronet_Metrics_dns_start_set_ptr.asFunction<
          _dart_Cronet_Metrics_dns_start_set>();

  void Cronet_Metrics_dns_start_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> dns_start,
  ) {
    return _Cronet_Metrics_dns_start_move(
      self,
      dns_start,
    );
  }

  late final _Cronet_Metrics_dns_start_move_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_dns_start_move>>(
          'Cronet_Metrics_dns_start_move');
  late final _dart_Cronet_Metrics_dns_start_move
      _Cronet_Metrics_dns_start_move = _Cronet_Metrics_dns_start_move_ptr
          .asFunction<_dart_Cronet_Metrics_dns_start_move>();

  void Cronet_Metrics_dns_end_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> dns_end,
  ) {
    return _Cronet_Metrics_dns_end_set(
      self,
      dns_end,
    );
  }

  late final _Cronet_Metrics_dns_end_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_dns_end_set>>(
          'Cronet_Metrics_dns_end_set');
  late final _dart_Cronet_Metrics_dns_end_set _Cronet_Metrics_dns_end_set =
      _Cronet_Metrics_dns_end_set_ptr.asFunction<
          _dart_Cronet_Metrics_dns_end_set>();

  void Cronet_Metrics_dns_end_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> dns_end,
  ) {
    return _Cronet_Metrics_dns_end_move(
      self,
      dns_end,
    );
  }

  late final _Cronet_Metrics_dns_end_move_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_dns_end_move>>(
          'Cronet_Metrics_dns_end_move');
  late final _dart_Cronet_Metrics_dns_end_move _Cronet_Metrics_dns_end_move =
      _Cronet_Metrics_dns_end_move_ptr.asFunction<
          _dart_Cronet_Metrics_dns_end_move>();

  void Cronet_Metrics_connect_start_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> connect_start,
  ) {
    return _Cronet_Metrics_connect_start_set(
      self,
      connect_start,
    );
  }

  late final _Cronet_Metrics_connect_start_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_connect_start_set>>(
          'Cronet_Metrics_connect_start_set');
  late final _dart_Cronet_Metrics_connect_start_set
      _Cronet_Metrics_connect_start_set = _Cronet_Metrics_connect_start_set_ptr
          .asFunction<_dart_Cronet_Metrics_connect_start_set>();

  void Cronet_Metrics_connect_start_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> connect_start,
  ) {
    return _Cronet_Metrics_connect_start_move(
      self,
      connect_start,
    );
  }

  late final _Cronet_Metrics_connect_start_move_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_connect_start_move>>(
          'Cronet_Metrics_connect_start_move');
  late final _dart_Cronet_Metrics_connect_start_move
      _Cronet_Metrics_connect_start_move =
      _Cronet_Metrics_connect_start_move_ptr.asFunction<
          _dart_Cronet_Metrics_connect_start_move>();

  void Cronet_Metrics_connect_end_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> connect_end,
  ) {
    return _Cronet_Metrics_connect_end_set(
      self,
      connect_end,
    );
  }

  late final _Cronet_Metrics_connect_end_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_connect_end_set>>(
          'Cronet_Metrics_connect_end_set');
  late final _dart_Cronet_Metrics_connect_end_set
      _Cronet_Metrics_connect_end_set = _Cronet_Metrics_connect_end_set_ptr
          .asFunction<_dart_Cronet_Metrics_connect_end_set>();

  void Cronet_Metrics_connect_end_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> connect_end,
  ) {
    return _Cronet_Metrics_connect_end_move(
      self,
      connect_end,
    );
  }

  late final _Cronet_Metrics_connect_end_move_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_connect_end_move>>(
          'Cronet_Metrics_connect_end_move');
  late final _dart_Cronet_Metrics_connect_end_move
      _Cronet_Metrics_connect_end_move = _Cronet_Metrics_connect_end_move_ptr
          .asFunction<_dart_Cronet_Metrics_connect_end_move>();

  void Cronet_Metrics_ssl_start_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> ssl_start,
  ) {
    return _Cronet_Metrics_ssl_start_set(
      self,
      ssl_start,
    );
  }

  late final _Cronet_Metrics_ssl_start_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_ssl_start_set>>(
          'Cronet_Metrics_ssl_start_set');
  late final _dart_Cronet_Metrics_ssl_start_set _Cronet_Metrics_ssl_start_set =
      _Cronet_Metrics_ssl_start_set_ptr.asFunction<
          _dart_Cronet_Metrics_ssl_start_set>();

  void Cronet_Metrics_ssl_start_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> ssl_start,
  ) {
    return _Cronet_Metrics_ssl_start_move(
      self,
      ssl_start,
    );
  }

  late final _Cronet_Metrics_ssl_start_move_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_ssl_start_move>>(
          'Cronet_Metrics_ssl_start_move');
  late final _dart_Cronet_Metrics_ssl_start_move
      _Cronet_Metrics_ssl_start_move = _Cronet_Metrics_ssl_start_move_ptr
          .asFunction<_dart_Cronet_Metrics_ssl_start_move>();

  void Cronet_Metrics_ssl_end_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> ssl_end,
  ) {
    return _Cronet_Metrics_ssl_end_set(
      self,
      ssl_end,
    );
  }

  late final _Cronet_Metrics_ssl_end_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_ssl_end_set>>(
          'Cronet_Metrics_ssl_end_set');
  late final _dart_Cronet_Metrics_ssl_end_set _Cronet_Metrics_ssl_end_set =
      _Cronet_Metrics_ssl_end_set_ptr.asFunction<
          _dart_Cronet_Metrics_ssl_end_set>();

  void Cronet_Metrics_ssl_end_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> ssl_end,
  ) {
    return _Cronet_Metrics_ssl_end_move(
      self,
      ssl_end,
    );
  }

  late final _Cronet_Metrics_ssl_end_move_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_ssl_end_move>>(
          'Cronet_Metrics_ssl_end_move');
  late final _dart_Cronet_Metrics_ssl_end_move _Cronet_Metrics_ssl_end_move =
      _Cronet_Metrics_ssl_end_move_ptr.asFunction<
          _dart_Cronet_Metrics_ssl_end_move>();

  void Cronet_Metrics_sending_start_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> sending_start,
  ) {
    return _Cronet_Metrics_sending_start_set(
      self,
      sending_start,
    );
  }

  late final _Cronet_Metrics_sending_start_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_sending_start_set>>(
          'Cronet_Metrics_sending_start_set');
  late final _dart_Cronet_Metrics_sending_start_set
      _Cronet_Metrics_sending_start_set = _Cronet_Metrics_sending_start_set_ptr
          .asFunction<_dart_Cronet_Metrics_sending_start_set>();

  void Cronet_Metrics_sending_start_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> sending_start,
  ) {
    return _Cronet_Metrics_sending_start_move(
      self,
      sending_start,
    );
  }

  late final _Cronet_Metrics_sending_start_move_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_sending_start_move>>(
          'Cronet_Metrics_sending_start_move');
  late final _dart_Cronet_Metrics_sending_start_move
      _Cronet_Metrics_sending_start_move =
      _Cronet_Metrics_sending_start_move_ptr.asFunction<
          _dart_Cronet_Metrics_sending_start_move>();

  void Cronet_Metrics_sending_end_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> sending_end,
  ) {
    return _Cronet_Metrics_sending_end_set(
      self,
      sending_end,
    );
  }

  late final _Cronet_Metrics_sending_end_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_sending_end_set>>(
          'Cronet_Metrics_sending_end_set');
  late final _dart_Cronet_Metrics_sending_end_set
      _Cronet_Metrics_sending_end_set = _Cronet_Metrics_sending_end_set_ptr
          .asFunction<_dart_Cronet_Metrics_sending_end_set>();

  void Cronet_Metrics_sending_end_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> sending_end,
  ) {
    return _Cronet_Metrics_sending_end_move(
      self,
      sending_end,
    );
  }

  late final _Cronet_Metrics_sending_end_move_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_sending_end_move>>(
          'Cronet_Metrics_sending_end_move');
  late final _dart_Cronet_Metrics_sending_end_move
      _Cronet_Metrics_sending_end_move = _Cronet_Metrics_sending_end_move_ptr
          .asFunction<_dart_Cronet_Metrics_sending_end_move>();

  void Cronet_Metrics_push_start_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> push_start,
  ) {
    return _Cronet_Metrics_push_start_set(
      self,
      push_start,
    );
  }

  late final _Cronet_Metrics_push_start_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_push_start_set>>(
          'Cronet_Metrics_push_start_set');
  late final _dart_Cronet_Metrics_push_start_set
      _Cronet_Metrics_push_start_set = _Cronet_Metrics_push_start_set_ptr
          .asFunction<_dart_Cronet_Metrics_push_start_set>();

  void Cronet_Metrics_push_start_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> push_start,
  ) {
    return _Cronet_Metrics_push_start_move(
      self,
      push_start,
    );
  }

  late final _Cronet_Metrics_push_start_move_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_push_start_move>>(
          'Cronet_Metrics_push_start_move');
  late final _dart_Cronet_Metrics_push_start_move
      _Cronet_Metrics_push_start_move = _Cronet_Metrics_push_start_move_ptr
          .asFunction<_dart_Cronet_Metrics_push_start_move>();

  void Cronet_Metrics_push_end_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> push_end,
  ) {
    return _Cronet_Metrics_push_end_set(
      self,
      push_end,
    );
  }

  late final _Cronet_Metrics_push_end_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_push_end_set>>(
          'Cronet_Metrics_push_end_set');
  late final _dart_Cronet_Metrics_push_end_set _Cronet_Metrics_push_end_set =
      _Cronet_Metrics_push_end_set_ptr.asFunction<
          _dart_Cronet_Metrics_push_end_set>();

  void Cronet_Metrics_push_end_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> push_end,
  ) {
    return _Cronet_Metrics_push_end_move(
      self,
      push_end,
    );
  }

  late final _Cronet_Metrics_push_end_move_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_push_end_move>>(
          'Cronet_Metrics_push_end_move');
  late final _dart_Cronet_Metrics_push_end_move _Cronet_Metrics_push_end_move =
      _Cronet_Metrics_push_end_move_ptr.asFunction<
          _dart_Cronet_Metrics_push_end_move>();

  void Cronet_Metrics_response_start_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> response_start,
  ) {
    return _Cronet_Metrics_response_start_set(
      self,
      response_start,
    );
  }

  late final _Cronet_Metrics_response_start_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_response_start_set>>(
          'Cronet_Metrics_response_start_set');
  late final _dart_Cronet_Metrics_response_start_set
      _Cronet_Metrics_response_start_set =
      _Cronet_Metrics_response_start_set_ptr.asFunction<
          _dart_Cronet_Metrics_response_start_set>();

  void Cronet_Metrics_response_start_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> response_start,
  ) {
    return _Cronet_Metrics_response_start_move(
      self,
      response_start,
    );
  }

  late final _Cronet_Metrics_response_start_move_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_response_start_move>>(
          'Cronet_Metrics_response_start_move');
  late final _dart_Cronet_Metrics_response_start_move
      _Cronet_Metrics_response_start_move =
      _Cronet_Metrics_response_start_move_ptr.asFunction<
          _dart_Cronet_Metrics_response_start_move>();

  void Cronet_Metrics_request_end_set(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> request_end,
  ) {
    return _Cronet_Metrics_request_end_set(
      self,
      request_end,
    );
  }

  late final _Cronet_Metrics_request_end_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_request_end_set>>(
          'Cronet_Metrics_request_end_set');
  late final _dart_Cronet_Metrics_request_end_set
      _Cronet_Metrics_request_end_set = _Cronet_Metrics_request_end_set_ptr
          .asFunction<_dart_Cronet_Metrics_request_end_set>();

  void Cronet_Metrics_request_end_move(
    ffi.Pointer<Cronet_Metrics> self,
    ffi.Pointer<Cronet_DateTime> request_end,
  ) {
    return _Cronet_Metrics_request_end_move(
      self,
      request_end,
    );
  }

  late final _Cronet_Metrics_request_end_move_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_request_end_move>>(
          'Cronet_Metrics_request_end_move');
  late final _dart_Cronet_Metrics_request_end_move
      _Cronet_Metrics_request_end_move = _Cronet_Metrics_request_end_move_ptr
          .asFunction<_dart_Cronet_Metrics_request_end_move>();

  void Cronet_Metrics_socket_reused_set(
    ffi.Pointer<Cronet_Metrics> self,
    bool socket_reused,
  ) {
    return _Cronet_Metrics_socket_reused_set(
      self,
      socket_reused ? 1 : 0,
    );
  }

  late final _Cronet_Metrics_socket_reused_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_socket_reused_set>>(
          'Cronet_Metrics_socket_reused_set');
  late final _dart_Cronet_Metrics_socket_reused_set
      _Cronet_Metrics_socket_reused_set = _Cronet_Metrics_socket_reused_set_ptr
          .asFunction<_dart_Cronet_Metrics_socket_reused_set>();

  void Cronet_Metrics_sent_byte_count_set(
    ffi.Pointer<Cronet_Metrics> self,
    int sent_byte_count,
  ) {
    return _Cronet_Metrics_sent_byte_count_set(
      self,
      sent_byte_count,
    );
  }

  late final _Cronet_Metrics_sent_byte_count_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_sent_byte_count_set>>(
          'Cronet_Metrics_sent_byte_count_set');
  late final _dart_Cronet_Metrics_sent_byte_count_set
      _Cronet_Metrics_sent_byte_count_set =
      _Cronet_Metrics_sent_byte_count_set_ptr.asFunction<
          _dart_Cronet_Metrics_sent_byte_count_set>();

  void Cronet_Metrics_received_byte_count_set(
    ffi.Pointer<Cronet_Metrics> self,
    int received_byte_count,
  ) {
    return _Cronet_Metrics_received_byte_count_set(
      self,
      received_byte_count,
    );
  }

  late final _Cronet_Metrics_received_byte_count_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_received_byte_count_set>>(
          'Cronet_Metrics_received_byte_count_set');
  late final _dart_Cronet_Metrics_received_byte_count_set
      _Cronet_Metrics_received_byte_count_set =
      _Cronet_Metrics_received_byte_count_set_ptr.asFunction<
          _dart_Cronet_Metrics_received_byte_count_set>();

  ffi.Pointer<Cronet_DateTime> Cronet_Metrics_request_start_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_request_start_get(
      self,
    );
  }

  late final _Cronet_Metrics_request_start_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_request_start_get>>(
          'Cronet_Metrics_request_start_get');
  late final _dart_Cronet_Metrics_request_start_get
      _Cronet_Metrics_request_start_get = _Cronet_Metrics_request_start_get_ptr
          .asFunction<_dart_Cronet_Metrics_request_start_get>();

  ffi.Pointer<Cronet_DateTime> Cronet_Metrics_dns_start_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_dns_start_get(
      self,
    );
  }

  late final _Cronet_Metrics_dns_start_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_dns_start_get>>(
          'Cronet_Metrics_dns_start_get');
  late final _dart_Cronet_Metrics_dns_start_get _Cronet_Metrics_dns_start_get =
      _Cronet_Metrics_dns_start_get_ptr.asFunction<
          _dart_Cronet_Metrics_dns_start_get>();

  ffi.Pointer<Cronet_DateTime> Cronet_Metrics_dns_end_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_dns_end_get(
      self,
    );
  }

  late final _Cronet_Metrics_dns_end_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_dns_end_get>>(
          'Cronet_Metrics_dns_end_get');
  late final _dart_Cronet_Metrics_dns_end_get _Cronet_Metrics_dns_end_get =
      _Cronet_Metrics_dns_end_get_ptr.asFunction<
          _dart_Cronet_Metrics_dns_end_get>();

  ffi.Pointer<Cronet_DateTime> Cronet_Metrics_connect_start_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_connect_start_get(
      self,
    );
  }

  late final _Cronet_Metrics_connect_start_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_connect_start_get>>(
          'Cronet_Metrics_connect_start_get');
  late final _dart_Cronet_Metrics_connect_start_get
      _Cronet_Metrics_connect_start_get = _Cronet_Metrics_connect_start_get_ptr
          .asFunction<_dart_Cronet_Metrics_connect_start_get>();

  ffi.Pointer<Cronet_DateTime> Cronet_Metrics_connect_end_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_connect_end_get(
      self,
    );
  }

  late final _Cronet_Metrics_connect_end_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_connect_end_get>>(
          'Cronet_Metrics_connect_end_get');
  late final _dart_Cronet_Metrics_connect_end_get
      _Cronet_Metrics_connect_end_get = _Cronet_Metrics_connect_end_get_ptr
          .asFunction<_dart_Cronet_Metrics_connect_end_get>();

  ffi.Pointer<Cronet_DateTime> Cronet_Metrics_ssl_start_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_ssl_start_get(
      self,
    );
  }

  late final _Cronet_Metrics_ssl_start_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_ssl_start_get>>(
          'Cronet_Metrics_ssl_start_get');
  late final _dart_Cronet_Metrics_ssl_start_get _Cronet_Metrics_ssl_start_get =
      _Cronet_Metrics_ssl_start_get_ptr.asFunction<
          _dart_Cronet_Metrics_ssl_start_get>();

  ffi.Pointer<Cronet_DateTime> Cronet_Metrics_ssl_end_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_ssl_end_get(
      self,
    );
  }

  late final _Cronet_Metrics_ssl_end_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_ssl_end_get>>(
          'Cronet_Metrics_ssl_end_get');
  late final _dart_Cronet_Metrics_ssl_end_get _Cronet_Metrics_ssl_end_get =
      _Cronet_Metrics_ssl_end_get_ptr.asFunction<
          _dart_Cronet_Metrics_ssl_end_get>();

  ffi.Pointer<Cronet_DateTime> Cronet_Metrics_sending_start_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_sending_start_get(
      self,
    );
  }

  late final _Cronet_Metrics_sending_start_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_sending_start_get>>(
          'Cronet_Metrics_sending_start_get');
  late final _dart_Cronet_Metrics_sending_start_get
      _Cronet_Metrics_sending_start_get = _Cronet_Metrics_sending_start_get_ptr
          .asFunction<_dart_Cronet_Metrics_sending_start_get>();

  ffi.Pointer<Cronet_DateTime> Cronet_Metrics_sending_end_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_sending_end_get(
      self,
    );
  }

  late final _Cronet_Metrics_sending_end_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_sending_end_get>>(
          'Cronet_Metrics_sending_end_get');
  late final _dart_Cronet_Metrics_sending_end_get
      _Cronet_Metrics_sending_end_get = _Cronet_Metrics_sending_end_get_ptr
          .asFunction<_dart_Cronet_Metrics_sending_end_get>();

  ffi.Pointer<Cronet_DateTime> Cronet_Metrics_push_start_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_push_start_get(
      self,
    );
  }

  late final _Cronet_Metrics_push_start_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_push_start_get>>(
          'Cronet_Metrics_push_start_get');
  late final _dart_Cronet_Metrics_push_start_get
      _Cronet_Metrics_push_start_get = _Cronet_Metrics_push_start_get_ptr
          .asFunction<_dart_Cronet_Metrics_push_start_get>();

  ffi.Pointer<Cronet_DateTime> Cronet_Metrics_push_end_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_push_end_get(
      self,
    );
  }

  late final _Cronet_Metrics_push_end_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_push_end_get>>(
          'Cronet_Metrics_push_end_get');
  late final _dart_Cronet_Metrics_push_end_get _Cronet_Metrics_push_end_get =
      _Cronet_Metrics_push_end_get_ptr.asFunction<
          _dart_Cronet_Metrics_push_end_get>();

  ffi.Pointer<Cronet_DateTime> Cronet_Metrics_response_start_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_response_start_get(
      self,
    );
  }

  late final _Cronet_Metrics_response_start_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_response_start_get>>(
          'Cronet_Metrics_response_start_get');
  late final _dart_Cronet_Metrics_response_start_get
      _Cronet_Metrics_response_start_get =
      _Cronet_Metrics_response_start_get_ptr.asFunction<
          _dart_Cronet_Metrics_response_start_get>();

  ffi.Pointer<Cronet_DateTime> Cronet_Metrics_request_end_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_request_end_get(
      self,
    );
  }

  late final _Cronet_Metrics_request_end_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_request_end_get>>(
          'Cronet_Metrics_request_end_get');
  late final _dart_Cronet_Metrics_request_end_get
      _Cronet_Metrics_request_end_get = _Cronet_Metrics_request_end_get_ptr
          .asFunction<_dart_Cronet_Metrics_request_end_get>();

  bool Cronet_Metrics_socket_reused_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_socket_reused_get(
          self,
        ) !=
        0;
  }

  late final _Cronet_Metrics_socket_reused_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_socket_reused_get>>(
          'Cronet_Metrics_socket_reused_get');
  late final _dart_Cronet_Metrics_socket_reused_get
      _Cronet_Metrics_socket_reused_get = _Cronet_Metrics_socket_reused_get_ptr
          .asFunction<_dart_Cronet_Metrics_socket_reused_get>();

  int Cronet_Metrics_sent_byte_count_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_sent_byte_count_get(
      self,
    );
  }

  late final _Cronet_Metrics_sent_byte_count_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_sent_byte_count_get>>(
          'Cronet_Metrics_sent_byte_count_get');
  late final _dart_Cronet_Metrics_sent_byte_count_get
      _Cronet_Metrics_sent_byte_count_get =
      _Cronet_Metrics_sent_byte_count_get_ptr.asFunction<
          _dart_Cronet_Metrics_sent_byte_count_get>();

  int Cronet_Metrics_received_byte_count_get(
    ffi.Pointer<Cronet_Metrics> self,
  ) {
    return _Cronet_Metrics_received_byte_count_get(
      self,
    );
  }

  late final _Cronet_Metrics_received_byte_count_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_Metrics_received_byte_count_get>>(
          'Cronet_Metrics_received_byte_count_get');
  late final _dart_Cronet_Metrics_received_byte_count_get
      _Cronet_Metrics_received_byte_count_get =
      _Cronet_Metrics_received_byte_count_get_ptr.asFunction<
          _dart_Cronet_Metrics_received_byte_count_get>();

  /// ////////////////////
  ffi.Pointer<Cronet_RequestFinishedInfo> Cronet_RequestFinishedInfo_Create() {
    return _Cronet_RequestFinishedInfo_Create();
  }

  late final _Cronet_RequestFinishedInfo_Create_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_RequestFinishedInfo_Create>>(
          'Cronet_RequestFinishedInfo_Create');
  late final _dart_Cronet_RequestFinishedInfo_Create
      _Cronet_RequestFinishedInfo_Create =
      _Cronet_RequestFinishedInfo_Create_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_Create>();

  void Cronet_RequestFinishedInfo_Destroy(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ) {
    return _Cronet_RequestFinishedInfo_Destroy(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfo_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_RequestFinishedInfo_Destroy>>(
          'Cronet_RequestFinishedInfo_Destroy');
  late final _dart_Cronet_RequestFinishedInfo_Destroy
      _Cronet_RequestFinishedInfo_Destroy =
      _Cronet_RequestFinishedInfo_Destroy_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_Destroy>();

  void Cronet_RequestFinishedInfo_metrics_set(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
    ffi.Pointer<Cronet_Metrics> metrics,
  ) {
    return _Cronet_RequestFinishedInfo_metrics_set(
      self,
      metrics,
    );
  }

  late final _Cronet_RequestFinishedInfo_metrics_set_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_RequestFinishedInfo_metrics_set>>(
          'Cronet_RequestFinishedInfo_metrics_set');
  late final _dart_Cronet_RequestFinishedInfo_metrics_set
      _Cronet_RequestFinishedInfo_metrics_set =
      _Cronet_RequestFinishedInfo_metrics_set_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_metrics_set>();

  void Cronet_RequestFinishedInfo_metrics_move(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
    ffi.Pointer<Cronet_Metrics> metrics,
  ) {
    return _Cronet_RequestFinishedInfo_metrics_move(
      self,
      metrics,
    );
  }

  late final _Cronet_RequestFinishedInfo_metrics_move_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_RequestFinishedInfo_metrics_move>>(
          'Cronet_RequestFinishedInfo_metrics_move');
  late final _dart_Cronet_RequestFinishedInfo_metrics_move
      _Cronet_RequestFinishedInfo_metrics_move =
      _Cronet_RequestFinishedInfo_metrics_move_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_metrics_move>();

  void Cronet_RequestFinishedInfo_annotations_add(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
    ffi.Pointer<ffi.Void> element,
  ) {
    return _Cronet_RequestFinishedInfo_annotations_add(
      self,
      element,
    );
  }

  late final _Cronet_RequestFinishedInfo_annotations_add_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_RequestFinishedInfo_annotations_add>>(
      'Cronet_RequestFinishedInfo_annotations_add');
  late final _dart_Cronet_RequestFinishedInfo_annotations_add
      _Cronet_RequestFinishedInfo_annotations_add =
      _Cronet_RequestFinishedInfo_annotations_add_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_annotations_add>();

  void Cronet_RequestFinishedInfo_finished_reason_set(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
    int finished_reason,
  ) {
    return _Cronet_RequestFinishedInfo_finished_reason_set(
      self,
      finished_reason,
    );
  }

  late final _Cronet_RequestFinishedInfo_finished_reason_set_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_RequestFinishedInfo_finished_reason_set>>(
      'Cronet_RequestFinishedInfo_finished_reason_set');
  late final _dart_Cronet_RequestFinishedInfo_finished_reason_set
      _Cronet_RequestFinishedInfo_finished_reason_set =
      _Cronet_RequestFinishedInfo_finished_reason_set_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_finished_reason_set>();

  ffi.Pointer<Cronet_Metrics> Cronet_RequestFinishedInfo_metrics_get(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ) {
    return _Cronet_RequestFinishedInfo_metrics_get(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfo_metrics_get_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_RequestFinishedInfo_metrics_get>>(
          'Cronet_RequestFinishedInfo_metrics_get');
  late final _dart_Cronet_RequestFinishedInfo_metrics_get
      _Cronet_RequestFinishedInfo_metrics_get =
      _Cronet_RequestFinishedInfo_metrics_get_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_metrics_get>();

  int Cronet_RequestFinishedInfo_annotations_size(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ) {
    return _Cronet_RequestFinishedInfo_annotations_size(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfo_annotations_size_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_RequestFinishedInfo_annotations_size>>(
      'Cronet_RequestFinishedInfo_annotations_size');
  late final _dart_Cronet_RequestFinishedInfo_annotations_size
      _Cronet_RequestFinishedInfo_annotations_size =
      _Cronet_RequestFinishedInfo_annotations_size_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_annotations_size>();

  ffi.Pointer<ffi.Void> Cronet_RequestFinishedInfo_annotations_at(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
    int index,
  ) {
    return _Cronet_RequestFinishedInfo_annotations_at(
      self,
      index,
    );
  }

  late final _Cronet_RequestFinishedInfo_annotations_at_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_RequestFinishedInfo_annotations_at>>(
          'Cronet_RequestFinishedInfo_annotations_at');
  late final _dart_Cronet_RequestFinishedInfo_annotations_at
      _Cronet_RequestFinishedInfo_annotations_at =
      _Cronet_RequestFinishedInfo_annotations_at_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_annotations_at>();

  void Cronet_RequestFinishedInfo_annotations_clear(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ) {
    return _Cronet_RequestFinishedInfo_annotations_clear(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfo_annotations_clear_ptr = _lookup<
          ffi.NativeFunction<_c_Cronet_RequestFinishedInfo_annotations_clear>>(
      'Cronet_RequestFinishedInfo_annotations_clear');
  late final _dart_Cronet_RequestFinishedInfo_annotations_clear
      _Cronet_RequestFinishedInfo_annotations_clear =
      _Cronet_RequestFinishedInfo_annotations_clear_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_annotations_clear>();

  int Cronet_RequestFinishedInfo_finished_reason_get(
    ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ) {
    return _Cronet_RequestFinishedInfo_finished_reason_get(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfo_finished_reason_get_ptr = _lookup<
          ffi.NativeFunction<
              _c_Cronet_RequestFinishedInfo_finished_reason_get>>(
      'Cronet_RequestFinishedInfo_finished_reason_get');
  late final _dart_Cronet_RequestFinishedInfo_finished_reason_get
      _Cronet_RequestFinishedInfo_finished_reason_get =
      _Cronet_RequestFinishedInfo_finished_reason_get_ptr.asFunction<
          _dart_Cronet_RequestFinishedInfo_finished_reason_get>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final Cronet _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Buffer_Create>>
      get Cronet_Buffer_Create => _library._Cronet_Buffer_Create_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Buffer_InitWithAlloc>>
      get Cronet_Buffer_InitWithAlloc =>
          _library._Cronet_Buffer_InitWithAlloc_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Runnable_Destroy>>
      get Cronet_Runnable_Destroy => _library._Cronet_Runnable_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Runnable_Run>>
      get Cronet_Runnable_Run => _library._Cronet_Runnable_Run_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Executor_Destroy>>
      get Cronet_Executor_Destroy => _library._Cronet_Executor_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Executor_SetClientContext>>
      get Cronet_Executor_SetClientContext =>
          _library._Cronet_Executor_SetClientContext_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Executor_GetClientContext>>
      get Cronet_Executor_GetClientContext =>
          _library._Cronet_Executor_GetClientContext_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Executor_CreateWith>>
      get Cronet_Executor_CreateWith =>
          _library._Cronet_Executor_CreateWith_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Engine_Destroy>>
      get Cronet_Engine_Destroy => _library._Cronet_Engine_Destroy_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Engine_Shutdown>>
      get Cronet_Engine_Shutdown => _library._Cronet_Engine_Shutdown_ptr;
  ffi.Pointer<
          ffi.NativeFunction<Native_Cronet_UploadDataProvider_GetClientContext>>
      get Cronet_UploadDataProvider_GetClientContext =>
          _library._Cronet_UploadDataProvider_GetClientContext_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_Cronet_Error_message_get>>
      get Cronet_Error_message_get => _library._Cronet_Error_message_get_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_http_status_code_get>>
      get Cronet_UrlResponseInfo_http_status_code_get =>
          _library._Cronet_UrlResponseInfo_http_status_code_get_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              Native_Cronet_UrlResponseInfo_http_status_text_get>>
      get Cronet_UrlResponseInfo_http_status_text_get =>
          _library._Cronet_UrlResponseInfo_http_status_text_get_ptr;
}

class Cronet_Buffer extends ffi.Opaque {}

class Cronet_BufferCallback extends ffi.Opaque {}

class Cronet_Runnable extends ffi.Opaque {}

class Cronet_Executor extends ffi.Opaque {}

class Cronet_Engine extends ffi.Opaque {}

class Cronet_UrlRequestStatusListener extends ffi.Opaque {}

class Cronet_UrlRequestCallback extends ffi.Opaque {}

class Cronet_UploadDataSink extends ffi.Opaque {}

class Cronet_UploadDataProvider extends ffi.Opaque {}

class Cronet_UrlRequest extends ffi.Opaque {}

class Cronet_RequestFinishedInfoListener extends ffi.Opaque {}

class Cronet_Error extends ffi.Opaque {}

class Cronet_QuicHint extends ffi.Opaque {}

class Cronet_PublicKeyPins extends ffi.Opaque {}

class Cronet_EngineParams extends ffi.Opaque {}

class Cronet_HttpHeader extends ffi.Opaque {}

class Cronet_UrlResponseInfo extends ffi.Opaque {}

class Cronet_UrlRequestParams extends ffi.Opaque {}

class Cronet_DateTime extends ffi.Opaque {}

class Cronet_Metrics extends ffi.Opaque {}

class Cronet_RequestFinishedInfo extends ffi.Opaque {}

abstract class Cronet_RESULT {
  static const int Cronet_RESULT_SUCCESS = 0;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT = -100;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_STORAGE_PATH_MUST_EXIST =
      -101;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_PIN = -102;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HOSTNAME = -103;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_METHOD = -104;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_HEADER = -105;
  static const int Cronet_RESULT_ILLEGAL_STATE = -200;
  static const int Cronet_RESULT_ILLEGAL_STATE_STORAGE_PATH_IN_USE = -201;
  static const int
      Cronet_RESULT_ILLEGAL_STATE_CANNOT_SHUTDOWN_ENGINE_FROM_NETWORK_THREAD =
      -202;
  static const int Cronet_RESULT_ILLEGAL_STATE_ENGINE_ALREADY_STARTED = -203;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_STARTED = -204;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_NOT_INITIALIZED = -205;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_INITIALIZED =
      -206;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_NOT_STARTED = -207;
  static const int Cronet_RESULT_ILLEGAL_STATE_UNEXPECTED_REDIRECT = -208;
  static const int Cronet_RESULT_ILLEGAL_STATE_UNEXPECTED_READ = -209;
  static const int Cronet_RESULT_ILLEGAL_STATE_READ_FAILED = -210;
  static const int Cronet_RESULT_NULL_POINTER = -300;
  static const int Cronet_RESULT_NULL_POINTER_HOSTNAME = -301;
  static const int Cronet_RESULT_NULL_POINTER_SHA256_PINS = -302;
  static const int Cronet_RESULT_NULL_POINTER_EXPIRATION_DATE = -303;
  static const int Cronet_RESULT_NULL_POINTER_ENGINE = -304;
  static const int Cronet_RESULT_NULL_POINTER_URL = -305;
  static const int Cronet_RESULT_NULL_POINTER_CALLBACK = -306;
  static const int Cronet_RESULT_NULL_POINTER_EXECUTOR = -307;
  static const int Cronet_RESULT_NULL_POINTER_METHOD = -308;
  static const int Cronet_RESULT_NULL_POINTER_HEADER_NAME = -309;
  static const int Cronet_RESULT_NULL_POINTER_HEADER_VALUE = -310;
  static const int Cronet_RESULT_NULL_POINTER_PARAMS = -311;
  static const int
      Cronet_RESULT_NULL_POINTER_REQUEST_FINISHED_INFO_LISTENER_EXECUTOR = -312;
}

abstract class Cronet_Error_ERROR_CODE {
  static const int Cronet_Error_ERROR_CODE_ERROR_CALLBACK = 0;
  static const int Cronet_Error_ERROR_CODE_ERROR_HOSTNAME_NOT_RESOLVED = 1;
  static const int Cronet_Error_ERROR_CODE_ERROR_INTERNET_DISCONNECTED = 2;
  static const int Cronet_Error_ERROR_CODE_ERROR_NETWORK_CHANGED = 3;
  static const int Cronet_Error_ERROR_CODE_ERROR_TIMED_OUT = 4;
  static const int Cronet_Error_ERROR_CODE_ERROR_CONNECTION_CLOSED = 5;
  static const int Cronet_Error_ERROR_CODE_ERROR_CONNECTION_TIMED_OUT = 6;
  static const int Cronet_Error_ERROR_CODE_ERROR_CONNECTION_REFUSED = 7;
  static const int Cronet_Error_ERROR_CODE_ERROR_CONNECTION_RESET = 8;
  static const int Cronet_Error_ERROR_CODE_ERROR_ADDRESS_UNREACHABLE = 9;
  static const int Cronet_Error_ERROR_CODE_ERROR_QUIC_PROTOCOL_FAILED = 10;
  static const int Cronet_Error_ERROR_CODE_ERROR_OTHER = 11;
}

abstract class Cronet_EngineParams_HTTP_CACHE_MODE {
  static const int Cronet_EngineParams_HTTP_CACHE_MODE_DISABLED = 0;
  static const int Cronet_EngineParams_HTTP_CACHE_MODE_IN_MEMORY = 1;
  static const int Cronet_EngineParams_HTTP_CACHE_MODE_DISK_NO_HTTP = 2;
  static const int Cronet_EngineParams_HTTP_CACHE_MODE_DISK = 3;
}

abstract class Cronet_UrlRequestParams_REQUEST_PRIORITY {
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_IDLE = 0;
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_LOWEST = 1;
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_LOW = 2;
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_MEDIUM = 3;
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_HIGHEST = 4;
}

abstract class Cronet_UrlRequestParams_IDEMPOTENCY {
  static const int Cronet_UrlRequestParams_IDEMPOTENCY_DEFAULT_IDEMPOTENCY = 0;
  static const int Cronet_UrlRequestParams_IDEMPOTENCY_IDEMPOTENT = 1;
  static const int Cronet_UrlRequestParams_IDEMPOTENCY_NOT_IDEMPOTENT = 2;
}

abstract class Cronet_RequestFinishedInfo_FINISHED_REASON {
  static const int Cronet_RequestFinishedInfo_FINISHED_REASON_SUCCEEDED = 0;
  static const int Cronet_RequestFinishedInfo_FINISHED_REASON_FAILED = 1;
  static const int Cronet_RequestFinishedInfo_FINISHED_REASON_CANCELED = 2;
}

abstract class Cronet_UrlRequestStatusListener_Status {
  static const int Cronet_UrlRequestStatusListener_Status_INVALID = -1;
  static const int Cronet_UrlRequestStatusListener_Status_IDLE = 0;
  static const int
      Cronet_UrlRequestStatusListener_Status_WAITING_FOR_STALLED_SOCKET_POOL =
      1;
  static const int
      Cronet_UrlRequestStatusListener_Status_WAITING_FOR_AVAILABLE_SOCKET = 2;
  static const int Cronet_UrlRequestStatusListener_Status_WAITING_FOR_DELEGATE =
      3;
  static const int Cronet_UrlRequestStatusListener_Status_WAITING_FOR_CACHE = 4;
  static const int Cronet_UrlRequestStatusListener_Status_DOWNLOADING_PAC_FILE =
      5;
  static const int
      Cronet_UrlRequestStatusListener_Status_RESOLVING_PROXY_FOR_URL = 6;
  static const int
      Cronet_UrlRequestStatusListener_Status_RESOLVING_HOST_IN_PAC_FILE = 7;
  static const int
      Cronet_UrlRequestStatusListener_Status_ESTABLISHING_PROXY_TUNNEL = 8;
  static const int Cronet_UrlRequestStatusListener_Status_RESOLVING_HOST = 9;
  static const int Cronet_UrlRequestStatusListener_Status_CONNECTING = 10;
  static const int Cronet_UrlRequestStatusListener_Status_SSL_HANDSHAKE = 11;
  static const int Cronet_UrlRequestStatusListener_Status_SENDING_REQUEST = 12;
  static const int Cronet_UrlRequestStatusListener_Status_WAITING_FOR_RESPONSE =
      13;
  static const int Cronet_UrlRequestStatusListener_Status_READING_RESPONSE = 14;
}

typedef Native_Cronet_Buffer_Create = ffi.Pointer<Cronet_Buffer> Function();

typedef _dart_Cronet_Buffer_Create = ffi.Pointer<Cronet_Buffer> Function();

typedef _c_Cronet_Buffer_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_Buffer> self,
);

typedef _dart_Cronet_Buffer_Destroy = void Function(
  ffi.Pointer<Cronet_Buffer> self,
);

typedef _c_Cronet_Buffer_SetClientContext = ffi.Void Function(
  ffi.Pointer<Cronet_Buffer> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_Buffer_SetClientContext = void Function(
  ffi.Pointer<Cronet_Buffer> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _c_Cronet_Buffer_GetClientContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_Buffer> self,
);

typedef _dart_Cronet_Buffer_GetClientContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_Buffer> self,
);

typedef _c_Cronet_Buffer_InitWithDataAndCallback = ffi.Void Function(
  ffi.Pointer<Cronet_Buffer> self,
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 size,
  ffi.Pointer<Cronet_BufferCallback> callback,
);

typedef _dart_Cronet_Buffer_InitWithDataAndCallback = void Function(
  ffi.Pointer<Cronet_Buffer> self,
  ffi.Pointer<ffi.Void> data,
  int size,
  ffi.Pointer<Cronet_BufferCallback> callback,
);

typedef Native_Cronet_Buffer_InitWithAlloc = ffi.Void Function(
  ffi.Pointer<Cronet_Buffer> self,
  ffi.Uint64 size,
);

typedef _dart_Cronet_Buffer_InitWithAlloc = void Function(
  ffi.Pointer<Cronet_Buffer> self,
  int size,
);

typedef _c_Cronet_Buffer_GetSize = ffi.Uint64 Function(
  ffi.Pointer<Cronet_Buffer> self,
);

typedef _dart_Cronet_Buffer_GetSize = int Function(
  ffi.Pointer<Cronet_Buffer> self,
);

typedef _c_Cronet_Buffer_GetData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_Buffer> self,
);

typedef _dart_Cronet_Buffer_GetData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_Buffer> self,
);

typedef Cronet_Buffer_InitWithDataAndCallbackFunc = ffi.Void Function(
  ffi.Pointer<Cronet_Buffer>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<Cronet_BufferCallback>,
);

typedef Cronet_Buffer_InitWithAllocFunc = ffi.Void Function(
  ffi.Pointer<Cronet_Buffer>,
  ffi.Uint64,
);

typedef Cronet_Buffer_GetSizeFunc = ffi.Uint64 Function(
  ffi.Pointer<Cronet_Buffer>,
);

typedef Cronet_Buffer_GetDataFunc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_Buffer>,
);

typedef _c_Cronet_Buffer_CreateWith = ffi.Pointer<Cronet_Buffer> Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_Buffer_InitWithDataAndCallbackFunc>>
      InitWithDataAndCallbackFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Buffer_InitWithAllocFunc>>
      InitWithAllocFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Buffer_GetSizeFunc>> GetSizeFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Buffer_GetDataFunc>> GetDataFunc,
);

typedef _dart_Cronet_Buffer_CreateWith = ffi.Pointer<Cronet_Buffer> Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_Buffer_InitWithDataAndCallbackFunc>>
      InitWithDataAndCallbackFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Buffer_InitWithAllocFunc>>
      InitWithAllocFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Buffer_GetSizeFunc>> GetSizeFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Buffer_GetDataFunc>> GetDataFunc,
);

typedef _c_Cronet_BufferCallback_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_BufferCallback> self,
);

typedef _dart_Cronet_BufferCallback_Destroy = void Function(
  ffi.Pointer<Cronet_BufferCallback> self,
);

typedef _c_Cronet_BufferCallback_SetClientContext = ffi.Void Function(
  ffi.Pointer<Cronet_BufferCallback> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_BufferCallback_SetClientContext = void Function(
  ffi.Pointer<Cronet_BufferCallback> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _c_Cronet_BufferCallback_GetClientContext = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Cronet_BufferCallback> self,
);

typedef _dart_Cronet_BufferCallback_GetClientContext = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Cronet_BufferCallback> self,
);

typedef _c_Cronet_BufferCallback_OnDestroy = ffi.Void Function(
  ffi.Pointer<Cronet_BufferCallback> self,
  ffi.Pointer<Cronet_Buffer> buffer,
);

typedef _dart_Cronet_BufferCallback_OnDestroy = void Function(
  ffi.Pointer<Cronet_BufferCallback> self,
  ffi.Pointer<Cronet_Buffer> buffer,
);

typedef Cronet_BufferCallback_OnDestroyFunc = ffi.Void Function(
  ffi.Pointer<Cronet_BufferCallback>,
  ffi.Pointer<Cronet_Buffer>,
);

typedef _c_Cronet_BufferCallback_CreateWith = ffi.Pointer<Cronet_BufferCallback>
    Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_BufferCallback_OnDestroyFunc>>
      OnDestroyFunc,
);

typedef _dart_Cronet_BufferCallback_CreateWith
    = ffi.Pointer<Cronet_BufferCallback> Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_BufferCallback_OnDestroyFunc>>
      OnDestroyFunc,
);

typedef Native_Cronet_Runnable_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_Runnable> self,
);

typedef _dart_Cronet_Runnable_Destroy = void Function(
  ffi.Pointer<Cronet_Runnable> self,
);

typedef _c_Cronet_Runnable_SetClientContext = ffi.Void Function(
  ffi.Pointer<Cronet_Runnable> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_Runnable_SetClientContext = void Function(
  ffi.Pointer<Cronet_Runnable> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _c_Cronet_Runnable_GetClientContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_Runnable> self,
);

typedef _dart_Cronet_Runnable_GetClientContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_Runnable> self,
);

typedef Native_Cronet_Runnable_Run = ffi.Void Function(
  ffi.Pointer<Cronet_Runnable> self,
);

typedef _dart_Cronet_Runnable_Run = void Function(
  ffi.Pointer<Cronet_Runnable> self,
);

typedef Cronet_Runnable_RunFunc = ffi.Void Function(
  ffi.Pointer<Cronet_Runnable>,
);

typedef _c_Cronet_Runnable_CreateWith = ffi.Pointer<Cronet_Runnable> Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_Runnable_RunFunc>> RunFunc,
);

typedef _dart_Cronet_Runnable_CreateWith = ffi.Pointer<Cronet_Runnable>
    Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_Runnable_RunFunc>> RunFunc,
);

typedef Native_Cronet_Executor_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_Executor> self,
);

typedef _dart_Cronet_Executor_Destroy = void Function(
  ffi.Pointer<Cronet_Executor> self,
);

typedef Native_Cronet_Executor_SetClientContext = ffi.Void Function(
  ffi.Pointer<Cronet_Executor> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_Executor_SetClientContext = void Function(
  ffi.Pointer<Cronet_Executor> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef Native_Cronet_Executor_GetClientContext = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Cronet_Executor> self,
);

typedef _dart_Cronet_Executor_GetClientContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_Executor> self,
);

typedef _c_Cronet_Executor_Execute = ffi.Void Function(
  ffi.Pointer<Cronet_Executor> self,
  ffi.Pointer<Cronet_Runnable> command,
);

typedef _dart_Cronet_Executor_Execute = void Function(
  ffi.Pointer<Cronet_Executor> self,
  ffi.Pointer<Cronet_Runnable> command,
);

typedef Cronet_Executor_ExecuteFunc = ffi.Void Function(
  ffi.Pointer<Cronet_Executor>,
  ffi.Pointer<Cronet_Runnable>,
);

typedef Native_Cronet_Executor_CreateWith = ffi.Pointer<Cronet_Executor>
    Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_Executor_ExecuteFunc>> ExecuteFunc,
);

typedef _dart_Cronet_Executor_CreateWith = ffi.Pointer<Cronet_Executor>
    Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_Executor_ExecuteFunc>> ExecuteFunc,
);

typedef _c_Cronet_Engine_Create = ffi.Pointer<Cronet_Engine> Function();

typedef _dart_Cronet_Engine_Create = ffi.Pointer<Cronet_Engine> Function();

typedef Native_Cronet_Engine_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef _dart_Cronet_Engine_Destroy = void Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef _c_Cronet_Engine_SetClientContext = ffi.Void Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_Engine_SetClientContext = void Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _c_Cronet_Engine_GetClientContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef _dart_Cronet_Engine_GetClientContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef _c_Cronet_Engine_StartWithParams = ffi.Int32 Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<Cronet_EngineParams> params,
);

typedef _dart_Cronet_Engine_StartWithParams = int Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<Cronet_EngineParams> params,
);

typedef _c_Cronet_Engine_StartNetLogToFile = ffi.Uint8 Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<ffi.Int8> file_name,
  ffi.Uint8 log_all,
);

typedef _dart_Cronet_Engine_StartNetLogToFile = int Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<ffi.Int8> file_name,
  int log_all,
);

typedef _c_Cronet_Engine_StopNetLog = ffi.Void Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef _dart_Cronet_Engine_StopNetLog = void Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef Native_Cronet_Engine_Shutdown = ffi.Int32 Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef _dart_Cronet_Engine_Shutdown = int Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef _c_Cronet_Engine_GetVersionString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef _dart_Cronet_Engine_GetVersionString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef _c_Cronet_Engine_GetDefaultUserAgent = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef _dart_Cronet_Engine_GetDefaultUserAgent = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<Cronet_Engine> self,
);

typedef _c_Cronet_Engine_AddRequestFinishedListener = ffi.Void Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<Cronet_RequestFinishedInfoListener> listener,
  ffi.Pointer<Cronet_Executor> executor,
);

typedef _dart_Cronet_Engine_AddRequestFinishedListener = void Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<Cronet_RequestFinishedInfoListener> listener,
  ffi.Pointer<Cronet_Executor> executor,
);

typedef _c_Cronet_Engine_RemoveRequestFinishedListener = ffi.Void Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<Cronet_RequestFinishedInfoListener> listener,
);

typedef _dart_Cronet_Engine_RemoveRequestFinishedListener = void Function(
  ffi.Pointer<Cronet_Engine> self,
  ffi.Pointer<Cronet_RequestFinishedInfoListener> listener,
);

typedef Cronet_Engine_StartWithParamsFunc = ffi.Int32 Function(
  ffi.Pointer<Cronet_Engine>,
  ffi.Pointer<Cronet_EngineParams>,
);

typedef Cronet_Engine_StartNetLogToFileFunc = ffi.Uint8 Function(
  ffi.Pointer<Cronet_Engine>,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint8,
);

typedef Cronet_Engine_StopNetLogFunc = ffi.Void Function(
  ffi.Pointer<Cronet_Engine>,
);

typedef Cronet_Engine_ShutdownFunc = ffi.Int32 Function(
  ffi.Pointer<Cronet_Engine>,
);

typedef Cronet_Engine_GetVersionStringFunc = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_Engine>,
);

typedef Cronet_Engine_GetDefaultUserAgentFunc = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_Engine>,
);

typedef Cronet_Engine_AddRequestFinishedListenerFunc = ffi.Void Function(
  ffi.Pointer<Cronet_Engine>,
  ffi.Pointer<Cronet_RequestFinishedInfoListener>,
  ffi.Pointer<Cronet_Executor>,
);

typedef Cronet_Engine_RemoveRequestFinishedListenerFunc = ffi.Void Function(
  ffi.Pointer<Cronet_Engine>,
  ffi.Pointer<Cronet_RequestFinishedInfoListener>,
);

typedef _c_Cronet_Engine_CreateWith = ffi.Pointer<Cronet_Engine> Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_Engine_StartWithParamsFunc>>
      StartWithParamsFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Engine_StartNetLogToFileFunc>>
      StartNetLogToFileFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Engine_StopNetLogFunc>> StopNetLogFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Engine_ShutdownFunc>> ShutdownFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Engine_GetVersionStringFunc>>
      GetVersionStringFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Engine_GetDefaultUserAgentFunc>>
      GetDefaultUserAgentFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Engine_AddRequestFinishedListenerFunc>>
      AddRequestFinishedListenerFunc,
  ffi.Pointer<
          ffi.NativeFunction<Cronet_Engine_RemoveRequestFinishedListenerFunc>>
      RemoveRequestFinishedListenerFunc,
);

typedef _dart_Cronet_Engine_CreateWith = ffi.Pointer<Cronet_Engine> Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_Engine_StartWithParamsFunc>>
      StartWithParamsFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Engine_StartNetLogToFileFunc>>
      StartNetLogToFileFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Engine_StopNetLogFunc>> StopNetLogFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Engine_ShutdownFunc>> ShutdownFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Engine_GetVersionStringFunc>>
      GetVersionStringFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Engine_GetDefaultUserAgentFunc>>
      GetDefaultUserAgentFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_Engine_AddRequestFinishedListenerFunc>>
      AddRequestFinishedListenerFunc,
  ffi.Pointer<
          ffi.NativeFunction<Cronet_Engine_RemoveRequestFinishedListenerFunc>>
      RemoveRequestFinishedListenerFunc,
);

typedef _c_Cronet_UrlRequestStatusListener_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener> self,
);

typedef _dart_Cronet_UrlRequestStatusListener_Destroy = void Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener> self,
);

typedef _c_Cronet_UrlRequestStatusListener_SetClientContext = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_UrlRequestStatusListener_SetClientContext = void Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _c_Cronet_UrlRequestStatusListener_GetClientContext
    = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener> self,
);

typedef _dart_Cronet_UrlRequestStatusListener_GetClientContext
    = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener> self,
);

typedef _c_Cronet_UrlRequestStatusListener_OnStatus = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener> self,
  ffi.Int32 status,
);

typedef _dart_Cronet_UrlRequestStatusListener_OnStatus = void Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener> self,
  int status,
);

typedef Cronet_UrlRequestStatusListener_OnStatusFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestStatusListener>,
  ffi.Int32,
);

typedef _c_Cronet_UrlRequestStatusListener_CreateWith
    = ffi.Pointer<Cronet_UrlRequestStatusListener> Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestStatusListener_OnStatusFunc>>
      OnStatusFunc,
);

typedef _dart_Cronet_UrlRequestStatusListener_CreateWith
    = ffi.Pointer<Cronet_UrlRequestStatusListener> Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestStatusListener_OnStatusFunc>>
      OnStatusFunc,
);

typedef _c_Cronet_UrlRequestCallback_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
);

typedef _dart_Cronet_UrlRequestCallback_Destroy = void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
);

typedef _c_Cronet_UrlRequestCallback_SetClientContext = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_UrlRequestCallback_SetClientContext = void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _c_Cronet_UrlRequestCallback_GetClientContext = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
);

typedef _dart_Cronet_UrlRequestCallback_GetClientContext = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
);

typedef _c_Cronet_UrlRequestCallback_OnRedirectReceived = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
  ffi.Pointer<ffi.Int8> new_location_url,
);

typedef _dart_Cronet_UrlRequestCallback_OnRedirectReceived = void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
  ffi.Pointer<ffi.Int8> new_location_url,
);

typedef _c_Cronet_UrlRequestCallback_OnResponseStarted = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
);

typedef _dart_Cronet_UrlRequestCallback_OnResponseStarted = void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
);

typedef _c_Cronet_UrlRequestCallback_OnReadCompleted = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
  ffi.Pointer<Cronet_Buffer> buffer,
  ffi.Uint64 bytes_read,
);

typedef _dart_Cronet_UrlRequestCallback_OnReadCompleted = void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
  ffi.Pointer<Cronet_Buffer> buffer,
  int bytes_read,
);

typedef _c_Cronet_UrlRequestCallback_OnSucceeded = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
);

typedef _dart_Cronet_UrlRequestCallback_OnSucceeded = void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
);

typedef _c_Cronet_UrlRequestCallback_OnFailed = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
  ffi.Pointer<Cronet_Error> error,
);

typedef _dart_Cronet_UrlRequestCallback_OnFailed = void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
  ffi.Pointer<Cronet_Error> error,
);

typedef _c_Cronet_UrlRequestCallback_OnCanceled = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
);

typedef _dart_Cronet_UrlRequestCallback_OnCanceled = void Function(
  ffi.Pointer<Cronet_UrlRequestCallback> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfo> info,
);

typedef Cronet_UrlRequestCallback_OnRedirectReceivedFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallback>,
  ffi.Pointer<Cronet_UrlRequest>,
  ffi.Pointer<Cronet_UrlResponseInfo>,
  ffi.Pointer<ffi.Int8>,
);

typedef Cronet_UrlRequestCallback_OnResponseStartedFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallback>,
  ffi.Pointer<Cronet_UrlRequest>,
  ffi.Pointer<Cronet_UrlResponseInfo>,
);

typedef Cronet_UrlRequestCallback_OnReadCompletedFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallback>,
  ffi.Pointer<Cronet_UrlRequest>,
  ffi.Pointer<Cronet_UrlResponseInfo>,
  ffi.Pointer<Cronet_Buffer>,
  ffi.Uint64,
);

typedef Cronet_UrlRequestCallback_OnSucceededFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallback>,
  ffi.Pointer<Cronet_UrlRequest>,
  ffi.Pointer<Cronet_UrlResponseInfo>,
);

typedef Cronet_UrlRequestCallback_OnFailedFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallback>,
  ffi.Pointer<Cronet_UrlRequest>,
  ffi.Pointer<Cronet_UrlResponseInfo>,
  ffi.Pointer<Cronet_Error>,
);

typedef Cronet_UrlRequestCallback_OnCanceledFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallback>,
  ffi.Pointer<Cronet_UrlRequest>,
  ffi.Pointer<Cronet_UrlResponseInfo>,
);

typedef _c_Cronet_UrlRequestCallback_CreateWith
    = ffi.Pointer<Cronet_UrlRequestCallback> Function(
  ffi.Pointer<
          ffi.NativeFunction<Cronet_UrlRequestCallback_OnRedirectReceivedFunc>>
      OnRedirectReceivedFunc,
  ffi.Pointer<
          ffi.NativeFunction<Cronet_UrlRequestCallback_OnResponseStartedFunc>>
      OnResponseStartedFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestCallback_OnReadCompletedFunc>>
      OnReadCompletedFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestCallback_OnSucceededFunc>>
      OnSucceededFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestCallback_OnFailedFunc>>
      OnFailedFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestCallback_OnCanceledFunc>>
      OnCanceledFunc,
);

typedef _dart_Cronet_UrlRequestCallback_CreateWith
    = ffi.Pointer<Cronet_UrlRequestCallback> Function(
  ffi.Pointer<
          ffi.NativeFunction<Cronet_UrlRequestCallback_OnRedirectReceivedFunc>>
      OnRedirectReceivedFunc,
  ffi.Pointer<
          ffi.NativeFunction<Cronet_UrlRequestCallback_OnResponseStartedFunc>>
      OnResponseStartedFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestCallback_OnReadCompletedFunc>>
      OnReadCompletedFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestCallback_OnSucceededFunc>>
      OnSucceededFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestCallback_OnFailedFunc>>
      OnFailedFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestCallback_OnCanceledFunc>>
      OnCanceledFunc,
);

typedef _c_Cronet_UploadDataSink_Create = ffi.Pointer<Cronet_UploadDataSink>
    Function();

typedef _dart_Cronet_UploadDataSink_Create = ffi.Pointer<Cronet_UploadDataSink>
    Function();

typedef _c_Cronet_UploadDataSink_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
);

typedef _dart_Cronet_UploadDataSink_Destroy = void Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
);

typedef _c_Cronet_UploadDataSink_SetClientContext = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_UploadDataSink_SetClientContext = void Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _c_Cronet_UploadDataSink_GetClientContext = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
);

typedef _dart_Cronet_UploadDataSink_GetClientContext = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
);

typedef _c_Cronet_UploadDataSink_OnReadSucceeded = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  ffi.Uint64 bytes_read,
  ffi.Uint8 final_chunk,
);

typedef _dart_Cronet_UploadDataSink_OnReadSucceeded = void Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  int bytes_read,
  int final_chunk,
);

typedef _c_Cronet_UploadDataSink_OnReadError = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  ffi.Pointer<ffi.Int8> error_message,
);

typedef _dart_Cronet_UploadDataSink_OnReadError = void Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  ffi.Pointer<ffi.Int8> error_message,
);

typedef _c_Cronet_UploadDataSink_OnRewindSucceeded = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
);

typedef _dart_Cronet_UploadDataSink_OnRewindSucceeded = void Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
);

typedef _c_Cronet_UploadDataSink_OnRewindError = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  ffi.Pointer<ffi.Int8> error_message,
);

typedef _dart_Cronet_UploadDataSink_OnRewindError = void Function(
  ffi.Pointer<Cronet_UploadDataSink> self,
  ffi.Pointer<ffi.Int8> error_message,
);

typedef Cronet_UploadDataSink_OnReadSucceededFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataSink>,
  ffi.Uint64,
  ffi.Uint8,
);

typedef Cronet_UploadDataSink_OnReadErrorFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataSink>,
  ffi.Pointer<ffi.Int8>,
);

typedef Cronet_UploadDataSink_OnRewindSucceededFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataSink>,
);

typedef Cronet_UploadDataSink_OnRewindErrorFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataSink>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_Cronet_UploadDataSink_CreateWith = ffi.Pointer<Cronet_UploadDataSink>
    Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataSink_OnReadSucceededFunc>>
      OnReadSucceededFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataSink_OnReadErrorFunc>>
      OnReadErrorFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataSink_OnRewindSucceededFunc>>
      OnRewindSucceededFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataSink_OnRewindErrorFunc>>
      OnRewindErrorFunc,
);

typedef _dart_Cronet_UploadDataSink_CreateWith
    = ffi.Pointer<Cronet_UploadDataSink> Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataSink_OnReadSucceededFunc>>
      OnReadSucceededFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataSink_OnReadErrorFunc>>
      OnReadErrorFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataSink_OnRewindSucceededFunc>>
      OnRewindSucceededFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataSink_OnRewindErrorFunc>>
      OnRewindErrorFunc,
);

typedef _c_Cronet_UploadDataProvider_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
);

typedef _dart_Cronet_UploadDataProvider_Destroy = void Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
);

typedef _c_Cronet_UploadDataProvider_SetClientContext = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_UploadDataProvider_SetClientContext = void Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef Native_Cronet_UploadDataProvider_GetClientContext
    = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
);

typedef _dart_Cronet_UploadDataProvider_GetClientContext = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
);

typedef _c_Cronet_UploadDataProvider_GetLength = ffi.Int64 Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
);

typedef _dart_Cronet_UploadDataProvider_GetLength = int Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
);

typedef _c_Cronet_UploadDataProvider_Read = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
  ffi.Pointer<Cronet_UploadDataSink> upload_data_sink,
  ffi.Pointer<Cronet_Buffer> buffer,
);

typedef _dart_Cronet_UploadDataProvider_Read = void Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
  ffi.Pointer<Cronet_UploadDataSink> upload_data_sink,
  ffi.Pointer<Cronet_Buffer> buffer,
);

typedef _c_Cronet_UploadDataProvider_Rewind = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
  ffi.Pointer<Cronet_UploadDataSink> upload_data_sink,
);

typedef _dart_Cronet_UploadDataProvider_Rewind = void Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
  ffi.Pointer<Cronet_UploadDataSink> upload_data_sink,
);

typedef _c_Cronet_UploadDataProvider_Close = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
);

typedef _dart_Cronet_UploadDataProvider_Close = void Function(
  ffi.Pointer<Cronet_UploadDataProvider> self,
);

typedef Cronet_UploadDataProvider_GetLengthFunc = ffi.Int64 Function(
  ffi.Pointer<Cronet_UploadDataProvider>,
);

typedef Cronet_UploadDataProvider_ReadFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataProvider>,
  ffi.Pointer<Cronet_UploadDataSink>,
  ffi.Pointer<Cronet_Buffer>,
);

typedef Cronet_UploadDataProvider_RewindFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataProvider>,
  ffi.Pointer<Cronet_UploadDataSink>,
);

typedef Cronet_UploadDataProvider_CloseFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataProvider>,
);

typedef _c_Cronet_UploadDataProvider_CreateWith
    = ffi.Pointer<Cronet_UploadDataProvider> Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataProvider_GetLengthFunc>>
      GetLengthFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataProvider_ReadFunc>> ReadFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataProvider_RewindFunc>>
      RewindFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataProvider_CloseFunc>>
      CloseFunc,
);

typedef _dart_Cronet_UploadDataProvider_CreateWith
    = ffi.Pointer<Cronet_UploadDataProvider> Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataProvider_GetLengthFunc>>
      GetLengthFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataProvider_ReadFunc>> ReadFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataProvider_RewindFunc>>
      RewindFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UploadDataProvider_CloseFunc>>
      CloseFunc,
);

typedef _c_Cronet_UrlRequest_Create = ffi.Pointer<Cronet_UrlRequest> Function();

typedef _dart_Cronet_UrlRequest_Create = ffi.Pointer<Cronet_UrlRequest>
    Function();

typedef _c_Cronet_UrlRequest_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef _dart_Cronet_UrlRequest_Destroy = void Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef _c_Cronet_UrlRequest_SetClientContext = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequest> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_UrlRequest_SetClientContext = void Function(
  ffi.Pointer<Cronet_UrlRequest> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _c_Cronet_UrlRequest_GetClientContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef _dart_Cronet_UrlRequest_GetClientContext = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef _c_Cronet_UrlRequest_InitWithParams = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequest> self,
  ffi.Pointer<Cronet_Engine> engine,
  ffi.Pointer<ffi.Int8> url,
  ffi.Pointer<Cronet_UrlRequestParams> params,
  ffi.Pointer<Cronet_UrlRequestCallback> callback,
  ffi.Pointer<Cronet_Executor> executor,
);

typedef _dart_Cronet_UrlRequest_InitWithParams = int Function(
  ffi.Pointer<Cronet_UrlRequest> self,
  ffi.Pointer<Cronet_Engine> engine,
  ffi.Pointer<ffi.Int8> url,
  ffi.Pointer<Cronet_UrlRequestParams> params,
  ffi.Pointer<Cronet_UrlRequestCallback> callback,
  ffi.Pointer<Cronet_Executor> executor,
);

typedef _c_Cronet_UrlRequest_Start = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef _dart_Cronet_UrlRequest_Start = int Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef _c_Cronet_UrlRequest_FollowRedirect = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef _dart_Cronet_UrlRequest_FollowRedirect = int Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef _c_Cronet_UrlRequest_Read = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequest> self,
  ffi.Pointer<Cronet_Buffer> buffer,
);

typedef _dart_Cronet_UrlRequest_Read = int Function(
  ffi.Pointer<Cronet_UrlRequest> self,
  ffi.Pointer<Cronet_Buffer> buffer,
);

typedef _c_Cronet_UrlRequest_Cancel = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef _dart_Cronet_UrlRequest_Cancel = void Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef _c_Cronet_UrlRequest_IsDone = ffi.Uint8 Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef _dart_Cronet_UrlRequest_IsDone = int Function(
  ffi.Pointer<Cronet_UrlRequest> self,
);

typedef _c_Cronet_UrlRequest_GetStatus = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequest> self,
  ffi.Pointer<Cronet_UrlRequestStatusListener> listener,
);

typedef _dart_Cronet_UrlRequest_GetStatus = void Function(
  ffi.Pointer<Cronet_UrlRequest> self,
  ffi.Pointer<Cronet_UrlRequestStatusListener> listener,
);

typedef Cronet_UrlRequest_InitWithParamsFunc = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequest>,
  ffi.Pointer<Cronet_Engine>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<Cronet_UrlRequestParams>,
  ffi.Pointer<Cronet_UrlRequestCallback>,
  ffi.Pointer<Cronet_Executor>,
);

typedef Cronet_UrlRequest_StartFunc = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequest>,
);

typedef Cronet_UrlRequest_FollowRedirectFunc = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequest>,
);

typedef Cronet_UrlRequest_ReadFunc = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequest>,
  ffi.Pointer<Cronet_Buffer>,
);

typedef Cronet_UrlRequest_CancelFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequest>,
);

typedef Cronet_UrlRequest_IsDoneFunc = ffi.Uint8 Function(
  ffi.Pointer<Cronet_UrlRequest>,
);

typedef Cronet_UrlRequest_GetStatusFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequest>,
  ffi.Pointer<Cronet_UrlRequestStatusListener>,
);

typedef _c_Cronet_UrlRequest_CreateWith = ffi.Pointer<Cronet_UrlRequest>
    Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_InitWithParamsFunc>>
      InitWithParamsFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_StartFunc>> StartFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_FollowRedirectFunc>>
      FollowRedirectFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_ReadFunc>> ReadFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_CancelFunc>> CancelFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_IsDoneFunc>> IsDoneFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_GetStatusFunc>>
      GetStatusFunc,
);

typedef _dart_Cronet_UrlRequest_CreateWith = ffi.Pointer<Cronet_UrlRequest>
    Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_InitWithParamsFunc>>
      InitWithParamsFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_StartFunc>> StartFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_FollowRedirectFunc>>
      FollowRedirectFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_ReadFunc>> ReadFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_CancelFunc>> CancelFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_IsDoneFunc>> IsDoneFunc,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequest_GetStatusFunc>>
      GetStatusFunc,
);

typedef _c_Cronet_RequestFinishedInfoListener_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
);

typedef _dart_Cronet_RequestFinishedInfoListener_Destroy = void Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
);

typedef _c_Cronet_RequestFinishedInfoListener_SetClientContext = ffi.Void
    Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _dart_Cronet_RequestFinishedInfoListener_SetClientContext = void
    Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
  ffi.Pointer<ffi.Void> client_context,
);

typedef _c_Cronet_RequestFinishedInfoListener_GetClientContext
    = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
);

typedef _dart_Cronet_RequestFinishedInfoListener_GetClientContext
    = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
);

typedef _c_Cronet_RequestFinishedInfoListener_OnRequestFinished = ffi.Void
    Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
  ffi.Pointer<Cronet_RequestFinishedInfo> request_info,
  ffi.Pointer<Cronet_UrlResponseInfo> response_info,
  ffi.Pointer<Cronet_Error> error,
);

typedef _dart_Cronet_RequestFinishedInfoListener_OnRequestFinished = void
    Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener> self,
  ffi.Pointer<Cronet_RequestFinishedInfo> request_info,
  ffi.Pointer<Cronet_UrlResponseInfo> response_info,
  ffi.Pointer<Cronet_Error> error,
);

typedef Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc = ffi.Void
    Function(
  ffi.Pointer<Cronet_RequestFinishedInfoListener>,
  ffi.Pointer<Cronet_RequestFinishedInfo>,
  ffi.Pointer<Cronet_UrlResponseInfo>,
  ffi.Pointer<Cronet_Error>,
);

typedef _c_Cronet_RequestFinishedInfoListener_CreateWith
    = ffi.Pointer<Cronet_RequestFinishedInfoListener> Function(
  ffi.Pointer<
          ffi.NativeFunction<
              Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc>>
      OnRequestFinishedFunc,
);

typedef _dart_Cronet_RequestFinishedInfoListener_CreateWith
    = ffi.Pointer<Cronet_RequestFinishedInfoListener> Function(
  ffi.Pointer<
          ffi.NativeFunction<
              Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc>>
      OnRequestFinishedFunc,
);

typedef _c_Cronet_Error_Create = ffi.Pointer<Cronet_Error> Function();

typedef _dart_Cronet_Error_Create = ffi.Pointer<Cronet_Error> Function();

typedef _c_Cronet_Error_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_Error> self,
);

typedef _dart_Cronet_Error_Destroy = void Function(
  ffi.Pointer<Cronet_Error> self,
);

typedef _c_Cronet_Error_error_code_set = ffi.Void Function(
  ffi.Pointer<Cronet_Error> self,
  ffi.Int32 error_code,
);

typedef _dart_Cronet_Error_error_code_set = void Function(
  ffi.Pointer<Cronet_Error> self,
  int error_code,
);

typedef _c_Cronet_Error_message_set = ffi.Void Function(
  ffi.Pointer<Cronet_Error> self,
  ffi.Pointer<ffi.Int8> message,
);

typedef _dart_Cronet_Error_message_set = void Function(
  ffi.Pointer<Cronet_Error> self,
  ffi.Pointer<ffi.Int8> message,
);

typedef _c_Cronet_Error_internal_error_code_set = ffi.Void Function(
  ffi.Pointer<Cronet_Error> self,
  ffi.Int32 internal_error_code,
);

typedef _dart_Cronet_Error_internal_error_code_set = void Function(
  ffi.Pointer<Cronet_Error> self,
  int internal_error_code,
);

typedef _c_Cronet_Error_immediately_retryable_set = ffi.Void Function(
  ffi.Pointer<Cronet_Error> self,
  ffi.Uint8 immediately_retryable,
);

typedef _dart_Cronet_Error_immediately_retryable_set = void Function(
  ffi.Pointer<Cronet_Error> self,
  int immediately_retryable,
);

typedef _c_Cronet_Error_quic_detailed_error_code_set = ffi.Void Function(
  ffi.Pointer<Cronet_Error> self,
  ffi.Int32 quic_detailed_error_code,
);

typedef _dart_Cronet_Error_quic_detailed_error_code_set = void Function(
  ffi.Pointer<Cronet_Error> self,
  int quic_detailed_error_code,
);

typedef _c_Cronet_Error_error_code_get = ffi.Int32 Function(
  ffi.Pointer<Cronet_Error> self,
);

typedef _dart_Cronet_Error_error_code_get = int Function(
  ffi.Pointer<Cronet_Error> self,
);

typedef Native_Cronet_Error_message_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_Error> self,
);

typedef _dart_Cronet_Error_message_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_Error> self,
);

typedef _c_Cronet_Error_internal_error_code_get = ffi.Int32 Function(
  ffi.Pointer<Cronet_Error> self,
);

typedef _dart_Cronet_Error_internal_error_code_get = int Function(
  ffi.Pointer<Cronet_Error> self,
);

typedef _c_Cronet_Error_immediately_retryable_get = ffi.Uint8 Function(
  ffi.Pointer<Cronet_Error> self,
);

typedef _dart_Cronet_Error_immediately_retryable_get = int Function(
  ffi.Pointer<Cronet_Error> self,
);

typedef _c_Cronet_Error_quic_detailed_error_code_get = ffi.Int32 Function(
  ffi.Pointer<Cronet_Error> self,
);

typedef _dart_Cronet_Error_quic_detailed_error_code_get = int Function(
  ffi.Pointer<Cronet_Error> self,
);

typedef _c_Cronet_QuicHint_Create = ffi.Pointer<Cronet_QuicHint> Function();

typedef _dart_Cronet_QuicHint_Create = ffi.Pointer<Cronet_QuicHint> Function();

typedef _c_Cronet_QuicHint_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_QuicHint> self,
);

typedef _dart_Cronet_QuicHint_Destroy = void Function(
  ffi.Pointer<Cronet_QuicHint> self,
);

typedef _c_Cronet_QuicHint_host_set = ffi.Void Function(
  ffi.Pointer<Cronet_QuicHint> self,
  ffi.Pointer<ffi.Int8> host,
);

typedef _dart_Cronet_QuicHint_host_set = void Function(
  ffi.Pointer<Cronet_QuicHint> self,
  ffi.Pointer<ffi.Int8> host,
);

typedef _c_Cronet_QuicHint_port_set = ffi.Void Function(
  ffi.Pointer<Cronet_QuicHint> self,
  ffi.Int32 port,
);

typedef _dart_Cronet_QuicHint_port_set = void Function(
  ffi.Pointer<Cronet_QuicHint> self,
  int port,
);

typedef _c_Cronet_QuicHint_alternate_port_set = ffi.Void Function(
  ffi.Pointer<Cronet_QuicHint> self,
  ffi.Int32 alternate_port,
);

typedef _dart_Cronet_QuicHint_alternate_port_set = void Function(
  ffi.Pointer<Cronet_QuicHint> self,
  int alternate_port,
);

typedef _c_Cronet_QuicHint_host_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_QuicHint> self,
);

typedef _dart_Cronet_QuicHint_host_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_QuicHint> self,
);

typedef _c_Cronet_QuicHint_port_get = ffi.Int32 Function(
  ffi.Pointer<Cronet_QuicHint> self,
);

typedef _dart_Cronet_QuicHint_port_get = int Function(
  ffi.Pointer<Cronet_QuicHint> self,
);

typedef _c_Cronet_QuicHint_alternate_port_get = ffi.Int32 Function(
  ffi.Pointer<Cronet_QuicHint> self,
);

typedef _dart_Cronet_QuicHint_alternate_port_get = int Function(
  ffi.Pointer<Cronet_QuicHint> self,
);

typedef _c_Cronet_PublicKeyPins_Create = ffi.Pointer<Cronet_PublicKeyPins>
    Function();

typedef _dart_Cronet_PublicKeyPins_Create = ffi.Pointer<Cronet_PublicKeyPins>
    Function();

typedef _c_Cronet_PublicKeyPins_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef _dart_Cronet_PublicKeyPins_Destroy = void Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef _c_Cronet_PublicKeyPins_host_set = ffi.Void Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  ffi.Pointer<ffi.Int8> host,
);

typedef _dart_Cronet_PublicKeyPins_host_set = void Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  ffi.Pointer<ffi.Int8> host,
);

typedef _c_Cronet_PublicKeyPins_pins_sha256_add = ffi.Void Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  ffi.Pointer<ffi.Int8> element,
);

typedef _dart_Cronet_PublicKeyPins_pins_sha256_add = void Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  ffi.Pointer<ffi.Int8> element,
);

typedef _c_Cronet_PublicKeyPins_include_subdomains_set = ffi.Void Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  ffi.Uint8 include_subdomains,
);

typedef _dart_Cronet_PublicKeyPins_include_subdomains_set = void Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  int include_subdomains,
);

typedef _c_Cronet_PublicKeyPins_expiration_date_set = ffi.Void Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  ffi.Int64 expiration_date,
);

typedef _dart_Cronet_PublicKeyPins_expiration_date_set = void Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  int expiration_date,
);

typedef _c_Cronet_PublicKeyPins_host_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef _dart_Cronet_PublicKeyPins_host_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef _c_Cronet_PublicKeyPins_pins_sha256_size = ffi.Uint32 Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef _dart_Cronet_PublicKeyPins_pins_sha256_size = int Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef _c_Cronet_PublicKeyPins_pins_sha256_at = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  ffi.Uint32 index,
);

typedef _dart_Cronet_PublicKeyPins_pins_sha256_at = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
  int index,
);

typedef _c_Cronet_PublicKeyPins_pins_sha256_clear = ffi.Void Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef _dart_Cronet_PublicKeyPins_pins_sha256_clear = void Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef _c_Cronet_PublicKeyPins_include_subdomains_get = ffi.Uint8 Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef _dart_Cronet_PublicKeyPins_include_subdomains_get = int Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef _c_Cronet_PublicKeyPins_expiration_date_get = ffi.Int64 Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef _dart_Cronet_PublicKeyPins_expiration_date_get = int Function(
  ffi.Pointer<Cronet_PublicKeyPins> self,
);

typedef _c_Cronet_EngineParams_Create = ffi.Pointer<Cronet_EngineParams>
    Function();

typedef _dart_Cronet_EngineParams_Create = ffi.Pointer<Cronet_EngineParams>
    Function();

typedef _c_Cronet_EngineParams_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_Destroy = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_enable_check_result_set = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Uint8 enable_check_result,
);

typedef _dart_Cronet_EngineParams_enable_check_result_set = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int enable_check_result,
);

typedef _c_Cronet_EngineParams_user_agent_set = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> user_agent,
);

typedef _dart_Cronet_EngineParams_user_agent_set = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> user_agent,
);

typedef _c_Cronet_EngineParams_accept_language_set = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> accept_language,
);

typedef _dart_Cronet_EngineParams_accept_language_set = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> accept_language,
);

typedef _c_Cronet_EngineParams_storage_path_set = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> storage_path,
);

typedef _dart_Cronet_EngineParams_storage_path_set = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> storage_path,
);

typedef _c_Cronet_EngineParams_enable_quic_set = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Uint8 enable_quic,
);

typedef _dart_Cronet_EngineParams_enable_quic_set = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int enable_quic,
);

typedef _c_Cronet_EngineParams_enable_http2_set = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Uint8 enable_http2,
);

typedef _dart_Cronet_EngineParams_enable_http2_set = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int enable_http2,
);

typedef _c_Cronet_EngineParams_enable_brotli_set = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Uint8 enable_brotli,
);

typedef _dart_Cronet_EngineParams_enable_brotli_set = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int enable_brotli,
);

typedef _c_Cronet_EngineParams_http_cache_mode_set = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Int32 http_cache_mode,
);

typedef _dart_Cronet_EngineParams_http_cache_mode_set = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int http_cache_mode,
);

typedef _c_Cronet_EngineParams_http_cache_max_size_set = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Int64 http_cache_max_size,
);

typedef _dart_Cronet_EngineParams_http_cache_max_size_set = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int http_cache_max_size,
);

typedef _c_Cronet_EngineParams_quic_hints_add = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<Cronet_QuicHint> element,
);

typedef _dart_Cronet_EngineParams_quic_hints_add = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<Cronet_QuicHint> element,
);

typedef _c_Cronet_EngineParams_public_key_pins_add = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<Cronet_PublicKeyPins> element,
);

typedef _dart_Cronet_EngineParams_public_key_pins_add = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<Cronet_PublicKeyPins> element,
);

typedef _c_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set
    = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Uint8 enable_public_key_pinning_bypass_for_local_trust_anchors,
);

typedef _dart_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set
    = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int enable_public_key_pinning_bypass_for_local_trust_anchors,
);

typedef _c_Cronet_EngineParams_network_thread_priority_set = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Double network_thread_priority,
);

typedef _dart_Cronet_EngineParams_network_thread_priority_set = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  double network_thread_priority,
);

typedef _c_Cronet_EngineParams_experimental_options_set = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> experimental_options,
);

typedef _dart_Cronet_EngineParams_experimental_options_set = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Pointer<ffi.Int8> experimental_options,
);

typedef _c_Cronet_EngineParams_enable_check_result_get = ffi.Uint8 Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_enable_check_result_get = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_user_agent_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_user_agent_get = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_accept_language_get = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_accept_language_get = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_storage_path_get = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_storage_path_get = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_enable_quic_get = ffi.Uint8 Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_enable_quic_get = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_enable_http2_get = ffi.Uint8 Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_enable_http2_get = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_enable_brotli_get = ffi.Uint8 Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_enable_brotli_get = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_http_cache_mode_get = ffi.Int32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_http_cache_mode_get = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_http_cache_max_size_get = ffi.Int64 Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_http_cache_max_size_get = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_quic_hints_size = ffi.Uint32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_quic_hints_size = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_quic_hints_at = ffi.Pointer<Cronet_QuicHint>
    Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Uint32 index,
);

typedef _dart_Cronet_EngineParams_quic_hints_at = ffi.Pointer<Cronet_QuicHint>
    Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int index,
);

typedef _c_Cronet_EngineParams_quic_hints_clear = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_quic_hints_clear = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_public_key_pins_size = ffi.Uint32 Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_public_key_pins_size = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_public_key_pins_at
    = ffi.Pointer<Cronet_PublicKeyPins> Function(
  ffi.Pointer<Cronet_EngineParams> self,
  ffi.Uint32 index,
);

typedef _dart_Cronet_EngineParams_public_key_pins_at
    = ffi.Pointer<Cronet_PublicKeyPins> Function(
  ffi.Pointer<Cronet_EngineParams> self,
  int index,
);

typedef _c_Cronet_EngineParams_public_key_pins_clear = ffi.Void Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_public_key_pins_clear = void Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get
    = ffi.Uint8 Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get
    = int Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_network_thread_priority_get = ffi.Double
    Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_network_thread_priority_get = double Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_EngineParams_experimental_options_get = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _dart_Cronet_EngineParams_experimental_options_get
    = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_EngineParams> self,
);

typedef _c_Cronet_HttpHeader_Create = ffi.Pointer<Cronet_HttpHeader> Function();

typedef _dart_Cronet_HttpHeader_Create = ffi.Pointer<Cronet_HttpHeader>
    Function();

typedef _c_Cronet_HttpHeader_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_HttpHeader> self,
);

typedef _dart_Cronet_HttpHeader_Destroy = void Function(
  ffi.Pointer<Cronet_HttpHeader> self,
);

typedef _c_Cronet_HttpHeader_name_set = ffi.Void Function(
  ffi.Pointer<Cronet_HttpHeader> self,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_Cronet_HttpHeader_name_set = void Function(
  ffi.Pointer<Cronet_HttpHeader> self,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_Cronet_HttpHeader_value_set = ffi.Void Function(
  ffi.Pointer<Cronet_HttpHeader> self,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_Cronet_HttpHeader_value_set = void Function(
  ffi.Pointer<Cronet_HttpHeader> self,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_Cronet_HttpHeader_name_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_HttpHeader> self,
);

typedef _dart_Cronet_HttpHeader_name_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_HttpHeader> self,
);

typedef _c_Cronet_HttpHeader_value_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_HttpHeader> self,
);

typedef _dart_Cronet_HttpHeader_value_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_HttpHeader> self,
);

typedef _c_Cronet_UrlResponseInfo_Create = ffi.Pointer<Cronet_UrlResponseInfo>
    Function();

typedef _dart_Cronet_UrlResponseInfo_Create
    = ffi.Pointer<Cronet_UrlResponseInfo> Function();

typedef _c_Cronet_UrlResponseInfo_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_Destroy = void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _c_Cronet_UrlResponseInfo_url_set = ffi.Void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> url,
);

typedef _dart_Cronet_UrlResponseInfo_url_set = void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> url,
);

typedef _c_Cronet_UrlResponseInfo_url_chain_add = ffi.Void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> element,
);

typedef _dart_Cronet_UrlResponseInfo_url_chain_add = void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> element,
);

typedef _c_Cronet_UrlResponseInfo_http_status_code_set = ffi.Void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Int32 http_status_code,
);

typedef _dart_Cronet_UrlResponseInfo_http_status_code_set = void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  int http_status_code,
);

typedef _c_Cronet_UrlResponseInfo_http_status_text_set = ffi.Void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> http_status_text,
);

typedef _dart_Cronet_UrlResponseInfo_http_status_text_set = void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> http_status_text,
);

typedef _c_Cronet_UrlResponseInfo_all_headers_list_add = ffi.Void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<Cronet_HttpHeader> element,
);

typedef _dart_Cronet_UrlResponseInfo_all_headers_list_add = void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<Cronet_HttpHeader> element,
);

typedef _c_Cronet_UrlResponseInfo_was_cached_set = ffi.Void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Uint8 was_cached,
);

typedef _dart_Cronet_UrlResponseInfo_was_cached_set = void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  int was_cached,
);

typedef _c_Cronet_UrlResponseInfo_negotiated_protocol_set = ffi.Void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> negotiated_protocol,
);

typedef _dart_Cronet_UrlResponseInfo_negotiated_protocol_set = void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> negotiated_protocol,
);

typedef _c_Cronet_UrlResponseInfo_proxy_server_set = ffi.Void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> proxy_server,
);

typedef _dart_Cronet_UrlResponseInfo_proxy_server_set = void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Pointer<ffi.Int8> proxy_server,
);

typedef _c_Cronet_UrlResponseInfo_received_byte_count_set = ffi.Void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Int64 received_byte_count,
);

typedef _dart_Cronet_UrlResponseInfo_received_byte_count_set = void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  int received_byte_count,
);

typedef _c_Cronet_UrlResponseInfo_url_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_url_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _c_Cronet_UrlResponseInfo_url_chain_size = ffi.Uint32 Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_url_chain_size = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _c_Cronet_UrlResponseInfo_url_chain_at = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Uint32 index,
);

typedef _dart_Cronet_UrlResponseInfo_url_chain_at = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  int index,
);

typedef _c_Cronet_UrlResponseInfo_url_chain_clear = ffi.Void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_url_chain_clear = void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef Native_Cronet_UrlResponseInfo_http_status_code_get = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_http_status_code_get = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef Native_Cronet_UrlResponseInfo_http_status_text_get
    = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_http_status_text_get
    = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _c_Cronet_UrlResponseInfo_all_headers_list_size = ffi.Uint32 Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_all_headers_list_size = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _c_Cronet_UrlResponseInfo_all_headers_list_at
    = ffi.Pointer<Cronet_HttpHeader> Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  ffi.Uint32 index,
);

typedef _dart_Cronet_UrlResponseInfo_all_headers_list_at
    = ffi.Pointer<Cronet_HttpHeader> Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
  int index,
);

typedef _c_Cronet_UrlResponseInfo_all_headers_list_clear = ffi.Void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_all_headers_list_clear = void Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _c_Cronet_UrlResponseInfo_was_cached_get = ffi.Uint8 Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_was_cached_get = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _c_Cronet_UrlResponseInfo_negotiated_protocol_get
    = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_negotiated_protocol_get
    = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _c_Cronet_UrlResponseInfo_proxy_server_get = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_proxy_server_get = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _c_Cronet_UrlResponseInfo_received_byte_count_get = ffi.Int64 Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _dart_Cronet_UrlResponseInfo_received_byte_count_get = int Function(
  ffi.Pointer<Cronet_UrlResponseInfo> self,
);

typedef _c_Cronet_UrlRequestParams_Create = ffi.Pointer<Cronet_UrlRequestParams>
    Function();

typedef _dart_Cronet_UrlRequestParams_Create
    = ffi.Pointer<Cronet_UrlRequestParams> Function();

typedef _c_Cronet_UrlRequestParams_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_Destroy = void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _c_Cronet_UrlRequestParams_http_method_set = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<ffi.Int8> http_method,
);

typedef _dart_Cronet_UrlRequestParams_http_method_set = void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<ffi.Int8> http_method,
);

typedef _c_Cronet_UrlRequestParams_request_headers_add = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_HttpHeader> element,
);

typedef _dart_Cronet_UrlRequestParams_request_headers_add = void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_HttpHeader> element,
);

typedef _c_Cronet_UrlRequestParams_disable_cache_set = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Uint8 disable_cache,
);

typedef _dart_Cronet_UrlRequestParams_disable_cache_set = void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  int disable_cache,
);

typedef _c_Cronet_UrlRequestParams_priority_set = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Int32 priority,
);

typedef _dart_Cronet_UrlRequestParams_priority_set = void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  int priority,
);

typedef _c_Cronet_UrlRequestParams_upload_data_provider_set = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_UploadDataProvider> upload_data_provider,
);

typedef _dart_Cronet_UrlRequestParams_upload_data_provider_set = void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_UploadDataProvider> upload_data_provider,
);

typedef _c_Cronet_UrlRequestParams_upload_data_provider_executor_set = ffi.Void
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_Executor> upload_data_provider_executor,
);

typedef _dart_Cronet_UrlRequestParams_upload_data_provider_executor_set = void
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_Executor> upload_data_provider_executor,
);

typedef _c_Cronet_UrlRequestParams_allow_direct_executor_set = ffi.Void
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Uint8 allow_direct_executor,
);

typedef _dart_Cronet_UrlRequestParams_allow_direct_executor_set = void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  int allow_direct_executor,
);

typedef _c_Cronet_UrlRequestParams_annotations_add = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<ffi.Void> element,
);

typedef _dart_Cronet_UrlRequestParams_annotations_add = void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<ffi.Void> element,
);

typedef _c_Cronet_UrlRequestParams_request_finished_listener_set = ffi.Void
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_RequestFinishedInfoListener> request_finished_listener,
);

typedef _dart_Cronet_UrlRequestParams_request_finished_listener_set = void
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_RequestFinishedInfoListener> request_finished_listener,
);

typedef _c_Cronet_UrlRequestParams_request_finished_executor_set = ffi.Void
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_Executor> request_finished_executor,
);

typedef _dart_Cronet_UrlRequestParams_request_finished_executor_set = void
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Pointer<Cronet_Executor> request_finished_executor,
);

typedef _c_Cronet_UrlRequestParams_idempotency_set = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Int32 idempotency,
);

typedef _dart_Cronet_UrlRequestParams_idempotency_set = void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  int idempotency,
);

typedef _c_Cronet_UrlRequestParams_http_method_get = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_http_method_get = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _c_Cronet_UrlRequestParams_request_headers_size = ffi.Uint32 Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_request_headers_size = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _c_Cronet_UrlRequestParams_request_headers_at
    = ffi.Pointer<Cronet_HttpHeader> Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Uint32 index,
);

typedef _dart_Cronet_UrlRequestParams_request_headers_at
    = ffi.Pointer<Cronet_HttpHeader> Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  int index,
);

typedef _c_Cronet_UrlRequestParams_request_headers_clear = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_request_headers_clear = void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _c_Cronet_UrlRequestParams_disable_cache_get = ffi.Uint8 Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_disable_cache_get = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _c_Cronet_UrlRequestParams_priority_get = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_priority_get = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _c_Cronet_UrlRequestParams_upload_data_provider_get
    = ffi.Pointer<Cronet_UploadDataProvider> Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_upload_data_provider_get
    = ffi.Pointer<Cronet_UploadDataProvider> Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _c_Cronet_UrlRequestParams_upload_data_provider_executor_get
    = ffi.Pointer<Cronet_Executor> Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_upload_data_provider_executor_get
    = ffi.Pointer<Cronet_Executor> Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _c_Cronet_UrlRequestParams_allow_direct_executor_get = ffi.Uint8
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_allow_direct_executor_get = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _c_Cronet_UrlRequestParams_annotations_size = ffi.Uint32 Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_annotations_size = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _c_Cronet_UrlRequestParams_annotations_at = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  ffi.Uint32 index,
);

typedef _dart_Cronet_UrlRequestParams_annotations_at = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
  int index,
);

typedef _c_Cronet_UrlRequestParams_annotations_clear = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_annotations_clear = void Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _c_Cronet_UrlRequestParams_request_finished_listener_get
    = ffi.Pointer<Cronet_RequestFinishedInfoListener> Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_request_finished_listener_get
    = ffi.Pointer<Cronet_RequestFinishedInfoListener> Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _c_Cronet_UrlRequestParams_request_finished_executor_get
    = ffi.Pointer<Cronet_Executor> Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_request_finished_executor_get
    = ffi.Pointer<Cronet_Executor> Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _c_Cronet_UrlRequestParams_idempotency_get = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _dart_Cronet_UrlRequestParams_idempotency_get = int Function(
  ffi.Pointer<Cronet_UrlRequestParams> self,
);

typedef _c_Cronet_DateTime_Create = ffi.Pointer<Cronet_DateTime> Function();

typedef _dart_Cronet_DateTime_Create = ffi.Pointer<Cronet_DateTime> Function();

typedef _c_Cronet_DateTime_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_DateTime> self,
);

typedef _dart_Cronet_DateTime_Destroy = void Function(
  ffi.Pointer<Cronet_DateTime> self,
);

typedef _c_Cronet_DateTime_value_set = ffi.Void Function(
  ffi.Pointer<Cronet_DateTime> self,
  ffi.Int64 value,
);

typedef _dart_Cronet_DateTime_value_set = void Function(
  ffi.Pointer<Cronet_DateTime> self,
  int value,
);

typedef _c_Cronet_DateTime_value_get = ffi.Int64 Function(
  ffi.Pointer<Cronet_DateTime> self,
);

typedef _dart_Cronet_DateTime_value_get = int Function(
  ffi.Pointer<Cronet_DateTime> self,
);

typedef _c_Cronet_Metrics_Create = ffi.Pointer<Cronet_Metrics> Function();

typedef _dart_Cronet_Metrics_Create = ffi.Pointer<Cronet_Metrics> Function();

typedef _c_Cronet_Metrics_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_Destroy = void Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_request_start_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_start,
);

typedef _dart_Cronet_Metrics_request_start_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_start,
);

typedef _c_Cronet_Metrics_request_start_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_start,
);

typedef _dart_Cronet_Metrics_request_start_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_start,
);

typedef _c_Cronet_Metrics_dns_start_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_start,
);

typedef _dart_Cronet_Metrics_dns_start_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_start,
);

typedef _c_Cronet_Metrics_dns_start_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_start,
);

typedef _dart_Cronet_Metrics_dns_start_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_start,
);

typedef _c_Cronet_Metrics_dns_end_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_end,
);

typedef _dart_Cronet_Metrics_dns_end_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_end,
);

typedef _c_Cronet_Metrics_dns_end_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_end,
);

typedef _dart_Cronet_Metrics_dns_end_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> dns_end,
);

typedef _c_Cronet_Metrics_connect_start_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_start,
);

typedef _dart_Cronet_Metrics_connect_start_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_start,
);

typedef _c_Cronet_Metrics_connect_start_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_start,
);

typedef _dart_Cronet_Metrics_connect_start_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_start,
);

typedef _c_Cronet_Metrics_connect_end_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_end,
);

typedef _dart_Cronet_Metrics_connect_end_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_end,
);

typedef _c_Cronet_Metrics_connect_end_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_end,
);

typedef _dart_Cronet_Metrics_connect_end_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> connect_end,
);

typedef _c_Cronet_Metrics_ssl_start_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_start,
);

typedef _dart_Cronet_Metrics_ssl_start_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_start,
);

typedef _c_Cronet_Metrics_ssl_start_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_start,
);

typedef _dart_Cronet_Metrics_ssl_start_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_start,
);

typedef _c_Cronet_Metrics_ssl_end_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_end,
);

typedef _dart_Cronet_Metrics_ssl_end_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_end,
);

typedef _c_Cronet_Metrics_ssl_end_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_end,
);

typedef _dart_Cronet_Metrics_ssl_end_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> ssl_end,
);

typedef _c_Cronet_Metrics_sending_start_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_start,
);

typedef _dart_Cronet_Metrics_sending_start_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_start,
);

typedef _c_Cronet_Metrics_sending_start_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_start,
);

typedef _dart_Cronet_Metrics_sending_start_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_start,
);

typedef _c_Cronet_Metrics_sending_end_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_end,
);

typedef _dart_Cronet_Metrics_sending_end_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_end,
);

typedef _c_Cronet_Metrics_sending_end_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_end,
);

typedef _dart_Cronet_Metrics_sending_end_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> sending_end,
);

typedef _c_Cronet_Metrics_push_start_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_start,
);

typedef _dart_Cronet_Metrics_push_start_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_start,
);

typedef _c_Cronet_Metrics_push_start_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_start,
);

typedef _dart_Cronet_Metrics_push_start_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_start,
);

typedef _c_Cronet_Metrics_push_end_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_end,
);

typedef _dart_Cronet_Metrics_push_end_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_end,
);

typedef _c_Cronet_Metrics_push_end_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_end,
);

typedef _dart_Cronet_Metrics_push_end_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> push_end,
);

typedef _c_Cronet_Metrics_response_start_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> response_start,
);

typedef _dart_Cronet_Metrics_response_start_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> response_start,
);

typedef _c_Cronet_Metrics_response_start_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> response_start,
);

typedef _dart_Cronet_Metrics_response_start_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> response_start,
);

typedef _c_Cronet_Metrics_request_end_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_end,
);

typedef _dart_Cronet_Metrics_request_end_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_end,
);

typedef _c_Cronet_Metrics_request_end_move = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_end,
);

typedef _dart_Cronet_Metrics_request_end_move = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Pointer<Cronet_DateTime> request_end,
);

typedef _c_Cronet_Metrics_socket_reused_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Uint8 socket_reused,
);

typedef _dart_Cronet_Metrics_socket_reused_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  int socket_reused,
);

typedef _c_Cronet_Metrics_sent_byte_count_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Int64 sent_byte_count,
);

typedef _dart_Cronet_Metrics_sent_byte_count_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  int sent_byte_count,
);

typedef _c_Cronet_Metrics_received_byte_count_set = ffi.Void Function(
  ffi.Pointer<Cronet_Metrics> self,
  ffi.Int64 received_byte_count,
);

typedef _dart_Cronet_Metrics_received_byte_count_set = void Function(
  ffi.Pointer<Cronet_Metrics> self,
  int received_byte_count,
);

typedef _c_Cronet_Metrics_request_start_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_request_start_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_dns_start_get = ffi.Pointer<Cronet_DateTime> Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_dns_start_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_dns_end_get = ffi.Pointer<Cronet_DateTime> Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_dns_end_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_connect_start_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_connect_start_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_connect_end_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_connect_end_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_ssl_start_get = ffi.Pointer<Cronet_DateTime> Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_ssl_start_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_ssl_end_get = ffi.Pointer<Cronet_DateTime> Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_ssl_end_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_sending_start_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_sending_start_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_sending_end_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_sending_end_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_push_start_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_push_start_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_push_end_get = ffi.Pointer<Cronet_DateTime> Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_push_end_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_response_start_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_response_start_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_request_end_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_request_end_get = ffi.Pointer<Cronet_DateTime>
    Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_socket_reused_get = ffi.Uint8 Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_socket_reused_get = int Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_sent_byte_count_get = ffi.Int64 Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_sent_byte_count_get = int Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_Metrics_received_byte_count_get = ffi.Int64 Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _dart_Cronet_Metrics_received_byte_count_get = int Function(
  ffi.Pointer<Cronet_Metrics> self,
);

typedef _c_Cronet_RequestFinishedInfo_Create
    = ffi.Pointer<Cronet_RequestFinishedInfo> Function();

typedef _dart_Cronet_RequestFinishedInfo_Create
    = ffi.Pointer<Cronet_RequestFinishedInfo> Function();

typedef _c_Cronet_RequestFinishedInfo_Destroy = ffi.Void Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
);

typedef _dart_Cronet_RequestFinishedInfo_Destroy = void Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
);

typedef _c_Cronet_RequestFinishedInfo_metrics_set = ffi.Void Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Pointer<Cronet_Metrics> metrics,
);

typedef _dart_Cronet_RequestFinishedInfo_metrics_set = void Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Pointer<Cronet_Metrics> metrics,
);

typedef _c_Cronet_RequestFinishedInfo_metrics_move = ffi.Void Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Pointer<Cronet_Metrics> metrics,
);

typedef _dart_Cronet_RequestFinishedInfo_metrics_move = void Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Pointer<Cronet_Metrics> metrics,
);

typedef _c_Cronet_RequestFinishedInfo_annotations_add = ffi.Void Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Pointer<ffi.Void> element,
);

typedef _dart_Cronet_RequestFinishedInfo_annotations_add = void Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Pointer<ffi.Void> element,
);

typedef _c_Cronet_RequestFinishedInfo_finished_reason_set = ffi.Void Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Int32 finished_reason,
);

typedef _dart_Cronet_RequestFinishedInfo_finished_reason_set = void Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  int finished_reason,
);

typedef _c_Cronet_RequestFinishedInfo_metrics_get = ffi.Pointer<Cronet_Metrics>
    Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
);

typedef _dart_Cronet_RequestFinishedInfo_metrics_get
    = ffi.Pointer<Cronet_Metrics> Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
);

typedef _c_Cronet_RequestFinishedInfo_annotations_size = ffi.Uint32 Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
);

typedef _dart_Cronet_RequestFinishedInfo_annotations_size = int Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
);

typedef _c_Cronet_RequestFinishedInfo_annotations_at = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  ffi.Uint32 index,
);

typedef _dart_Cronet_RequestFinishedInfo_annotations_at = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
  int index,
);

typedef _c_Cronet_RequestFinishedInfo_annotations_clear = ffi.Void Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
);

typedef _dart_Cronet_RequestFinishedInfo_annotations_clear = void Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
);

typedef _c_Cronet_RequestFinishedInfo_finished_reason_get = ffi.Int32 Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
);

typedef _dart_Cronet_RequestFinishedInfo_finished_reason_get = int Function(
  ffi.Pointer<Cronet_RequestFinishedInfo> self,
);
