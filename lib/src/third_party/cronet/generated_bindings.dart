// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to Cronet
class Cronet {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Cronet(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Cronet.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// ////////////////////
  Cronet_BufferPtr Cronet_Buffer_Create() {
    return _Cronet_Buffer_Create();
  }

  late final _Cronet_Buffer_CreatePtr =
      _lookup<ffi.NativeFunction<Cronet_BufferPtr Function()>>(
          'Cronet_Buffer_Create');
  late final _Cronet_Buffer_Create =
      _Cronet_Buffer_CreatePtr.asFunction<Cronet_BufferPtr Function()>();

  void Cronet_Buffer_Destroy(
    Cronet_BufferPtr self,
  ) {
    return _Cronet_Buffer_Destroy(
      self,
    );
  }

  late final _Cronet_Buffer_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_BufferPtr)>>(
          'Cronet_Buffer_Destroy');
  late final _Cronet_Buffer_Destroy =
      _Cronet_Buffer_DestroyPtr.asFunction<void Function(Cronet_BufferPtr)>();

  void Cronet_Buffer_SetClientContext(
    Cronet_BufferPtr self,
    Cronet_ClientContext client_context,
  ) {
    return _Cronet_Buffer_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_Buffer_SetClientContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_BufferPtr,
              Cronet_ClientContext)>>('Cronet_Buffer_SetClientContext');
  late final _Cronet_Buffer_SetClientContext =
      _Cronet_Buffer_SetClientContextPtr.asFunction<
          void Function(Cronet_BufferPtr, Cronet_ClientContext)>();

  Cronet_ClientContext Cronet_Buffer_GetClientContext(
    Cronet_BufferPtr self,
  ) {
    return _Cronet_Buffer_GetClientContext(
      self,
    );
  }

  late final _Cronet_Buffer_GetClientContextPtr = _lookup<
          ffi.NativeFunction<Cronet_ClientContext Function(Cronet_BufferPtr)>>(
      'Cronet_Buffer_GetClientContext');
  late final _Cronet_Buffer_GetClientContext =
      _Cronet_Buffer_GetClientContextPtr.asFunction<
          Cronet_ClientContext Function(Cronet_BufferPtr)>();

  void Cronet_Buffer_InitWithDataAndCallback(
    Cronet_BufferPtr self,
    Cronet_RawDataPtr data,
    int size,
    Cronet_BufferCallbackPtr callback,
  ) {
    return _Cronet_Buffer_InitWithDataAndCallback(
      self,
      data,
      size,
      callback,
    );
  }

  late final _Cronet_Buffer_InitWithDataAndCallbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(Cronet_BufferPtr, Cronet_RawDataPtr, ffi.Uint64,
                  Cronet_BufferCallbackPtr)>>(
      'Cronet_Buffer_InitWithDataAndCallback');
  late final _Cronet_Buffer_InitWithDataAndCallback =
      _Cronet_Buffer_InitWithDataAndCallbackPtr.asFunction<
          void Function(Cronet_BufferPtr, Cronet_RawDataPtr, int,
              Cronet_BufferCallbackPtr)>();

  void Cronet_Buffer_InitWithAlloc(
    Cronet_BufferPtr self,
    int size,
  ) {
    return _Cronet_Buffer_InitWithAlloc(
      self,
      size,
    );
  }

  late final _Cronet_Buffer_InitWithAllocPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_BufferPtr, ffi.Uint64)>>(
      'Cronet_Buffer_InitWithAlloc');
  late final _Cronet_Buffer_InitWithAlloc = _Cronet_Buffer_InitWithAllocPtr
      .asFunction<void Function(Cronet_BufferPtr, int)>();

  int Cronet_Buffer_GetSize(
    Cronet_BufferPtr self,
  ) {
    return _Cronet_Buffer_GetSize(
      self,
    );
  }

  late final _Cronet_Buffer_GetSizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(Cronet_BufferPtr)>>(
          'Cronet_Buffer_GetSize');
  late final _Cronet_Buffer_GetSize =
      _Cronet_Buffer_GetSizePtr.asFunction<int Function(Cronet_BufferPtr)>();

  Cronet_RawDataPtr Cronet_Buffer_GetData(
    Cronet_BufferPtr self,
  ) {
    return _Cronet_Buffer_GetData(
      self,
    );
  }

  late final _Cronet_Buffer_GetDataPtr =
      _lookup<ffi.NativeFunction<Cronet_RawDataPtr Function(Cronet_BufferPtr)>>(
          'Cronet_Buffer_GetData');
  late final _Cronet_Buffer_GetData = _Cronet_Buffer_GetDataPtr.asFunction<
      Cronet_RawDataPtr Function(Cronet_BufferPtr)>();

  Cronet_BufferPtr Cronet_Buffer_CreateWith(
    Cronet_Buffer_InitWithDataAndCallbackFunc InitWithDataAndCallbackFunc,
    Cronet_Buffer_InitWithAllocFunc InitWithAllocFunc,
    Cronet_Buffer_GetSizeFunc GetSizeFunc,
    Cronet_Buffer_GetDataFunc GetDataFunc,
  ) {
    return _Cronet_Buffer_CreateWith(
      InitWithDataAndCallbackFunc,
      InitWithAllocFunc,
      GetSizeFunc,
      GetDataFunc,
    );
  }

  late final _Cronet_Buffer_CreateWithPtr = _lookup<
      ffi.NativeFunction<
          Cronet_BufferPtr Function(
              Cronet_Buffer_InitWithDataAndCallbackFunc,
              Cronet_Buffer_InitWithAllocFunc,
              Cronet_Buffer_GetSizeFunc,
              Cronet_Buffer_GetDataFunc)>>('Cronet_Buffer_CreateWith');
  late final _Cronet_Buffer_CreateWith =
      _Cronet_Buffer_CreateWithPtr.asFunction<
          Cronet_BufferPtr Function(
              Cronet_Buffer_InitWithDataAndCallbackFunc,
              Cronet_Buffer_InitWithAllocFunc,
              Cronet_Buffer_GetSizeFunc,
              Cronet_Buffer_GetDataFunc)>();

  /// ////////////////////
  void Cronet_BufferCallback_Destroy(
    Cronet_BufferCallbackPtr self,
  ) {
    return _Cronet_BufferCallback_Destroy(
      self,
    );
  }

  late final _Cronet_BufferCallback_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_BufferCallbackPtr)>>(
          'Cronet_BufferCallback_Destroy');
  late final _Cronet_BufferCallback_Destroy = _Cronet_BufferCallback_DestroyPtr
      .asFunction<void Function(Cronet_BufferCallbackPtr)>();

  void Cronet_BufferCallback_SetClientContext(
    Cronet_BufferCallbackPtr self,
    Cronet_ClientContext client_context,
  ) {
    return _Cronet_BufferCallback_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_BufferCallback_SetClientContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_BufferCallbackPtr,
              Cronet_ClientContext)>>('Cronet_BufferCallback_SetClientContext');
  late final _Cronet_BufferCallback_SetClientContext =
      _Cronet_BufferCallback_SetClientContextPtr.asFunction<
          void Function(Cronet_BufferCallbackPtr, Cronet_ClientContext)>();

  Cronet_ClientContext Cronet_BufferCallback_GetClientContext(
    Cronet_BufferCallbackPtr self,
  ) {
    return _Cronet_BufferCallback_GetClientContext(
      self,
    );
  }

  late final _Cronet_BufferCallback_GetClientContextPtr = _lookup<
          ffi.NativeFunction<
              Cronet_ClientContext Function(Cronet_BufferCallbackPtr)>>(
      'Cronet_BufferCallback_GetClientContext');
  late final _Cronet_BufferCallback_GetClientContext =
      _Cronet_BufferCallback_GetClientContextPtr.asFunction<
          Cronet_ClientContext Function(Cronet_BufferCallbackPtr)>();

  void Cronet_BufferCallback_OnDestroy(
    Cronet_BufferCallbackPtr self,
    Cronet_BufferPtr buffer,
  ) {
    return _Cronet_BufferCallback_OnDestroy(
      self,
      buffer,
    );
  }

  late final _Cronet_BufferCallback_OnDestroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_BufferCallbackPtr,
              Cronet_BufferPtr)>>('Cronet_BufferCallback_OnDestroy');
  late final _Cronet_BufferCallback_OnDestroy =
      _Cronet_BufferCallback_OnDestroyPtr.asFunction<
          void Function(Cronet_BufferCallbackPtr, Cronet_BufferPtr)>();

  Cronet_BufferCallbackPtr Cronet_BufferCallback_CreateWith(
    Cronet_BufferCallback_OnDestroyFunc OnDestroyFunc,
  ) {
    return _Cronet_BufferCallback_CreateWith(
      OnDestroyFunc,
    );
  }

  late final _Cronet_BufferCallback_CreateWithPtr = _lookup<
          ffi.NativeFunction<
              Cronet_BufferCallbackPtr Function(
                  Cronet_BufferCallback_OnDestroyFunc)>>(
      'Cronet_BufferCallback_CreateWith');
  late final _Cronet_BufferCallback_CreateWith =
      _Cronet_BufferCallback_CreateWithPtr.asFunction<
          Cronet_BufferCallbackPtr Function(
              Cronet_BufferCallback_OnDestroyFunc)>();

  /// ////////////////////
  void Cronet_Runnable_Destroy(
    Cronet_RunnablePtr self,
  ) {
    return _Cronet_Runnable_Destroy(
      self,
    );
  }

  late final _Cronet_Runnable_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_RunnablePtr)>>(
          'Cronet_Runnable_Destroy');
  late final _Cronet_Runnable_Destroy = _Cronet_Runnable_DestroyPtr.asFunction<
      void Function(Cronet_RunnablePtr)>();

  void Cronet_Runnable_SetClientContext(
    Cronet_RunnablePtr self,
    Cronet_ClientContext client_context,
  ) {
    return _Cronet_Runnable_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_Runnable_SetClientContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_RunnablePtr,
              Cronet_ClientContext)>>('Cronet_Runnable_SetClientContext');
  late final _Cronet_Runnable_SetClientContext =
      _Cronet_Runnable_SetClientContextPtr.asFunction<
          void Function(Cronet_RunnablePtr, Cronet_ClientContext)>();

  Cronet_ClientContext Cronet_Runnable_GetClientContext(
    Cronet_RunnablePtr self,
  ) {
    return _Cronet_Runnable_GetClientContext(
      self,
    );
  }

  late final _Cronet_Runnable_GetClientContextPtr = _lookup<
      ffi.NativeFunction<
          Cronet_ClientContext Function(
              Cronet_RunnablePtr)>>('Cronet_Runnable_GetClientContext');
  late final _Cronet_Runnable_GetClientContext =
      _Cronet_Runnable_GetClientContextPtr.asFunction<
          Cronet_ClientContext Function(Cronet_RunnablePtr)>();

  void Cronet_Runnable_Run(
    Cronet_RunnablePtr self,
  ) {
    return _Cronet_Runnable_Run(
      self,
    );
  }

  late final _Cronet_Runnable_RunPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_RunnablePtr)>>(
          'Cronet_Runnable_Run');
  late final _Cronet_Runnable_Run =
      _Cronet_Runnable_RunPtr.asFunction<void Function(Cronet_RunnablePtr)>();

  Cronet_RunnablePtr Cronet_Runnable_CreateWith(
    Cronet_Runnable_RunFunc RunFunc,
  ) {
    return _Cronet_Runnable_CreateWith(
      RunFunc,
    );
  }

  late final _Cronet_Runnable_CreateWithPtr = _lookup<
      ffi.NativeFunction<
          Cronet_RunnablePtr Function(
              Cronet_Runnable_RunFunc)>>('Cronet_Runnable_CreateWith');
  late final _Cronet_Runnable_CreateWith = _Cronet_Runnable_CreateWithPtr
      .asFunction<Cronet_RunnablePtr Function(Cronet_Runnable_RunFunc)>();

  /// ////////////////////
  void Cronet_Executor_Destroy(
    Cronet_ExecutorPtr self,
  ) {
    return _Cronet_Executor_Destroy(
      self,
    );
  }

  late final _Cronet_Executor_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_ExecutorPtr)>>(
          'Cronet_Executor_Destroy');
  late final _Cronet_Executor_Destroy = _Cronet_Executor_DestroyPtr.asFunction<
      void Function(Cronet_ExecutorPtr)>();

  void Cronet_Executor_SetClientContext(
    Cronet_ExecutorPtr self,
    Cronet_ClientContext client_context,
  ) {
    return _Cronet_Executor_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_Executor_SetClientContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_ExecutorPtr,
              Cronet_ClientContext)>>('Cronet_Executor_SetClientContext');
  late final _Cronet_Executor_SetClientContext =
      _Cronet_Executor_SetClientContextPtr.asFunction<
          void Function(Cronet_ExecutorPtr, Cronet_ClientContext)>();

  Cronet_ClientContext Cronet_Executor_GetClientContext(
    Cronet_ExecutorPtr self,
  ) {
    return _Cronet_Executor_GetClientContext(
      self,
    );
  }

  late final _Cronet_Executor_GetClientContextPtr = _lookup<
      ffi.NativeFunction<
          Cronet_ClientContext Function(
              Cronet_ExecutorPtr)>>('Cronet_Executor_GetClientContext');
  late final _Cronet_Executor_GetClientContext =
      _Cronet_Executor_GetClientContextPtr.asFunction<
          Cronet_ClientContext Function(Cronet_ExecutorPtr)>();

  void Cronet_Executor_Execute(
    Cronet_ExecutorPtr self,
    Cronet_RunnablePtr command,
  ) {
    return _Cronet_Executor_Execute(
      self,
      command,
    );
  }

  late final _Cronet_Executor_ExecutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_ExecutorPtr,
              Cronet_RunnablePtr)>>('Cronet_Executor_Execute');
  late final _Cronet_Executor_Execute = _Cronet_Executor_ExecutePtr.asFunction<
      void Function(Cronet_ExecutorPtr, Cronet_RunnablePtr)>();

  Cronet_ExecutorPtr Cronet_Executor_CreateWith(
    Cronet_Executor_ExecuteFunc ExecuteFunc,
  ) {
    return _Cronet_Executor_CreateWith(
      ExecuteFunc,
    );
  }

  late final _Cronet_Executor_CreateWithPtr = _lookup<
      ffi.NativeFunction<
          Cronet_ExecutorPtr Function(
              Cronet_Executor_ExecuteFunc)>>('Cronet_Executor_CreateWith');
  late final _Cronet_Executor_CreateWith = _Cronet_Executor_CreateWithPtr
      .asFunction<Cronet_ExecutorPtr Function(Cronet_Executor_ExecuteFunc)>();

  /// ////////////////////
  Cronet_EnginePtr Cronet_Engine_Create() {
    return _Cronet_Engine_Create();
  }

  late final _Cronet_Engine_CreatePtr =
      _lookup<ffi.NativeFunction<Cronet_EnginePtr Function()>>(
          'Cronet_Engine_Create');
  late final _Cronet_Engine_Create =
      _Cronet_Engine_CreatePtr.asFunction<Cronet_EnginePtr Function()>();

  void Cronet_Engine_Destroy(
    Cronet_EnginePtr self,
  ) {
    return _Cronet_Engine_Destroy(
      self,
    );
  }

  late final _Cronet_Engine_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_EnginePtr)>>(
          'Cronet_Engine_Destroy');
  late final _Cronet_Engine_Destroy =
      _Cronet_Engine_DestroyPtr.asFunction<void Function(Cronet_EnginePtr)>();

  void Cronet_Engine_SetClientContext(
    Cronet_EnginePtr self,
    Cronet_ClientContext client_context,
  ) {
    return _Cronet_Engine_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_Engine_SetClientContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_EnginePtr,
              Cronet_ClientContext)>>('Cronet_Engine_SetClientContext');
  late final _Cronet_Engine_SetClientContext =
      _Cronet_Engine_SetClientContextPtr.asFunction<
          void Function(Cronet_EnginePtr, Cronet_ClientContext)>();

  Cronet_ClientContext Cronet_Engine_GetClientContext(
    Cronet_EnginePtr self,
  ) {
    return _Cronet_Engine_GetClientContext(
      self,
    );
  }

  late final _Cronet_Engine_GetClientContextPtr = _lookup<
          ffi.NativeFunction<Cronet_ClientContext Function(Cronet_EnginePtr)>>(
      'Cronet_Engine_GetClientContext');
  late final _Cronet_Engine_GetClientContext =
      _Cronet_Engine_GetClientContextPtr.asFunction<
          Cronet_ClientContext Function(Cronet_EnginePtr)>();

  int Cronet_Engine_StartWithParams(
    Cronet_EnginePtr self,
    Cronet_EngineParamsPtr params,
  ) {
    return _Cronet_Engine_StartWithParams(
      self,
      params,
    );
  }

  late final _Cronet_Engine_StartWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(Cronet_EnginePtr,
              Cronet_EngineParamsPtr)>>('Cronet_Engine_StartWithParams');
  late final _Cronet_Engine_StartWithParams = _Cronet_Engine_StartWithParamsPtr
      .asFunction<int Function(Cronet_EnginePtr, Cronet_EngineParamsPtr)>();

  bool Cronet_Engine_StartNetLogToFile(
    Cronet_EnginePtr self,
    Cronet_String file_name,
    bool log_all,
  ) {
    return _Cronet_Engine_StartNetLogToFile(
      self,
      file_name,
      log_all,
    );
  }

  late final _Cronet_Engine_StartNetLogToFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(Cronet_EnginePtr, Cronet_String,
              ffi.Bool)>>('Cronet_Engine_StartNetLogToFile');
  late final _Cronet_Engine_StartNetLogToFile =
      _Cronet_Engine_StartNetLogToFilePtr.asFunction<
          bool Function(Cronet_EnginePtr, Cronet_String, bool)>();

  void Cronet_Engine_StopNetLog(
    Cronet_EnginePtr self,
  ) {
    return _Cronet_Engine_StopNetLog(
      self,
    );
  }

  late final _Cronet_Engine_StopNetLogPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_EnginePtr)>>(
          'Cronet_Engine_StopNetLog');
  late final _Cronet_Engine_StopNetLog = _Cronet_Engine_StopNetLogPtr
      .asFunction<void Function(Cronet_EnginePtr)>();

  int Cronet_Engine_Shutdown(
    Cronet_EnginePtr self,
  ) {
    return _Cronet_Engine_Shutdown(
      self,
    );
  }

  late final _Cronet_Engine_ShutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Cronet_EnginePtr)>>(
          'Cronet_Engine_Shutdown');
  late final _Cronet_Engine_Shutdown =
      _Cronet_Engine_ShutdownPtr.asFunction<int Function(Cronet_EnginePtr)>();

  Cronet_String Cronet_Engine_GetVersionString(
    Cronet_EnginePtr self,
  ) {
    return _Cronet_Engine_GetVersionString(
      self,
    );
  }

  late final _Cronet_Engine_GetVersionStringPtr =
      _lookup<ffi.NativeFunction<Cronet_String Function(Cronet_EnginePtr)>>(
          'Cronet_Engine_GetVersionString');
  late final _Cronet_Engine_GetVersionString =
      _Cronet_Engine_GetVersionStringPtr.asFunction<
          Cronet_String Function(Cronet_EnginePtr)>();

  Cronet_String Cronet_Engine_GetDefaultUserAgent(
    Cronet_EnginePtr self,
  ) {
    return _Cronet_Engine_GetDefaultUserAgent(
      self,
    );
  }

  late final _Cronet_Engine_GetDefaultUserAgentPtr =
      _lookup<ffi.NativeFunction<Cronet_String Function(Cronet_EnginePtr)>>(
          'Cronet_Engine_GetDefaultUserAgent');
  late final _Cronet_Engine_GetDefaultUserAgent =
      _Cronet_Engine_GetDefaultUserAgentPtr.asFunction<
          Cronet_String Function(Cronet_EnginePtr)>();

  void Cronet_Engine_AddRequestFinishedListener(
    Cronet_EnginePtr self,
    Cronet_RequestFinishedInfoListenerPtr listener,
    Cronet_ExecutorPtr executor,
  ) {
    return _Cronet_Engine_AddRequestFinishedListener(
      self,
      listener,
      executor,
    );
  }

  late final _Cronet_Engine_AddRequestFinishedListenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Cronet_EnginePtr,
              Cronet_RequestFinishedInfoListenerPtr,
              Cronet_ExecutorPtr)>>('Cronet_Engine_AddRequestFinishedListener');
  late final _Cronet_Engine_AddRequestFinishedListener =
      _Cronet_Engine_AddRequestFinishedListenerPtr.asFunction<
          void Function(Cronet_EnginePtr, Cronet_RequestFinishedInfoListenerPtr,
              Cronet_ExecutorPtr)>();

  void Cronet_Engine_RemoveRequestFinishedListener(
    Cronet_EnginePtr self,
    Cronet_RequestFinishedInfoListenerPtr listener,
  ) {
    return _Cronet_Engine_RemoveRequestFinishedListener(
      self,
      listener,
    );
  }

  late final _Cronet_Engine_RemoveRequestFinishedListenerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  Cronet_EnginePtr, Cronet_RequestFinishedInfoListenerPtr)>>(
      'Cronet_Engine_RemoveRequestFinishedListener');
  late final _Cronet_Engine_RemoveRequestFinishedListener =
      _Cronet_Engine_RemoveRequestFinishedListenerPtr.asFunction<
          void Function(
              Cronet_EnginePtr, Cronet_RequestFinishedInfoListenerPtr)>();

  Cronet_EnginePtr Cronet_Engine_CreateWith(
    Cronet_Engine_StartWithParamsFunc StartWithParamsFunc,
    Cronet_Engine_StartNetLogToFileFunc StartNetLogToFileFunc,
    Cronet_Engine_StopNetLogFunc StopNetLogFunc,
    Cronet_Engine_ShutdownFunc ShutdownFunc,
    Cronet_Engine_GetVersionStringFunc GetVersionStringFunc,
    Cronet_Engine_GetDefaultUserAgentFunc GetDefaultUserAgentFunc,
    Cronet_Engine_AddRequestFinishedListenerFunc AddRequestFinishedListenerFunc,
    Cronet_Engine_RemoveRequestFinishedListenerFunc
        RemoveRequestFinishedListenerFunc,
  ) {
    return _Cronet_Engine_CreateWith(
      StartWithParamsFunc,
      StartNetLogToFileFunc,
      StopNetLogFunc,
      ShutdownFunc,
      GetVersionStringFunc,
      GetDefaultUserAgentFunc,
      AddRequestFinishedListenerFunc,
      RemoveRequestFinishedListenerFunc,
    );
  }

  late final _Cronet_Engine_CreateWithPtr = _lookup<
          ffi.NativeFunction<
              Cronet_EnginePtr Function(
                  Cronet_Engine_StartWithParamsFunc,
                  Cronet_Engine_StartNetLogToFileFunc,
                  Cronet_Engine_StopNetLogFunc,
                  Cronet_Engine_ShutdownFunc,
                  Cronet_Engine_GetVersionStringFunc,
                  Cronet_Engine_GetDefaultUserAgentFunc,
                  Cronet_Engine_AddRequestFinishedListenerFunc,
                  Cronet_Engine_RemoveRequestFinishedListenerFunc)>>(
      'Cronet_Engine_CreateWith');
  late final _Cronet_Engine_CreateWith =
      _Cronet_Engine_CreateWithPtr.asFunction<
          Cronet_EnginePtr Function(
              Cronet_Engine_StartWithParamsFunc,
              Cronet_Engine_StartNetLogToFileFunc,
              Cronet_Engine_StopNetLogFunc,
              Cronet_Engine_ShutdownFunc,
              Cronet_Engine_GetVersionStringFunc,
              Cronet_Engine_GetDefaultUserAgentFunc,
              Cronet_Engine_AddRequestFinishedListenerFunc,
              Cronet_Engine_RemoveRequestFinishedListenerFunc)>();

  /// ////////////////////
  void Cronet_UrlRequestStatusListener_Destroy(
    Cronet_UrlRequestStatusListenerPtr self,
  ) {
    return _Cronet_UrlRequestStatusListener_Destroy(
      self,
    );
  }

  late final _Cronet_UrlRequestStatusListener_DestroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(Cronet_UrlRequestStatusListenerPtr)>>(
      'Cronet_UrlRequestStatusListener_Destroy');
  late final _Cronet_UrlRequestStatusListener_Destroy =
      _Cronet_UrlRequestStatusListener_DestroyPtr.asFunction<
          void Function(Cronet_UrlRequestStatusListenerPtr)>();

  void Cronet_UrlRequestStatusListener_SetClientContext(
    Cronet_UrlRequestStatusListenerPtr self,
    Cronet_ClientContext client_context,
  ) {
    return _Cronet_UrlRequestStatusListener_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UrlRequestStatusListener_SetClientContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  Cronet_UrlRequestStatusListenerPtr, Cronet_ClientContext)>>(
      'Cronet_UrlRequestStatusListener_SetClientContext');
  late final _Cronet_UrlRequestStatusListener_SetClientContext =
      _Cronet_UrlRequestStatusListener_SetClientContextPtr.asFunction<
          void Function(
              Cronet_UrlRequestStatusListenerPtr, Cronet_ClientContext)>();

  Cronet_ClientContext Cronet_UrlRequestStatusListener_GetClientContext(
    Cronet_UrlRequestStatusListenerPtr self,
  ) {
    return _Cronet_UrlRequestStatusListener_GetClientContext(
      self,
    );
  }

  late final _Cronet_UrlRequestStatusListener_GetClientContextPtr = _lookup<
          ffi.NativeFunction<
              Cronet_ClientContext Function(
                  Cronet_UrlRequestStatusListenerPtr)>>(
      'Cronet_UrlRequestStatusListener_GetClientContext');
  late final _Cronet_UrlRequestStatusListener_GetClientContext =
      _Cronet_UrlRequestStatusListener_GetClientContextPtr.asFunction<
          Cronet_ClientContext Function(Cronet_UrlRequestStatusListenerPtr)>();

  void Cronet_UrlRequestStatusListener_OnStatus(
    Cronet_UrlRequestStatusListenerPtr self,
    int status,
  ) {
    return _Cronet_UrlRequestStatusListener_OnStatus(
      self,
      status,
    );
  }

  late final _Cronet_UrlRequestStatusListener_OnStatusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestStatusListenerPtr,
              ffi.Int32)>>('Cronet_UrlRequestStatusListener_OnStatus');
  late final _Cronet_UrlRequestStatusListener_OnStatus =
      _Cronet_UrlRequestStatusListener_OnStatusPtr.asFunction<
          void Function(Cronet_UrlRequestStatusListenerPtr, int)>();

  Cronet_UrlRequestStatusListenerPtr Cronet_UrlRequestStatusListener_CreateWith(
    Cronet_UrlRequestStatusListener_OnStatusFunc OnStatusFunc,
  ) {
    return _Cronet_UrlRequestStatusListener_CreateWith(
      OnStatusFunc,
    );
  }

  late final _Cronet_UrlRequestStatusListener_CreateWithPtr = _lookup<
          ffi.NativeFunction<
              Cronet_UrlRequestStatusListenerPtr Function(
                  Cronet_UrlRequestStatusListener_OnStatusFunc)>>(
      'Cronet_UrlRequestStatusListener_CreateWith');
  late final _Cronet_UrlRequestStatusListener_CreateWith =
      _Cronet_UrlRequestStatusListener_CreateWithPtr.asFunction<
          Cronet_UrlRequestStatusListenerPtr Function(
              Cronet_UrlRequestStatusListener_OnStatusFunc)>();

  /// ////////////////////
  void Cronet_UrlRequestCallback_Destroy(
    Cronet_UrlRequestCallbackPtr self,
  ) {
    return _Cronet_UrlRequestCallback_Destroy(
      self,
    );
  }

  late final _Cronet_UrlRequestCallback_DestroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_UrlRequestCallbackPtr)>>(
      'Cronet_UrlRequestCallback_Destroy');
  late final _Cronet_UrlRequestCallback_Destroy =
      _Cronet_UrlRequestCallback_DestroyPtr.asFunction<
          void Function(Cronet_UrlRequestCallbackPtr)>();

  void Cronet_UrlRequestCallback_SetClientContext(
    Cronet_UrlRequestCallbackPtr self,
    Cronet_ClientContext client_context,
  ) {
    return _Cronet_UrlRequestCallback_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UrlRequestCallback_SetClientContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  Cronet_UrlRequestCallbackPtr, Cronet_ClientContext)>>(
      'Cronet_UrlRequestCallback_SetClientContext');
  late final _Cronet_UrlRequestCallback_SetClientContext =
      _Cronet_UrlRequestCallback_SetClientContextPtr.asFunction<
          void Function(Cronet_UrlRequestCallbackPtr, Cronet_ClientContext)>();

  Cronet_ClientContext Cronet_UrlRequestCallback_GetClientContext(
    Cronet_UrlRequestCallbackPtr self,
  ) {
    return _Cronet_UrlRequestCallback_GetClientContext(
      self,
    );
  }

  late final _Cronet_UrlRequestCallback_GetClientContextPtr = _lookup<
          ffi.NativeFunction<
              Cronet_ClientContext Function(Cronet_UrlRequestCallbackPtr)>>(
      'Cronet_UrlRequestCallback_GetClientContext');
  late final _Cronet_UrlRequestCallback_GetClientContext =
      _Cronet_UrlRequestCallback_GetClientContextPtr.asFunction<
          Cronet_ClientContext Function(Cronet_UrlRequestCallbackPtr)>();

  void Cronet_UrlRequestCallback_OnRedirectReceived(
    Cronet_UrlRequestCallbackPtr self,
    Cronet_UrlRequestPtr request,
    Cronet_UrlResponseInfoPtr info,
    Cronet_String new_location_url,
  ) {
    return _Cronet_UrlRequestCallback_OnRedirectReceived(
      self,
      request,
      info,
      new_location_url,
    );
  }

  late final _Cronet_UrlRequestCallback_OnRedirectReceivedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Cronet_UrlRequestCallbackPtr,
              Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr,
              Cronet_String)>>('Cronet_UrlRequestCallback_OnRedirectReceived');
  late final _Cronet_UrlRequestCallback_OnRedirectReceived =
      _Cronet_UrlRequestCallback_OnRedirectReceivedPtr.asFunction<
          void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr, Cronet_String)>();

  void Cronet_UrlRequestCallback_OnResponseStarted(
    Cronet_UrlRequestCallbackPtr self,
    Cronet_UrlRequestPtr request,
    Cronet_UrlResponseInfoPtr info,
  ) {
    return _Cronet_UrlRequestCallback_OnResponseStarted(
      self,
      request,
      info,
    );
  }

  late final _Cronet_UrlRequestCallback_OnResponseStartedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(Cronet_UrlRequestCallbackPtr,
                  Cronet_UrlRequestPtr, Cronet_UrlResponseInfoPtr)>>(
      'Cronet_UrlRequestCallback_OnResponseStarted');
  late final _Cronet_UrlRequestCallback_OnResponseStarted =
      _Cronet_UrlRequestCallback_OnResponseStartedPtr.asFunction<
          void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr)>();

  void Cronet_UrlRequestCallback_OnReadCompleted(
    Cronet_UrlRequestCallbackPtr self,
    Cronet_UrlRequestPtr request,
    Cronet_UrlResponseInfoPtr info,
    Cronet_BufferPtr buffer,
    int bytes_read,
  ) {
    return _Cronet_UrlRequestCallback_OnReadCompleted(
      self,
      request,
      info,
      buffer,
      bytes_read,
    );
  }

  late final _Cronet_UrlRequestCallback_OnReadCompletedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Cronet_UrlRequestCallbackPtr,
              Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr,
              Cronet_BufferPtr,
              ffi.Uint64)>>('Cronet_UrlRequestCallback_OnReadCompleted');
  late final _Cronet_UrlRequestCallback_OnReadCompleted =
      _Cronet_UrlRequestCallback_OnReadCompletedPtr.asFunction<
          void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr, Cronet_BufferPtr, int)>();

  void Cronet_UrlRequestCallback_OnSucceeded(
    Cronet_UrlRequestCallbackPtr self,
    Cronet_UrlRequestPtr request,
    Cronet_UrlResponseInfoPtr info,
  ) {
    return _Cronet_UrlRequestCallback_OnSucceeded(
      self,
      request,
      info,
    );
  }

  late final _Cronet_UrlRequestCallback_OnSucceededPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(Cronet_UrlRequestCallbackPtr,
                  Cronet_UrlRequestPtr, Cronet_UrlResponseInfoPtr)>>(
      'Cronet_UrlRequestCallback_OnSucceeded');
  late final _Cronet_UrlRequestCallback_OnSucceeded =
      _Cronet_UrlRequestCallback_OnSucceededPtr.asFunction<
          void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr)>();

  void Cronet_UrlRequestCallback_OnFailed(
    Cronet_UrlRequestCallbackPtr self,
    Cronet_UrlRequestPtr request,
    Cronet_UrlResponseInfoPtr info,
    Cronet_ErrorPtr error,
  ) {
    return _Cronet_UrlRequestCallback_OnFailed(
      self,
      request,
      info,
      error,
    );
  }

  late final _Cronet_UrlRequestCallback_OnFailedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Cronet_UrlRequestCallbackPtr,
              Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr,
              Cronet_ErrorPtr)>>('Cronet_UrlRequestCallback_OnFailed');
  late final _Cronet_UrlRequestCallback_OnFailed =
      _Cronet_UrlRequestCallback_OnFailedPtr.asFunction<
          void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr, Cronet_ErrorPtr)>();

  void Cronet_UrlRequestCallback_OnCanceled(
    Cronet_UrlRequestCallbackPtr self,
    Cronet_UrlRequestPtr request,
    Cronet_UrlResponseInfoPtr info,
  ) {
    return _Cronet_UrlRequestCallback_OnCanceled(
      self,
      request,
      info,
    );
  }

  late final _Cronet_UrlRequestCallback_OnCanceledPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(Cronet_UrlRequestCallbackPtr,
                  Cronet_UrlRequestPtr, Cronet_UrlResponseInfoPtr)>>(
      'Cronet_UrlRequestCallback_OnCanceled');
  late final _Cronet_UrlRequestCallback_OnCanceled =
      _Cronet_UrlRequestCallback_OnCanceledPtr.asFunction<
          void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr)>();

  Cronet_UrlRequestCallbackPtr Cronet_UrlRequestCallback_CreateWith(
    Cronet_UrlRequestCallback_OnRedirectReceivedFunc OnRedirectReceivedFunc,
    Cronet_UrlRequestCallback_OnResponseStartedFunc OnResponseStartedFunc,
    Cronet_UrlRequestCallback_OnReadCompletedFunc OnReadCompletedFunc,
    Cronet_UrlRequestCallback_OnSucceededFunc OnSucceededFunc,
    Cronet_UrlRequestCallback_OnFailedFunc OnFailedFunc,
    Cronet_UrlRequestCallback_OnCanceledFunc OnCanceledFunc,
  ) {
    return _Cronet_UrlRequestCallback_CreateWith(
      OnRedirectReceivedFunc,
      OnResponseStartedFunc,
      OnReadCompletedFunc,
      OnSucceededFunc,
      OnFailedFunc,
      OnCanceledFunc,
    );
  }

  late final _Cronet_UrlRequestCallback_CreateWithPtr = _lookup<
          ffi.NativeFunction<
              Cronet_UrlRequestCallbackPtr Function(
                  Cronet_UrlRequestCallback_OnRedirectReceivedFunc,
                  Cronet_UrlRequestCallback_OnResponseStartedFunc,
                  Cronet_UrlRequestCallback_OnReadCompletedFunc,
                  Cronet_UrlRequestCallback_OnSucceededFunc,
                  Cronet_UrlRequestCallback_OnFailedFunc,
                  Cronet_UrlRequestCallback_OnCanceledFunc)>>(
      'Cronet_UrlRequestCallback_CreateWith');
  late final _Cronet_UrlRequestCallback_CreateWith =
      _Cronet_UrlRequestCallback_CreateWithPtr.asFunction<
          Cronet_UrlRequestCallbackPtr Function(
              Cronet_UrlRequestCallback_OnRedirectReceivedFunc,
              Cronet_UrlRequestCallback_OnResponseStartedFunc,
              Cronet_UrlRequestCallback_OnReadCompletedFunc,
              Cronet_UrlRequestCallback_OnSucceededFunc,
              Cronet_UrlRequestCallback_OnFailedFunc,
              Cronet_UrlRequestCallback_OnCanceledFunc)>();

  /// ////////////////////
  Cronet_UploadDataSinkPtr Cronet_UploadDataSink_Create() {
    return _Cronet_UploadDataSink_Create();
  }

  late final _Cronet_UploadDataSink_CreatePtr =
      _lookup<ffi.NativeFunction<Cronet_UploadDataSinkPtr Function()>>(
          'Cronet_UploadDataSink_Create');
  late final _Cronet_UploadDataSink_Create = _Cronet_UploadDataSink_CreatePtr
      .asFunction<Cronet_UploadDataSinkPtr Function()>();

  void Cronet_UploadDataSink_Destroy(
    Cronet_UploadDataSinkPtr self,
  ) {
    return _Cronet_UploadDataSink_Destroy(
      self,
    );
  }

  late final _Cronet_UploadDataSink_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_UploadDataSinkPtr)>>(
          'Cronet_UploadDataSink_Destroy');
  late final _Cronet_UploadDataSink_Destroy = _Cronet_UploadDataSink_DestroyPtr
      .asFunction<void Function(Cronet_UploadDataSinkPtr)>();

  void Cronet_UploadDataSink_SetClientContext(
    Cronet_UploadDataSinkPtr self,
    Cronet_ClientContext client_context,
  ) {
    return _Cronet_UploadDataSink_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UploadDataSink_SetClientContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UploadDataSinkPtr,
              Cronet_ClientContext)>>('Cronet_UploadDataSink_SetClientContext');
  late final _Cronet_UploadDataSink_SetClientContext =
      _Cronet_UploadDataSink_SetClientContextPtr.asFunction<
          void Function(Cronet_UploadDataSinkPtr, Cronet_ClientContext)>();

  Cronet_ClientContext Cronet_UploadDataSink_GetClientContext(
    Cronet_UploadDataSinkPtr self,
  ) {
    return _Cronet_UploadDataSink_GetClientContext(
      self,
    );
  }

  late final _Cronet_UploadDataSink_GetClientContextPtr = _lookup<
          ffi.NativeFunction<
              Cronet_ClientContext Function(Cronet_UploadDataSinkPtr)>>(
      'Cronet_UploadDataSink_GetClientContext');
  late final _Cronet_UploadDataSink_GetClientContext =
      _Cronet_UploadDataSink_GetClientContextPtr.asFunction<
          Cronet_ClientContext Function(Cronet_UploadDataSinkPtr)>();

  void Cronet_UploadDataSink_OnReadSucceeded(
    Cronet_UploadDataSinkPtr self,
    int bytes_read,
    bool final_chunk,
  ) {
    return _Cronet_UploadDataSink_OnReadSucceeded(
      self,
      bytes_read,
      final_chunk,
    );
  }

  late final _Cronet_UploadDataSink_OnReadSucceededPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UploadDataSinkPtr, ffi.Uint64,
              ffi.Bool)>>('Cronet_UploadDataSink_OnReadSucceeded');
  late final _Cronet_UploadDataSink_OnReadSucceeded =
      _Cronet_UploadDataSink_OnReadSucceededPtr.asFunction<
          void Function(Cronet_UploadDataSinkPtr, int, bool)>();

  void Cronet_UploadDataSink_OnReadError(
    Cronet_UploadDataSinkPtr self,
    Cronet_String error_message,
  ) {
    return _Cronet_UploadDataSink_OnReadError(
      self,
      error_message,
    );
  }

  late final _Cronet_UploadDataSink_OnReadErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UploadDataSinkPtr,
              Cronet_String)>>('Cronet_UploadDataSink_OnReadError');
  late final _Cronet_UploadDataSink_OnReadError =
      _Cronet_UploadDataSink_OnReadErrorPtr.asFunction<
          void Function(Cronet_UploadDataSinkPtr, Cronet_String)>();

  void Cronet_UploadDataSink_OnRewindSucceeded(
    Cronet_UploadDataSinkPtr self,
  ) {
    return _Cronet_UploadDataSink_OnRewindSucceeded(
      self,
    );
  }

  late final _Cronet_UploadDataSink_OnRewindSucceededPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_UploadDataSinkPtr)>>(
          'Cronet_UploadDataSink_OnRewindSucceeded');
  late final _Cronet_UploadDataSink_OnRewindSucceeded =
      _Cronet_UploadDataSink_OnRewindSucceededPtr.asFunction<
          void Function(Cronet_UploadDataSinkPtr)>();

  void Cronet_UploadDataSink_OnRewindError(
    Cronet_UploadDataSinkPtr self,
    Cronet_String error_message,
  ) {
    return _Cronet_UploadDataSink_OnRewindError(
      self,
      error_message,
    );
  }

  late final _Cronet_UploadDataSink_OnRewindErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UploadDataSinkPtr,
              Cronet_String)>>('Cronet_UploadDataSink_OnRewindError');
  late final _Cronet_UploadDataSink_OnRewindError =
      _Cronet_UploadDataSink_OnRewindErrorPtr.asFunction<
          void Function(Cronet_UploadDataSinkPtr, Cronet_String)>();

  Cronet_UploadDataSinkPtr Cronet_UploadDataSink_CreateWith(
    Cronet_UploadDataSink_OnReadSucceededFunc OnReadSucceededFunc,
    Cronet_UploadDataSink_OnReadErrorFunc OnReadErrorFunc,
    Cronet_UploadDataSink_OnRewindSucceededFunc OnRewindSucceededFunc,
    Cronet_UploadDataSink_OnRewindErrorFunc OnRewindErrorFunc,
  ) {
    return _Cronet_UploadDataSink_CreateWith(
      OnReadSucceededFunc,
      OnReadErrorFunc,
      OnRewindSucceededFunc,
      OnRewindErrorFunc,
    );
  }

  late final _Cronet_UploadDataSink_CreateWithPtr = _lookup<
          ffi.NativeFunction<
              Cronet_UploadDataSinkPtr Function(
                  Cronet_UploadDataSink_OnReadSucceededFunc,
                  Cronet_UploadDataSink_OnReadErrorFunc,
                  Cronet_UploadDataSink_OnRewindSucceededFunc,
                  Cronet_UploadDataSink_OnRewindErrorFunc)>>(
      'Cronet_UploadDataSink_CreateWith');
  late final _Cronet_UploadDataSink_CreateWith =
      _Cronet_UploadDataSink_CreateWithPtr.asFunction<
          Cronet_UploadDataSinkPtr Function(
              Cronet_UploadDataSink_OnReadSucceededFunc,
              Cronet_UploadDataSink_OnReadErrorFunc,
              Cronet_UploadDataSink_OnRewindSucceededFunc,
              Cronet_UploadDataSink_OnRewindErrorFunc)>();

  /// ////////////////////
  void Cronet_UploadDataProvider_Destroy(
    Cronet_UploadDataProviderPtr self,
  ) {
    return _Cronet_UploadDataProvider_Destroy(
      self,
    );
  }

  late final _Cronet_UploadDataProvider_DestroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_UploadDataProviderPtr)>>(
      'Cronet_UploadDataProvider_Destroy');
  late final _Cronet_UploadDataProvider_Destroy =
      _Cronet_UploadDataProvider_DestroyPtr.asFunction<
          void Function(Cronet_UploadDataProviderPtr)>();

  void Cronet_UploadDataProvider_SetClientContext(
    Cronet_UploadDataProviderPtr self,
    Cronet_ClientContext client_context,
  ) {
    return _Cronet_UploadDataProvider_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UploadDataProvider_SetClientContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  Cronet_UploadDataProviderPtr, Cronet_ClientContext)>>(
      'Cronet_UploadDataProvider_SetClientContext');
  late final _Cronet_UploadDataProvider_SetClientContext =
      _Cronet_UploadDataProvider_SetClientContextPtr.asFunction<
          void Function(Cronet_UploadDataProviderPtr, Cronet_ClientContext)>();

  Cronet_ClientContext Cronet_UploadDataProvider_GetClientContext(
    Cronet_UploadDataProviderPtr self,
  ) {
    return _Cronet_UploadDataProvider_GetClientContext(
      self,
    );
  }

  late final _Cronet_UploadDataProvider_GetClientContextPtr = _lookup<
          ffi.NativeFunction<
              Cronet_ClientContext Function(Cronet_UploadDataProviderPtr)>>(
      'Cronet_UploadDataProvider_GetClientContext');
  late final _Cronet_UploadDataProvider_GetClientContext =
      _Cronet_UploadDataProvider_GetClientContextPtr.asFunction<
          Cronet_ClientContext Function(Cronet_UploadDataProviderPtr)>();

  int Cronet_UploadDataProvider_GetLength(
    Cronet_UploadDataProviderPtr self,
  ) {
    return _Cronet_UploadDataProvider_GetLength(
      self,
    );
  }

  late final _Cronet_UploadDataProvider_GetLengthPtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(Cronet_UploadDataProviderPtr)>>(
      'Cronet_UploadDataProvider_GetLength');
  late final _Cronet_UploadDataProvider_GetLength =
      _Cronet_UploadDataProvider_GetLengthPtr.asFunction<
          int Function(Cronet_UploadDataProviderPtr)>();

  void Cronet_UploadDataProvider_Read(
    Cronet_UploadDataProviderPtr self,
    Cronet_UploadDataSinkPtr upload_data_sink,
    Cronet_BufferPtr buffer,
  ) {
    return _Cronet_UploadDataProvider_Read(
      self,
      upload_data_sink,
      buffer,
    );
  }

  late final _Cronet_UploadDataProvider_ReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Cronet_UploadDataProviderPtr,
              Cronet_UploadDataSinkPtr,
              Cronet_BufferPtr)>>('Cronet_UploadDataProvider_Read');
  late final _Cronet_UploadDataProvider_Read =
      _Cronet_UploadDataProvider_ReadPtr.asFunction<
          void Function(Cronet_UploadDataProviderPtr, Cronet_UploadDataSinkPtr,
              Cronet_BufferPtr)>();

  void Cronet_UploadDataProvider_Rewind(
    Cronet_UploadDataProviderPtr self,
    Cronet_UploadDataSinkPtr upload_data_sink,
  ) {
    return _Cronet_UploadDataProvider_Rewind(
      self,
      upload_data_sink,
    );
  }

  late final _Cronet_UploadDataProvider_RewindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UploadDataProviderPtr,
              Cronet_UploadDataSinkPtr)>>('Cronet_UploadDataProvider_Rewind');
  late final _Cronet_UploadDataProvider_Rewind =
      _Cronet_UploadDataProvider_RewindPtr.asFunction<
          void Function(
              Cronet_UploadDataProviderPtr, Cronet_UploadDataSinkPtr)>();

  void Cronet_UploadDataProvider_Close(
    Cronet_UploadDataProviderPtr self,
  ) {
    return _Cronet_UploadDataProvider_Close(
      self,
    );
  }

  late final _Cronet_UploadDataProvider_ClosePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_UploadDataProviderPtr)>>(
      'Cronet_UploadDataProvider_Close');
  late final _Cronet_UploadDataProvider_Close =
      _Cronet_UploadDataProvider_ClosePtr.asFunction<
          void Function(Cronet_UploadDataProviderPtr)>();

  Cronet_UploadDataProviderPtr Cronet_UploadDataProvider_CreateWith(
    Cronet_UploadDataProvider_GetLengthFunc GetLengthFunc,
    Cronet_UploadDataProvider_ReadFunc ReadFunc,
    Cronet_UploadDataProvider_RewindFunc RewindFunc,
    Cronet_UploadDataProvider_CloseFunc CloseFunc,
  ) {
    return _Cronet_UploadDataProvider_CreateWith(
      GetLengthFunc,
      ReadFunc,
      RewindFunc,
      CloseFunc,
    );
  }

  late final _Cronet_UploadDataProvider_CreateWithPtr = _lookup<
          ffi.NativeFunction<
              Cronet_UploadDataProviderPtr Function(
                  Cronet_UploadDataProvider_GetLengthFunc,
                  Cronet_UploadDataProvider_ReadFunc,
                  Cronet_UploadDataProvider_RewindFunc,
                  Cronet_UploadDataProvider_CloseFunc)>>(
      'Cronet_UploadDataProvider_CreateWith');
  late final _Cronet_UploadDataProvider_CreateWith =
      _Cronet_UploadDataProvider_CreateWithPtr.asFunction<
          Cronet_UploadDataProviderPtr Function(
              Cronet_UploadDataProvider_GetLengthFunc,
              Cronet_UploadDataProvider_ReadFunc,
              Cronet_UploadDataProvider_RewindFunc,
              Cronet_UploadDataProvider_CloseFunc)>();

  /// ////////////////////
  Cronet_UrlRequestPtr Cronet_UrlRequest_Create() {
    return _Cronet_UrlRequest_Create();
  }

  late final _Cronet_UrlRequest_CreatePtr =
      _lookup<ffi.NativeFunction<Cronet_UrlRequestPtr Function()>>(
          'Cronet_UrlRequest_Create');
  late final _Cronet_UrlRequest_Create = _Cronet_UrlRequest_CreatePtr
      .asFunction<Cronet_UrlRequestPtr Function()>();

  void Cronet_UrlRequest_Destroy(
    Cronet_UrlRequestPtr self,
  ) {
    return _Cronet_UrlRequest_Destroy(
      self,
    );
  }

  late final _Cronet_UrlRequest_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_UrlRequestPtr)>>(
          'Cronet_UrlRequest_Destroy');
  late final _Cronet_UrlRequest_Destroy = _Cronet_UrlRequest_DestroyPtr
      .asFunction<void Function(Cronet_UrlRequestPtr)>();

  void Cronet_UrlRequest_SetClientContext(
    Cronet_UrlRequestPtr self,
    Cronet_ClientContext client_context,
  ) {
    return _Cronet_UrlRequest_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_UrlRequest_SetClientContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestPtr,
              Cronet_ClientContext)>>('Cronet_UrlRequest_SetClientContext');
  late final _Cronet_UrlRequest_SetClientContext =
      _Cronet_UrlRequest_SetClientContextPtr.asFunction<
          void Function(Cronet_UrlRequestPtr, Cronet_ClientContext)>();

  Cronet_ClientContext Cronet_UrlRequest_GetClientContext(
    Cronet_UrlRequestPtr self,
  ) {
    return _Cronet_UrlRequest_GetClientContext(
      self,
    );
  }

  late final _Cronet_UrlRequest_GetClientContextPtr = _lookup<
      ffi.NativeFunction<
          Cronet_ClientContext Function(
              Cronet_UrlRequestPtr)>>('Cronet_UrlRequest_GetClientContext');
  late final _Cronet_UrlRequest_GetClientContext =
      _Cronet_UrlRequest_GetClientContextPtr.asFunction<
          Cronet_ClientContext Function(Cronet_UrlRequestPtr)>();

  int Cronet_UrlRequest_InitWithParams(
    Cronet_UrlRequestPtr self,
    Cronet_EnginePtr engine,
    Cronet_String url,
    Cronet_UrlRequestParamsPtr params,
    Cronet_UrlRequestCallbackPtr callback,
    Cronet_ExecutorPtr executor,
  ) {
    return _Cronet_UrlRequest_InitWithParams(
      self,
      engine,
      url,
      params,
      callback,
      executor,
    );
  }

  late final _Cronet_UrlRequest_InitWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Cronet_UrlRequestPtr,
              Cronet_EnginePtr,
              Cronet_String,
              Cronet_UrlRequestParamsPtr,
              Cronet_UrlRequestCallbackPtr,
              Cronet_ExecutorPtr)>>('Cronet_UrlRequest_InitWithParams');
  late final _Cronet_UrlRequest_InitWithParams =
      _Cronet_UrlRequest_InitWithParamsPtr.asFunction<
          int Function(
              Cronet_UrlRequestPtr,
              Cronet_EnginePtr,
              Cronet_String,
              Cronet_UrlRequestParamsPtr,
              Cronet_UrlRequestCallbackPtr,
              Cronet_ExecutorPtr)>();

  int Cronet_UrlRequest_Start(
    Cronet_UrlRequestPtr self,
  ) {
    return _Cronet_UrlRequest_Start(
      self,
    );
  }

  late final _Cronet_UrlRequest_StartPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Cronet_UrlRequestPtr)>>(
          'Cronet_UrlRequest_Start');
  late final _Cronet_UrlRequest_Start = _Cronet_UrlRequest_StartPtr.asFunction<
      int Function(Cronet_UrlRequestPtr)>();

  int Cronet_UrlRequest_FollowRedirect(
    Cronet_UrlRequestPtr self,
  ) {
    return _Cronet_UrlRequest_FollowRedirect(
      self,
    );
  }

  late final _Cronet_UrlRequest_FollowRedirectPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Cronet_UrlRequestPtr)>>(
          'Cronet_UrlRequest_FollowRedirect');
  late final _Cronet_UrlRequest_FollowRedirect =
      _Cronet_UrlRequest_FollowRedirectPtr.asFunction<
          int Function(Cronet_UrlRequestPtr)>();

  int Cronet_UrlRequest_Read(
    Cronet_UrlRequestPtr self,
    Cronet_BufferPtr buffer,
  ) {
    return _Cronet_UrlRequest_Read(
      self,
      buffer,
    );
  }

  late final _Cronet_UrlRequest_ReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(Cronet_UrlRequestPtr,
              Cronet_BufferPtr)>>('Cronet_UrlRequest_Read');
  late final _Cronet_UrlRequest_Read = _Cronet_UrlRequest_ReadPtr.asFunction<
      int Function(Cronet_UrlRequestPtr, Cronet_BufferPtr)>();

  void Cronet_UrlRequest_Cancel(
    Cronet_UrlRequestPtr self,
  ) {
    return _Cronet_UrlRequest_Cancel(
      self,
    );
  }

  late final _Cronet_UrlRequest_CancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_UrlRequestPtr)>>(
          'Cronet_UrlRequest_Cancel');
  late final _Cronet_UrlRequest_Cancel = _Cronet_UrlRequest_CancelPtr
      .asFunction<void Function(Cronet_UrlRequestPtr)>();

  bool Cronet_UrlRequest_IsDone(
    Cronet_UrlRequestPtr self,
  ) {
    return _Cronet_UrlRequest_IsDone(
      self,
    );
  }

  late final _Cronet_UrlRequest_IsDonePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Cronet_UrlRequestPtr)>>(
          'Cronet_UrlRequest_IsDone');
  late final _Cronet_UrlRequest_IsDone = _Cronet_UrlRequest_IsDonePtr
      .asFunction<bool Function(Cronet_UrlRequestPtr)>();

  void Cronet_UrlRequest_GetStatus(
    Cronet_UrlRequestPtr self,
    Cronet_UrlRequestStatusListenerPtr listener,
  ) {
    return _Cronet_UrlRequest_GetStatus(
      self,
      listener,
    );
  }

  late final _Cronet_UrlRequest_GetStatusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  Cronet_UrlRequestPtr, Cronet_UrlRequestStatusListenerPtr)>>(
      'Cronet_UrlRequest_GetStatus');
  late final _Cronet_UrlRequest_GetStatus =
      _Cronet_UrlRequest_GetStatusPtr.asFunction<
          void Function(
              Cronet_UrlRequestPtr, Cronet_UrlRequestStatusListenerPtr)>();

  Cronet_UrlRequestPtr Cronet_UrlRequest_CreateWith(
    Cronet_UrlRequest_InitWithParamsFunc InitWithParamsFunc,
    Cronet_UrlRequest_StartFunc StartFunc,
    Cronet_UrlRequest_FollowRedirectFunc FollowRedirectFunc,
    Cronet_UrlRequest_ReadFunc ReadFunc,
    Cronet_UrlRequest_CancelFunc CancelFunc,
    Cronet_UrlRequest_IsDoneFunc IsDoneFunc,
    Cronet_UrlRequest_GetStatusFunc GetStatusFunc,
  ) {
    return _Cronet_UrlRequest_CreateWith(
      InitWithParamsFunc,
      StartFunc,
      FollowRedirectFunc,
      ReadFunc,
      CancelFunc,
      IsDoneFunc,
      GetStatusFunc,
    );
  }

  late final _Cronet_UrlRequest_CreateWithPtr = _lookup<
          ffi.NativeFunction<
              Cronet_UrlRequestPtr Function(
                  Cronet_UrlRequest_InitWithParamsFunc,
                  Cronet_UrlRequest_StartFunc,
                  Cronet_UrlRequest_FollowRedirectFunc,
                  Cronet_UrlRequest_ReadFunc,
                  Cronet_UrlRequest_CancelFunc,
                  Cronet_UrlRequest_IsDoneFunc,
                  Cronet_UrlRequest_GetStatusFunc)>>(
      'Cronet_UrlRequest_CreateWith');
  late final _Cronet_UrlRequest_CreateWith =
      _Cronet_UrlRequest_CreateWithPtr.asFunction<
          Cronet_UrlRequestPtr Function(
              Cronet_UrlRequest_InitWithParamsFunc,
              Cronet_UrlRequest_StartFunc,
              Cronet_UrlRequest_FollowRedirectFunc,
              Cronet_UrlRequest_ReadFunc,
              Cronet_UrlRequest_CancelFunc,
              Cronet_UrlRequest_IsDoneFunc,
              Cronet_UrlRequest_GetStatusFunc)>();

  /// ////////////////////
  void Cronet_RequestFinishedInfoListener_Destroy(
    Cronet_RequestFinishedInfoListenerPtr self,
  ) {
    return _Cronet_RequestFinishedInfoListener_Destroy(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfoListener_DestroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(Cronet_RequestFinishedInfoListenerPtr)>>(
      'Cronet_RequestFinishedInfoListener_Destroy');
  late final _Cronet_RequestFinishedInfoListener_Destroy =
      _Cronet_RequestFinishedInfoListener_DestroyPtr.asFunction<
          void Function(Cronet_RequestFinishedInfoListenerPtr)>();

  void Cronet_RequestFinishedInfoListener_SetClientContext(
    Cronet_RequestFinishedInfoListenerPtr self,
    Cronet_ClientContext client_context,
  ) {
    return _Cronet_RequestFinishedInfoListener_SetClientContext(
      self,
      client_context,
    );
  }

  late final _Cronet_RequestFinishedInfoListener_SetClientContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(Cronet_RequestFinishedInfoListenerPtr,
                  Cronet_ClientContext)>>(
      'Cronet_RequestFinishedInfoListener_SetClientContext');
  late final _Cronet_RequestFinishedInfoListener_SetClientContext =
      _Cronet_RequestFinishedInfoListener_SetClientContextPtr.asFunction<
          void Function(
              Cronet_RequestFinishedInfoListenerPtr, Cronet_ClientContext)>();

  Cronet_ClientContext Cronet_RequestFinishedInfoListener_GetClientContext(
    Cronet_RequestFinishedInfoListenerPtr self,
  ) {
    return _Cronet_RequestFinishedInfoListener_GetClientContext(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfoListener_GetClientContextPtr = _lookup<
          ffi.NativeFunction<
              Cronet_ClientContext Function(
                  Cronet_RequestFinishedInfoListenerPtr)>>(
      'Cronet_RequestFinishedInfoListener_GetClientContext');
  late final _Cronet_RequestFinishedInfoListener_GetClientContext =
      _Cronet_RequestFinishedInfoListener_GetClientContextPtr.asFunction<
          Cronet_ClientContext Function(
              Cronet_RequestFinishedInfoListenerPtr)>();

  void Cronet_RequestFinishedInfoListener_OnRequestFinished(
    Cronet_RequestFinishedInfoListenerPtr self,
    Cronet_RequestFinishedInfoPtr request_info,
    Cronet_UrlResponseInfoPtr response_info,
    Cronet_ErrorPtr error,
  ) {
    return _Cronet_RequestFinishedInfoListener_OnRequestFinished(
      self,
      request_info,
      response_info,
      error,
    );
  }

  late final _Cronet_RequestFinishedInfoListener_OnRequestFinishedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  Cronet_RequestFinishedInfoListenerPtr,
                  Cronet_RequestFinishedInfoPtr,
                  Cronet_UrlResponseInfoPtr,
                  Cronet_ErrorPtr)>>(
      'Cronet_RequestFinishedInfoListener_OnRequestFinished');
  late final _Cronet_RequestFinishedInfoListener_OnRequestFinished =
      _Cronet_RequestFinishedInfoListener_OnRequestFinishedPtr.asFunction<
          void Function(
              Cronet_RequestFinishedInfoListenerPtr,
              Cronet_RequestFinishedInfoPtr,
              Cronet_UrlResponseInfoPtr,
              Cronet_ErrorPtr)>();

  Cronet_RequestFinishedInfoListenerPtr
      Cronet_RequestFinishedInfoListener_CreateWith(
    Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc
        OnRequestFinishedFunc,
  ) {
    return _Cronet_RequestFinishedInfoListener_CreateWith(
      OnRequestFinishedFunc,
    );
  }

  late final _Cronet_RequestFinishedInfoListener_CreateWithPtr = _lookup<
          ffi.NativeFunction<
              Cronet_RequestFinishedInfoListenerPtr Function(
                  Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc)>>(
      'Cronet_RequestFinishedInfoListener_CreateWith');
  late final _Cronet_RequestFinishedInfoListener_CreateWith =
      _Cronet_RequestFinishedInfoListener_CreateWithPtr.asFunction<
          Cronet_RequestFinishedInfoListenerPtr Function(
              Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc)>();

  /// ////////////////////
  Cronet_ErrorPtr Cronet_Error_Create() {
    return _Cronet_Error_Create();
  }

  late final _Cronet_Error_CreatePtr =
      _lookup<ffi.NativeFunction<Cronet_ErrorPtr Function()>>(
          'Cronet_Error_Create');
  late final _Cronet_Error_Create =
      _Cronet_Error_CreatePtr.asFunction<Cronet_ErrorPtr Function()>();

  void Cronet_Error_Destroy(
    Cronet_ErrorPtr self,
  ) {
    return _Cronet_Error_Destroy(
      self,
    );
  }

  late final _Cronet_Error_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_ErrorPtr)>>(
          'Cronet_Error_Destroy');
  late final _Cronet_Error_Destroy =
      _Cronet_Error_DestroyPtr.asFunction<void Function(Cronet_ErrorPtr)>();

  void Cronet_Error_error_code_set(
    Cronet_ErrorPtr self,
    int error_code,
  ) {
    return _Cronet_Error_error_code_set(
      self,
      error_code,
    );
  }

  late final _Cronet_Error_error_code_setPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_ErrorPtr, ffi.Int32)>>(
      'Cronet_Error_error_code_set');
  late final _Cronet_Error_error_code_set = _Cronet_Error_error_code_setPtr
      .asFunction<void Function(Cronet_ErrorPtr, int)>();

  void Cronet_Error_message_set(
    Cronet_ErrorPtr self,
    Cronet_String message,
  ) {
    return _Cronet_Error_message_set(
      self,
      message,
    );
  }

  late final _Cronet_Error_message_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Cronet_ErrorPtr, Cronet_String)>>('Cronet_Error_message_set');
  late final _Cronet_Error_message_set = _Cronet_Error_message_setPtr
      .asFunction<void Function(Cronet_ErrorPtr, Cronet_String)>();

  void Cronet_Error_internal_error_code_set(
    Cronet_ErrorPtr self,
    int internal_error_code,
  ) {
    return _Cronet_Error_internal_error_code_set(
      self,
      internal_error_code,
    );
  }

  late final _Cronet_Error_internal_error_code_setPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_ErrorPtr, ffi.Int32)>>(
      'Cronet_Error_internal_error_code_set');
  late final _Cronet_Error_internal_error_code_set =
      _Cronet_Error_internal_error_code_setPtr.asFunction<
          void Function(Cronet_ErrorPtr, int)>();

  void Cronet_Error_immediately_retryable_set(
    Cronet_ErrorPtr self,
    bool immediately_retryable,
  ) {
    return _Cronet_Error_immediately_retryable_set(
      self,
      immediately_retryable,
    );
  }

  late final _Cronet_Error_immediately_retryable_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_ErrorPtr, ffi.Bool)>>(
          'Cronet_Error_immediately_retryable_set');
  late final _Cronet_Error_immediately_retryable_set =
      _Cronet_Error_immediately_retryable_setPtr.asFunction<
          void Function(Cronet_ErrorPtr, bool)>();

  void Cronet_Error_quic_detailed_error_code_set(
    Cronet_ErrorPtr self,
    int quic_detailed_error_code,
  ) {
    return _Cronet_Error_quic_detailed_error_code_set(
      self,
      quic_detailed_error_code,
    );
  }

  late final _Cronet_Error_quic_detailed_error_code_setPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_ErrorPtr, ffi.Int32)>>(
      'Cronet_Error_quic_detailed_error_code_set');
  late final _Cronet_Error_quic_detailed_error_code_set =
      _Cronet_Error_quic_detailed_error_code_setPtr.asFunction<
          void Function(Cronet_ErrorPtr, int)>();

  int Cronet_Error_error_code_get(
    Cronet_ErrorPtr self,
  ) {
    return _Cronet_Error_error_code_get(
      self,
    );
  }

  late final _Cronet_Error_error_code_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Cronet_ErrorPtr)>>(
          'Cronet_Error_error_code_get');
  late final _Cronet_Error_error_code_get = _Cronet_Error_error_code_getPtr
      .asFunction<int Function(Cronet_ErrorPtr)>();

  Cronet_String Cronet_Error_message_get(
    Cronet_ErrorPtr self,
  ) {
    return _Cronet_Error_message_get(
      self,
    );
  }

  late final _Cronet_Error_message_getPtr =
      _lookup<ffi.NativeFunction<Cronet_String Function(Cronet_ErrorPtr)>>(
          'Cronet_Error_message_get');
  late final _Cronet_Error_message_get = _Cronet_Error_message_getPtr
      .asFunction<Cronet_String Function(Cronet_ErrorPtr)>();

  int Cronet_Error_internal_error_code_get(
    Cronet_ErrorPtr self,
  ) {
    return _Cronet_Error_internal_error_code_get(
      self,
    );
  }

  late final _Cronet_Error_internal_error_code_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Cronet_ErrorPtr)>>(
          'Cronet_Error_internal_error_code_get');
  late final _Cronet_Error_internal_error_code_get =
      _Cronet_Error_internal_error_code_getPtr.asFunction<
          int Function(Cronet_ErrorPtr)>();

  bool Cronet_Error_immediately_retryable_get(
    Cronet_ErrorPtr self,
  ) {
    return _Cronet_Error_immediately_retryable_get(
      self,
    );
  }

  late final _Cronet_Error_immediately_retryable_getPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Cronet_ErrorPtr)>>(
          'Cronet_Error_immediately_retryable_get');
  late final _Cronet_Error_immediately_retryable_get =
      _Cronet_Error_immediately_retryable_getPtr.asFunction<
          bool Function(Cronet_ErrorPtr)>();

  int Cronet_Error_quic_detailed_error_code_get(
    Cronet_ErrorPtr self,
  ) {
    return _Cronet_Error_quic_detailed_error_code_get(
      self,
    );
  }

  late final _Cronet_Error_quic_detailed_error_code_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Cronet_ErrorPtr)>>(
          'Cronet_Error_quic_detailed_error_code_get');
  late final _Cronet_Error_quic_detailed_error_code_get =
      _Cronet_Error_quic_detailed_error_code_getPtr.asFunction<
          int Function(Cronet_ErrorPtr)>();

  /// ////////////////////
  Cronet_QuicHintPtr Cronet_QuicHint_Create() {
    return _Cronet_QuicHint_Create();
  }

  late final _Cronet_QuicHint_CreatePtr =
      _lookup<ffi.NativeFunction<Cronet_QuicHintPtr Function()>>(
          'Cronet_QuicHint_Create');
  late final _Cronet_QuicHint_Create =
      _Cronet_QuicHint_CreatePtr.asFunction<Cronet_QuicHintPtr Function()>();

  void Cronet_QuicHint_Destroy(
    Cronet_QuicHintPtr self,
  ) {
    return _Cronet_QuicHint_Destroy(
      self,
    );
  }

  late final _Cronet_QuicHint_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_QuicHintPtr)>>(
          'Cronet_QuicHint_Destroy');
  late final _Cronet_QuicHint_Destroy = _Cronet_QuicHint_DestroyPtr.asFunction<
      void Function(Cronet_QuicHintPtr)>();

  void Cronet_QuicHint_host_set(
    Cronet_QuicHintPtr self,
    Cronet_String host,
  ) {
    return _Cronet_QuicHint_host_set(
      self,
      host,
    );
  }

  late final _Cronet_QuicHint_host_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Cronet_QuicHintPtr, Cronet_String)>>('Cronet_QuicHint_host_set');
  late final _Cronet_QuicHint_host_set = _Cronet_QuicHint_host_setPtr
      .asFunction<void Function(Cronet_QuicHintPtr, Cronet_String)>();

  void Cronet_QuicHint_port_set(
    Cronet_QuicHintPtr self,
    int port,
  ) {
    return _Cronet_QuicHint_port_set(
      self,
      port,
    );
  }

  late final _Cronet_QuicHint_port_setPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_QuicHintPtr, ffi.Int32)>>(
      'Cronet_QuicHint_port_set');
  late final _Cronet_QuicHint_port_set = _Cronet_QuicHint_port_setPtr
      .asFunction<void Function(Cronet_QuicHintPtr, int)>();

  void Cronet_QuicHint_alternate_port_set(
    Cronet_QuicHintPtr self,
    int alternate_port,
  ) {
    return _Cronet_QuicHint_alternate_port_set(
      self,
      alternate_port,
    );
  }

  late final _Cronet_QuicHint_alternate_port_setPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_QuicHintPtr, ffi.Int32)>>(
      'Cronet_QuicHint_alternate_port_set');
  late final _Cronet_QuicHint_alternate_port_set =
      _Cronet_QuicHint_alternate_port_setPtr.asFunction<
          void Function(Cronet_QuicHintPtr, int)>();

  Cronet_String Cronet_QuicHint_host_get(
    Cronet_QuicHintPtr self,
  ) {
    return _Cronet_QuicHint_host_get(
      self,
    );
  }

  late final _Cronet_QuicHint_host_getPtr =
      _lookup<ffi.NativeFunction<Cronet_String Function(Cronet_QuicHintPtr)>>(
          'Cronet_QuicHint_host_get');
  late final _Cronet_QuicHint_host_get = _Cronet_QuicHint_host_getPtr
      .asFunction<Cronet_String Function(Cronet_QuicHintPtr)>();

  int Cronet_QuicHint_port_get(
    Cronet_QuicHintPtr self,
  ) {
    return _Cronet_QuicHint_port_get(
      self,
    );
  }

  late final _Cronet_QuicHint_port_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Cronet_QuicHintPtr)>>(
          'Cronet_QuicHint_port_get');
  late final _Cronet_QuicHint_port_get = _Cronet_QuicHint_port_getPtr
      .asFunction<int Function(Cronet_QuicHintPtr)>();

  int Cronet_QuicHint_alternate_port_get(
    Cronet_QuicHintPtr self,
  ) {
    return _Cronet_QuicHint_alternate_port_get(
      self,
    );
  }

  late final _Cronet_QuicHint_alternate_port_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Cronet_QuicHintPtr)>>(
          'Cronet_QuicHint_alternate_port_get');
  late final _Cronet_QuicHint_alternate_port_get =
      _Cronet_QuicHint_alternate_port_getPtr.asFunction<
          int Function(Cronet_QuicHintPtr)>();

  /// ////////////////////
  Cronet_PublicKeyPinsPtr Cronet_PublicKeyPins_Create() {
    return _Cronet_PublicKeyPins_Create();
  }

  late final _Cronet_PublicKeyPins_CreatePtr =
      _lookup<ffi.NativeFunction<Cronet_PublicKeyPinsPtr Function()>>(
          'Cronet_PublicKeyPins_Create');
  late final _Cronet_PublicKeyPins_Create = _Cronet_PublicKeyPins_CreatePtr
      .asFunction<Cronet_PublicKeyPinsPtr Function()>();

  void Cronet_PublicKeyPins_Destroy(
    Cronet_PublicKeyPinsPtr self,
  ) {
    return _Cronet_PublicKeyPins_Destroy(
      self,
    );
  }

  late final _Cronet_PublicKeyPins_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_PublicKeyPinsPtr)>>(
          'Cronet_PublicKeyPins_Destroy');
  late final _Cronet_PublicKeyPins_Destroy = _Cronet_PublicKeyPins_DestroyPtr
      .asFunction<void Function(Cronet_PublicKeyPinsPtr)>();

  void Cronet_PublicKeyPins_host_set(
    Cronet_PublicKeyPinsPtr self,
    Cronet_String host,
  ) {
    return _Cronet_PublicKeyPins_host_set(
      self,
      host,
    );
  }

  late final _Cronet_PublicKeyPins_host_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_PublicKeyPinsPtr,
              Cronet_String)>>('Cronet_PublicKeyPins_host_set');
  late final _Cronet_PublicKeyPins_host_set = _Cronet_PublicKeyPins_host_setPtr
      .asFunction<void Function(Cronet_PublicKeyPinsPtr, Cronet_String)>();

  void Cronet_PublicKeyPins_pins_sha256_add(
    Cronet_PublicKeyPinsPtr self,
    Cronet_String element,
  ) {
    return _Cronet_PublicKeyPins_pins_sha256_add(
      self,
      element,
    );
  }

  late final _Cronet_PublicKeyPins_pins_sha256_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_PublicKeyPinsPtr,
              Cronet_String)>>('Cronet_PublicKeyPins_pins_sha256_add');
  late final _Cronet_PublicKeyPins_pins_sha256_add =
      _Cronet_PublicKeyPins_pins_sha256_addPtr.asFunction<
          void Function(Cronet_PublicKeyPinsPtr, Cronet_String)>();

  void Cronet_PublicKeyPins_include_subdomains_set(
    Cronet_PublicKeyPinsPtr self,
    bool include_subdomains,
  ) {
    return _Cronet_PublicKeyPins_include_subdomains_set(
      self,
      include_subdomains,
    );
  }

  late final _Cronet_PublicKeyPins_include_subdomains_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_PublicKeyPinsPtr,
              ffi.Bool)>>('Cronet_PublicKeyPins_include_subdomains_set');
  late final _Cronet_PublicKeyPins_include_subdomains_set =
      _Cronet_PublicKeyPins_include_subdomains_setPtr.asFunction<
          void Function(Cronet_PublicKeyPinsPtr, bool)>();

  void Cronet_PublicKeyPins_expiration_date_set(
    Cronet_PublicKeyPinsPtr self,
    int expiration_date,
  ) {
    return _Cronet_PublicKeyPins_expiration_date_set(
      self,
      expiration_date,
    );
  }

  late final _Cronet_PublicKeyPins_expiration_date_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_PublicKeyPinsPtr,
              ffi.Int64)>>('Cronet_PublicKeyPins_expiration_date_set');
  late final _Cronet_PublicKeyPins_expiration_date_set =
      _Cronet_PublicKeyPins_expiration_date_setPtr.asFunction<
          void Function(Cronet_PublicKeyPinsPtr, int)>();

  Cronet_String Cronet_PublicKeyPins_host_get(
    Cronet_PublicKeyPinsPtr self,
  ) {
    return _Cronet_PublicKeyPins_host_get(
      self,
    );
  }

  late final _Cronet_PublicKeyPins_host_getPtr = _lookup<
          ffi.NativeFunction<Cronet_String Function(Cronet_PublicKeyPinsPtr)>>(
      'Cronet_PublicKeyPins_host_get');
  late final _Cronet_PublicKeyPins_host_get = _Cronet_PublicKeyPins_host_getPtr
      .asFunction<Cronet_String Function(Cronet_PublicKeyPinsPtr)>();

  int Cronet_PublicKeyPins_pins_sha256_size(
    Cronet_PublicKeyPinsPtr self,
  ) {
    return _Cronet_PublicKeyPins_pins_sha256_size(
      self,
    );
  }

  late final _Cronet_PublicKeyPins_pins_sha256_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(Cronet_PublicKeyPinsPtr)>>(
          'Cronet_PublicKeyPins_pins_sha256_size');
  late final _Cronet_PublicKeyPins_pins_sha256_size =
      _Cronet_PublicKeyPins_pins_sha256_sizePtr.asFunction<
          int Function(Cronet_PublicKeyPinsPtr)>();

  Cronet_String Cronet_PublicKeyPins_pins_sha256_at(
    Cronet_PublicKeyPinsPtr self,
    int index,
  ) {
    return _Cronet_PublicKeyPins_pins_sha256_at(
      self,
      index,
    );
  }

  late final _Cronet_PublicKeyPins_pins_sha256_atPtr = _lookup<
      ffi.NativeFunction<
          Cronet_String Function(Cronet_PublicKeyPinsPtr,
              ffi.Uint32)>>('Cronet_PublicKeyPins_pins_sha256_at');
  late final _Cronet_PublicKeyPins_pins_sha256_at =
      _Cronet_PublicKeyPins_pins_sha256_atPtr.asFunction<
          Cronet_String Function(Cronet_PublicKeyPinsPtr, int)>();

  void Cronet_PublicKeyPins_pins_sha256_clear(
    Cronet_PublicKeyPinsPtr self,
  ) {
    return _Cronet_PublicKeyPins_pins_sha256_clear(
      self,
    );
  }

  late final _Cronet_PublicKeyPins_pins_sha256_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_PublicKeyPinsPtr)>>(
          'Cronet_PublicKeyPins_pins_sha256_clear');
  late final _Cronet_PublicKeyPins_pins_sha256_clear =
      _Cronet_PublicKeyPins_pins_sha256_clearPtr.asFunction<
          void Function(Cronet_PublicKeyPinsPtr)>();

  bool Cronet_PublicKeyPins_include_subdomains_get(
    Cronet_PublicKeyPinsPtr self,
  ) {
    return _Cronet_PublicKeyPins_include_subdomains_get(
      self,
    );
  }

  late final _Cronet_PublicKeyPins_include_subdomains_getPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Cronet_PublicKeyPinsPtr)>>(
          'Cronet_PublicKeyPins_include_subdomains_get');
  late final _Cronet_PublicKeyPins_include_subdomains_get =
      _Cronet_PublicKeyPins_include_subdomains_getPtr.asFunction<
          bool Function(Cronet_PublicKeyPinsPtr)>();

  int Cronet_PublicKeyPins_expiration_date_get(
    Cronet_PublicKeyPinsPtr self,
  ) {
    return _Cronet_PublicKeyPins_expiration_date_get(
      self,
    );
  }

  late final _Cronet_PublicKeyPins_expiration_date_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(Cronet_PublicKeyPinsPtr)>>(
          'Cronet_PublicKeyPins_expiration_date_get');
  late final _Cronet_PublicKeyPins_expiration_date_get =
      _Cronet_PublicKeyPins_expiration_date_getPtr.asFunction<
          int Function(Cronet_PublicKeyPinsPtr)>();

  /// ////////////////////
  Cronet_EngineParamsPtr Cronet_EngineParams_Create() {
    return _Cronet_EngineParams_Create();
  }

  late final _Cronet_EngineParams_CreatePtr =
      _lookup<ffi.NativeFunction<Cronet_EngineParamsPtr Function()>>(
          'Cronet_EngineParams_Create');
  late final _Cronet_EngineParams_Create = _Cronet_EngineParams_CreatePtr
      .asFunction<Cronet_EngineParamsPtr Function()>();

  void Cronet_EngineParams_Destroy(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_Destroy(
      self,
    );
  }

  late final _Cronet_EngineParams_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_EngineParamsPtr)>>(
          'Cronet_EngineParams_Destroy');
  late final _Cronet_EngineParams_Destroy = _Cronet_EngineParams_DestroyPtr
      .asFunction<void Function(Cronet_EngineParamsPtr)>();

  void Cronet_EngineParams_enable_check_result_set(
    Cronet_EngineParamsPtr self,
    bool enable_check_result,
  ) {
    return _Cronet_EngineParams_enable_check_result_set(
      self,
      enable_check_result,
    );
  }

  late final _Cronet_EngineParams_enable_check_result_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_EngineParamsPtr,
              ffi.Bool)>>('Cronet_EngineParams_enable_check_result_set');
  late final _Cronet_EngineParams_enable_check_result_set =
      _Cronet_EngineParams_enable_check_result_setPtr.asFunction<
          void Function(Cronet_EngineParamsPtr, bool)>();

  void Cronet_EngineParams_user_agent_set(
    Cronet_EngineParamsPtr self,
    Cronet_String user_agent,
  ) {
    return _Cronet_EngineParams_user_agent_set(
      self,
      user_agent,
    );
  }

  late final _Cronet_EngineParams_user_agent_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_EngineParamsPtr,
              Cronet_String)>>('Cronet_EngineParams_user_agent_set');
  late final _Cronet_EngineParams_user_agent_set =
      _Cronet_EngineParams_user_agent_setPtr.asFunction<
          void Function(Cronet_EngineParamsPtr, Cronet_String)>();

  void Cronet_EngineParams_accept_language_set(
    Cronet_EngineParamsPtr self,
    Cronet_String accept_language,
  ) {
    return _Cronet_EngineParams_accept_language_set(
      self,
      accept_language,
    );
  }

  late final _Cronet_EngineParams_accept_language_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_EngineParamsPtr,
              Cronet_String)>>('Cronet_EngineParams_accept_language_set');
  late final _Cronet_EngineParams_accept_language_set =
      _Cronet_EngineParams_accept_language_setPtr.asFunction<
          void Function(Cronet_EngineParamsPtr, Cronet_String)>();

  void Cronet_EngineParams_storage_path_set(
    Cronet_EngineParamsPtr self,
    Cronet_String storage_path,
  ) {
    return _Cronet_EngineParams_storage_path_set(
      self,
      storage_path,
    );
  }

  late final _Cronet_EngineParams_storage_path_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_EngineParamsPtr,
              Cronet_String)>>('Cronet_EngineParams_storage_path_set');
  late final _Cronet_EngineParams_storage_path_set =
      _Cronet_EngineParams_storage_path_setPtr.asFunction<
          void Function(Cronet_EngineParamsPtr, Cronet_String)>();

  void Cronet_EngineParams_enable_quic_set(
    Cronet_EngineParamsPtr self,
    bool enable_quic,
  ) {
    return _Cronet_EngineParams_enable_quic_set(
      self,
      enable_quic,
    );
  }

  late final _Cronet_EngineParams_enable_quic_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_EngineParamsPtr,
              ffi.Bool)>>('Cronet_EngineParams_enable_quic_set');
  late final _Cronet_EngineParams_enable_quic_set =
      _Cronet_EngineParams_enable_quic_setPtr.asFunction<
          void Function(Cronet_EngineParamsPtr, bool)>();

  void Cronet_EngineParams_enable_http2_set(
    Cronet_EngineParamsPtr self,
    bool enable_http2,
  ) {
    return _Cronet_EngineParams_enable_http2_set(
      self,
      enable_http2,
    );
  }

  late final _Cronet_EngineParams_enable_http2_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_EngineParamsPtr,
              ffi.Bool)>>('Cronet_EngineParams_enable_http2_set');
  late final _Cronet_EngineParams_enable_http2_set =
      _Cronet_EngineParams_enable_http2_setPtr.asFunction<
          void Function(Cronet_EngineParamsPtr, bool)>();

  void Cronet_EngineParams_enable_brotli_set(
    Cronet_EngineParamsPtr self,
    bool enable_brotli,
  ) {
    return _Cronet_EngineParams_enable_brotli_set(
      self,
      enable_brotli,
    );
  }

  late final _Cronet_EngineParams_enable_brotli_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_EngineParamsPtr,
              ffi.Bool)>>('Cronet_EngineParams_enable_brotli_set');
  late final _Cronet_EngineParams_enable_brotli_set =
      _Cronet_EngineParams_enable_brotli_setPtr.asFunction<
          void Function(Cronet_EngineParamsPtr, bool)>();

  void Cronet_EngineParams_http_cache_mode_set(
    Cronet_EngineParamsPtr self,
    int http_cache_mode,
  ) {
    return _Cronet_EngineParams_http_cache_mode_set(
      self,
      http_cache_mode,
    );
  }

  late final _Cronet_EngineParams_http_cache_mode_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_EngineParamsPtr,
              ffi.Int32)>>('Cronet_EngineParams_http_cache_mode_set');
  late final _Cronet_EngineParams_http_cache_mode_set =
      _Cronet_EngineParams_http_cache_mode_setPtr.asFunction<
          void Function(Cronet_EngineParamsPtr, int)>();

  void Cronet_EngineParams_http_cache_max_size_set(
    Cronet_EngineParamsPtr self,
    int http_cache_max_size,
  ) {
    return _Cronet_EngineParams_http_cache_max_size_set(
      self,
      http_cache_max_size,
    );
  }

  late final _Cronet_EngineParams_http_cache_max_size_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_EngineParamsPtr,
              ffi.Int64)>>('Cronet_EngineParams_http_cache_max_size_set');
  late final _Cronet_EngineParams_http_cache_max_size_set =
      _Cronet_EngineParams_http_cache_max_size_setPtr.asFunction<
          void Function(Cronet_EngineParamsPtr, int)>();

  void Cronet_EngineParams_quic_hints_add(
    Cronet_EngineParamsPtr self,
    Cronet_QuicHintPtr element,
  ) {
    return _Cronet_EngineParams_quic_hints_add(
      self,
      element,
    );
  }

  late final _Cronet_EngineParams_quic_hints_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_EngineParamsPtr,
              Cronet_QuicHintPtr)>>('Cronet_EngineParams_quic_hints_add');
  late final _Cronet_EngineParams_quic_hints_add =
      _Cronet_EngineParams_quic_hints_addPtr.asFunction<
          void Function(Cronet_EngineParamsPtr, Cronet_QuicHintPtr)>();

  void Cronet_EngineParams_public_key_pins_add(
    Cronet_EngineParamsPtr self,
    Cronet_PublicKeyPinsPtr element,
  ) {
    return _Cronet_EngineParams_public_key_pins_add(
      self,
      element,
    );
  }

  late final _Cronet_EngineParams_public_key_pins_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  Cronet_EngineParamsPtr, Cronet_PublicKeyPinsPtr)>>(
      'Cronet_EngineParams_public_key_pins_add');
  late final _Cronet_EngineParams_public_key_pins_add =
      _Cronet_EngineParams_public_key_pins_addPtr.asFunction<
          void Function(Cronet_EngineParamsPtr, Cronet_PublicKeyPinsPtr)>();

  void
      Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set(
    Cronet_EngineParamsPtr self,
    bool enable_public_key_pinning_bypass_for_local_trust_anchors,
  ) {
    return _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set(
      self,
      enable_public_key_pinning_bypass_for_local_trust_anchors,
    );
  }

  late final _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_setPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(Cronet_EngineParamsPtr, ffi.Bool)>>(
          'Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set');
  late final _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set =
      _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_setPtr
          .asFunction<void Function(Cronet_EngineParamsPtr, bool)>();

  void Cronet_EngineParams_network_thread_priority_set(
    Cronet_EngineParamsPtr self,
    double network_thread_priority,
  ) {
    return _Cronet_EngineParams_network_thread_priority_set(
      self,
      network_thread_priority,
    );
  }

  late final _Cronet_EngineParams_network_thread_priority_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_EngineParamsPtr,
              ffi.Double)>>('Cronet_EngineParams_network_thread_priority_set');
  late final _Cronet_EngineParams_network_thread_priority_set =
      _Cronet_EngineParams_network_thread_priority_setPtr.asFunction<
          void Function(Cronet_EngineParamsPtr, double)>();

  void Cronet_EngineParams_experimental_options_set(
    Cronet_EngineParamsPtr self,
    Cronet_String experimental_options,
  ) {
    return _Cronet_EngineParams_experimental_options_set(
      self,
      experimental_options,
    );
  }

  late final _Cronet_EngineParams_experimental_options_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_EngineParamsPtr,
              Cronet_String)>>('Cronet_EngineParams_experimental_options_set');
  late final _Cronet_EngineParams_experimental_options_set =
      _Cronet_EngineParams_experimental_options_setPtr.asFunction<
          void Function(Cronet_EngineParamsPtr, Cronet_String)>();

  bool Cronet_EngineParams_enable_check_result_get(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_enable_check_result_get(
      self,
    );
  }

  late final _Cronet_EngineParams_enable_check_result_getPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Cronet_EngineParamsPtr)>>(
          'Cronet_EngineParams_enable_check_result_get');
  late final _Cronet_EngineParams_enable_check_result_get =
      _Cronet_EngineParams_enable_check_result_getPtr.asFunction<
          bool Function(Cronet_EngineParamsPtr)>();

  Cronet_String Cronet_EngineParams_user_agent_get(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_user_agent_get(
      self,
    );
  }

  late final _Cronet_EngineParams_user_agent_getPtr = _lookup<
          ffi.NativeFunction<Cronet_String Function(Cronet_EngineParamsPtr)>>(
      'Cronet_EngineParams_user_agent_get');
  late final _Cronet_EngineParams_user_agent_get =
      _Cronet_EngineParams_user_agent_getPtr.asFunction<
          Cronet_String Function(Cronet_EngineParamsPtr)>();

  Cronet_String Cronet_EngineParams_accept_language_get(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_accept_language_get(
      self,
    );
  }

  late final _Cronet_EngineParams_accept_language_getPtr = _lookup<
          ffi.NativeFunction<Cronet_String Function(Cronet_EngineParamsPtr)>>(
      'Cronet_EngineParams_accept_language_get');
  late final _Cronet_EngineParams_accept_language_get =
      _Cronet_EngineParams_accept_language_getPtr.asFunction<
          Cronet_String Function(Cronet_EngineParamsPtr)>();

  Cronet_String Cronet_EngineParams_storage_path_get(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_storage_path_get(
      self,
    );
  }

  late final _Cronet_EngineParams_storage_path_getPtr = _lookup<
          ffi.NativeFunction<Cronet_String Function(Cronet_EngineParamsPtr)>>(
      'Cronet_EngineParams_storage_path_get');
  late final _Cronet_EngineParams_storage_path_get =
      _Cronet_EngineParams_storage_path_getPtr.asFunction<
          Cronet_String Function(Cronet_EngineParamsPtr)>();

  bool Cronet_EngineParams_enable_quic_get(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_enable_quic_get(
      self,
    );
  }

  late final _Cronet_EngineParams_enable_quic_getPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Cronet_EngineParamsPtr)>>(
          'Cronet_EngineParams_enable_quic_get');
  late final _Cronet_EngineParams_enable_quic_get =
      _Cronet_EngineParams_enable_quic_getPtr.asFunction<
          bool Function(Cronet_EngineParamsPtr)>();

  bool Cronet_EngineParams_enable_http2_get(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_enable_http2_get(
      self,
    );
  }

  late final _Cronet_EngineParams_enable_http2_getPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Cronet_EngineParamsPtr)>>(
          'Cronet_EngineParams_enable_http2_get');
  late final _Cronet_EngineParams_enable_http2_get =
      _Cronet_EngineParams_enable_http2_getPtr.asFunction<
          bool Function(Cronet_EngineParamsPtr)>();

  bool Cronet_EngineParams_enable_brotli_get(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_enable_brotli_get(
      self,
    );
  }

  late final _Cronet_EngineParams_enable_brotli_getPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Cronet_EngineParamsPtr)>>(
          'Cronet_EngineParams_enable_brotli_get');
  late final _Cronet_EngineParams_enable_brotli_get =
      _Cronet_EngineParams_enable_brotli_getPtr.asFunction<
          bool Function(Cronet_EngineParamsPtr)>();

  int Cronet_EngineParams_http_cache_mode_get(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_http_cache_mode_get(
      self,
    );
  }

  late final _Cronet_EngineParams_http_cache_mode_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Cronet_EngineParamsPtr)>>(
          'Cronet_EngineParams_http_cache_mode_get');
  late final _Cronet_EngineParams_http_cache_mode_get =
      _Cronet_EngineParams_http_cache_mode_getPtr.asFunction<
          int Function(Cronet_EngineParamsPtr)>();

  int Cronet_EngineParams_http_cache_max_size_get(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_http_cache_max_size_get(
      self,
    );
  }

  late final _Cronet_EngineParams_http_cache_max_size_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(Cronet_EngineParamsPtr)>>(
          'Cronet_EngineParams_http_cache_max_size_get');
  late final _Cronet_EngineParams_http_cache_max_size_get =
      _Cronet_EngineParams_http_cache_max_size_getPtr.asFunction<
          int Function(Cronet_EngineParamsPtr)>();

  int Cronet_EngineParams_quic_hints_size(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_quic_hints_size(
      self,
    );
  }

  late final _Cronet_EngineParams_quic_hints_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(Cronet_EngineParamsPtr)>>(
          'Cronet_EngineParams_quic_hints_size');
  late final _Cronet_EngineParams_quic_hints_size =
      _Cronet_EngineParams_quic_hints_sizePtr.asFunction<
          int Function(Cronet_EngineParamsPtr)>();

  Cronet_QuicHintPtr Cronet_EngineParams_quic_hints_at(
    Cronet_EngineParamsPtr self,
    int index,
  ) {
    return _Cronet_EngineParams_quic_hints_at(
      self,
      index,
    );
  }

  late final _Cronet_EngineParams_quic_hints_atPtr = _lookup<
      ffi.NativeFunction<
          Cronet_QuicHintPtr Function(Cronet_EngineParamsPtr,
              ffi.Uint32)>>('Cronet_EngineParams_quic_hints_at');
  late final _Cronet_EngineParams_quic_hints_at =
      _Cronet_EngineParams_quic_hints_atPtr.asFunction<
          Cronet_QuicHintPtr Function(Cronet_EngineParamsPtr, int)>();

  void Cronet_EngineParams_quic_hints_clear(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_quic_hints_clear(
      self,
    );
  }

  late final _Cronet_EngineParams_quic_hints_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_EngineParamsPtr)>>(
          'Cronet_EngineParams_quic_hints_clear');
  late final _Cronet_EngineParams_quic_hints_clear =
      _Cronet_EngineParams_quic_hints_clearPtr.asFunction<
          void Function(Cronet_EngineParamsPtr)>();

  int Cronet_EngineParams_public_key_pins_size(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_public_key_pins_size(
      self,
    );
  }

  late final _Cronet_EngineParams_public_key_pins_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(Cronet_EngineParamsPtr)>>(
          'Cronet_EngineParams_public_key_pins_size');
  late final _Cronet_EngineParams_public_key_pins_size =
      _Cronet_EngineParams_public_key_pins_sizePtr.asFunction<
          int Function(Cronet_EngineParamsPtr)>();

  Cronet_PublicKeyPinsPtr Cronet_EngineParams_public_key_pins_at(
    Cronet_EngineParamsPtr self,
    int index,
  ) {
    return _Cronet_EngineParams_public_key_pins_at(
      self,
      index,
    );
  }

  late final _Cronet_EngineParams_public_key_pins_atPtr = _lookup<
      ffi.NativeFunction<
          Cronet_PublicKeyPinsPtr Function(Cronet_EngineParamsPtr,
              ffi.Uint32)>>('Cronet_EngineParams_public_key_pins_at');
  late final _Cronet_EngineParams_public_key_pins_at =
      _Cronet_EngineParams_public_key_pins_atPtr.asFunction<
          Cronet_PublicKeyPinsPtr Function(Cronet_EngineParamsPtr, int)>();

  void Cronet_EngineParams_public_key_pins_clear(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_public_key_pins_clear(
      self,
    );
  }

  late final _Cronet_EngineParams_public_key_pins_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_EngineParamsPtr)>>(
          'Cronet_EngineParams_public_key_pins_clear');
  late final _Cronet_EngineParams_public_key_pins_clear =
      _Cronet_EngineParams_public_key_pins_clearPtr.asFunction<
          void Function(Cronet_EngineParamsPtr)>();

  bool
      Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get(
      self,
    );
  }

  late final _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_getPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Cronet_EngineParamsPtr)>>(
          'Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get');
  late final _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get =
      _Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_getPtr
          .asFunction<bool Function(Cronet_EngineParamsPtr)>();

  double Cronet_EngineParams_network_thread_priority_get(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_network_thread_priority_get(
      self,
    );
  }

  late final _Cronet_EngineParams_network_thread_priority_getPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(Cronet_EngineParamsPtr)>>(
          'Cronet_EngineParams_network_thread_priority_get');
  late final _Cronet_EngineParams_network_thread_priority_get =
      _Cronet_EngineParams_network_thread_priority_getPtr.asFunction<
          double Function(Cronet_EngineParamsPtr)>();

  Cronet_String Cronet_EngineParams_experimental_options_get(
    Cronet_EngineParamsPtr self,
  ) {
    return _Cronet_EngineParams_experimental_options_get(
      self,
    );
  }

  late final _Cronet_EngineParams_experimental_options_getPtr = _lookup<
          ffi.NativeFunction<Cronet_String Function(Cronet_EngineParamsPtr)>>(
      'Cronet_EngineParams_experimental_options_get');
  late final _Cronet_EngineParams_experimental_options_get =
      _Cronet_EngineParams_experimental_options_getPtr.asFunction<
          Cronet_String Function(Cronet_EngineParamsPtr)>();

  /// ////////////////////
  Cronet_HttpHeaderPtr Cronet_HttpHeader_Create() {
    return _Cronet_HttpHeader_Create();
  }

  late final _Cronet_HttpHeader_CreatePtr =
      _lookup<ffi.NativeFunction<Cronet_HttpHeaderPtr Function()>>(
          'Cronet_HttpHeader_Create');
  late final _Cronet_HttpHeader_Create = _Cronet_HttpHeader_CreatePtr
      .asFunction<Cronet_HttpHeaderPtr Function()>();

  void Cronet_HttpHeader_Destroy(
    Cronet_HttpHeaderPtr self,
  ) {
    return _Cronet_HttpHeader_Destroy(
      self,
    );
  }

  late final _Cronet_HttpHeader_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_HttpHeaderPtr)>>(
          'Cronet_HttpHeader_Destroy');
  late final _Cronet_HttpHeader_Destroy = _Cronet_HttpHeader_DestroyPtr
      .asFunction<void Function(Cronet_HttpHeaderPtr)>();

  void Cronet_HttpHeader_name_set(
    Cronet_HttpHeaderPtr self,
    Cronet_String name,
  ) {
    return _Cronet_HttpHeader_name_set(
      self,
      name,
    );
  }

  late final _Cronet_HttpHeader_name_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_HttpHeaderPtr,
              Cronet_String)>>('Cronet_HttpHeader_name_set');
  late final _Cronet_HttpHeader_name_set = _Cronet_HttpHeader_name_setPtr
      .asFunction<void Function(Cronet_HttpHeaderPtr, Cronet_String)>();

  void Cronet_HttpHeader_value_set(
    Cronet_HttpHeaderPtr self,
    Cronet_String value,
  ) {
    return _Cronet_HttpHeader_value_set(
      self,
      value,
    );
  }

  late final _Cronet_HttpHeader_value_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_HttpHeaderPtr,
              Cronet_String)>>('Cronet_HttpHeader_value_set');
  late final _Cronet_HttpHeader_value_set = _Cronet_HttpHeader_value_setPtr
      .asFunction<void Function(Cronet_HttpHeaderPtr, Cronet_String)>();

  Cronet_String Cronet_HttpHeader_name_get(
    Cronet_HttpHeaderPtr self,
  ) {
    return _Cronet_HttpHeader_name_get(
      self,
    );
  }

  late final _Cronet_HttpHeader_name_getPtr =
      _lookup<ffi.NativeFunction<Cronet_String Function(Cronet_HttpHeaderPtr)>>(
          'Cronet_HttpHeader_name_get');
  late final _Cronet_HttpHeader_name_get = _Cronet_HttpHeader_name_getPtr
      .asFunction<Cronet_String Function(Cronet_HttpHeaderPtr)>();

  Cronet_String Cronet_HttpHeader_value_get(
    Cronet_HttpHeaderPtr self,
  ) {
    return _Cronet_HttpHeader_value_get(
      self,
    );
  }

  late final _Cronet_HttpHeader_value_getPtr =
      _lookup<ffi.NativeFunction<Cronet_String Function(Cronet_HttpHeaderPtr)>>(
          'Cronet_HttpHeader_value_get');
  late final _Cronet_HttpHeader_value_get = _Cronet_HttpHeader_value_getPtr
      .asFunction<Cronet_String Function(Cronet_HttpHeaderPtr)>();

  /// ////////////////////
  Cronet_UrlResponseInfoPtr Cronet_UrlResponseInfo_Create() {
    return _Cronet_UrlResponseInfo_Create();
  }

  late final _Cronet_UrlResponseInfo_CreatePtr =
      _lookup<ffi.NativeFunction<Cronet_UrlResponseInfoPtr Function()>>(
          'Cronet_UrlResponseInfo_Create');
  late final _Cronet_UrlResponseInfo_Create = _Cronet_UrlResponseInfo_CreatePtr
      .asFunction<Cronet_UrlResponseInfoPtr Function()>();

  void Cronet_UrlResponseInfo_Destroy(
    Cronet_UrlResponseInfoPtr self,
  ) {
    return _Cronet_UrlResponseInfo_Destroy(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_UrlResponseInfoPtr)>>(
          'Cronet_UrlResponseInfo_Destroy');
  late final _Cronet_UrlResponseInfo_Destroy =
      _Cronet_UrlResponseInfo_DestroyPtr.asFunction<
          void Function(Cronet_UrlResponseInfoPtr)>();

  void Cronet_UrlResponseInfo_url_set(
    Cronet_UrlResponseInfoPtr self,
    Cronet_String url,
  ) {
    return _Cronet_UrlResponseInfo_url_set(
      self,
      url,
    );
  }

  late final _Cronet_UrlResponseInfo_url_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlResponseInfoPtr,
              Cronet_String)>>('Cronet_UrlResponseInfo_url_set');
  late final _Cronet_UrlResponseInfo_url_set =
      _Cronet_UrlResponseInfo_url_setPtr.asFunction<
          void Function(Cronet_UrlResponseInfoPtr, Cronet_String)>();

  void Cronet_UrlResponseInfo_url_chain_add(
    Cronet_UrlResponseInfoPtr self,
    Cronet_String element,
  ) {
    return _Cronet_UrlResponseInfo_url_chain_add(
      self,
      element,
    );
  }

  late final _Cronet_UrlResponseInfo_url_chain_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlResponseInfoPtr,
              Cronet_String)>>('Cronet_UrlResponseInfo_url_chain_add');
  late final _Cronet_UrlResponseInfo_url_chain_add =
      _Cronet_UrlResponseInfo_url_chain_addPtr.asFunction<
          void Function(Cronet_UrlResponseInfoPtr, Cronet_String)>();

  void Cronet_UrlResponseInfo_http_status_code_set(
    Cronet_UrlResponseInfoPtr self,
    int http_status_code,
  ) {
    return _Cronet_UrlResponseInfo_http_status_code_set(
      self,
      http_status_code,
    );
  }

  late final _Cronet_UrlResponseInfo_http_status_code_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlResponseInfoPtr,
              ffi.Int32)>>('Cronet_UrlResponseInfo_http_status_code_set');
  late final _Cronet_UrlResponseInfo_http_status_code_set =
      _Cronet_UrlResponseInfo_http_status_code_setPtr.asFunction<
          void Function(Cronet_UrlResponseInfoPtr, int)>();

  void Cronet_UrlResponseInfo_http_status_text_set(
    Cronet_UrlResponseInfoPtr self,
    Cronet_String http_status_text,
  ) {
    return _Cronet_UrlResponseInfo_http_status_text_set(
      self,
      http_status_text,
    );
  }

  late final _Cronet_UrlResponseInfo_http_status_text_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlResponseInfoPtr,
              Cronet_String)>>('Cronet_UrlResponseInfo_http_status_text_set');
  late final _Cronet_UrlResponseInfo_http_status_text_set =
      _Cronet_UrlResponseInfo_http_status_text_setPtr.asFunction<
          void Function(Cronet_UrlResponseInfoPtr, Cronet_String)>();

  void Cronet_UrlResponseInfo_all_headers_list_add(
    Cronet_UrlResponseInfoPtr self,
    Cronet_HttpHeaderPtr element,
  ) {
    return _Cronet_UrlResponseInfo_all_headers_list_add(
      self,
      element,
    );
  }

  late final _Cronet_UrlResponseInfo_all_headers_list_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  Cronet_UrlResponseInfoPtr, Cronet_HttpHeaderPtr)>>(
      'Cronet_UrlResponseInfo_all_headers_list_add');
  late final _Cronet_UrlResponseInfo_all_headers_list_add =
      _Cronet_UrlResponseInfo_all_headers_list_addPtr.asFunction<
          void Function(Cronet_UrlResponseInfoPtr, Cronet_HttpHeaderPtr)>();

  void Cronet_UrlResponseInfo_was_cached_set(
    Cronet_UrlResponseInfoPtr self,
    bool was_cached,
  ) {
    return _Cronet_UrlResponseInfo_was_cached_set(
      self,
      was_cached,
    );
  }

  late final _Cronet_UrlResponseInfo_was_cached_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlResponseInfoPtr,
              ffi.Bool)>>('Cronet_UrlResponseInfo_was_cached_set');
  late final _Cronet_UrlResponseInfo_was_cached_set =
      _Cronet_UrlResponseInfo_was_cached_setPtr.asFunction<
          void Function(Cronet_UrlResponseInfoPtr, bool)>();

  void Cronet_UrlResponseInfo_negotiated_protocol_set(
    Cronet_UrlResponseInfoPtr self,
    Cronet_String negotiated_protocol,
  ) {
    return _Cronet_UrlResponseInfo_negotiated_protocol_set(
      self,
      negotiated_protocol,
    );
  }

  late final _Cronet_UrlResponseInfo_negotiated_protocol_setPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(Cronet_UrlResponseInfoPtr, Cronet_String)>>(
      'Cronet_UrlResponseInfo_negotiated_protocol_set');
  late final _Cronet_UrlResponseInfo_negotiated_protocol_set =
      _Cronet_UrlResponseInfo_negotiated_protocol_setPtr.asFunction<
          void Function(Cronet_UrlResponseInfoPtr, Cronet_String)>();

  void Cronet_UrlResponseInfo_proxy_server_set(
    Cronet_UrlResponseInfoPtr self,
    Cronet_String proxy_server,
  ) {
    return _Cronet_UrlResponseInfo_proxy_server_set(
      self,
      proxy_server,
    );
  }

  late final _Cronet_UrlResponseInfo_proxy_server_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlResponseInfoPtr,
              Cronet_String)>>('Cronet_UrlResponseInfo_proxy_server_set');
  late final _Cronet_UrlResponseInfo_proxy_server_set =
      _Cronet_UrlResponseInfo_proxy_server_setPtr.asFunction<
          void Function(Cronet_UrlResponseInfoPtr, Cronet_String)>();

  void Cronet_UrlResponseInfo_received_byte_count_set(
    Cronet_UrlResponseInfoPtr self,
    int received_byte_count,
  ) {
    return _Cronet_UrlResponseInfo_received_byte_count_set(
      self,
      received_byte_count,
    );
  }

  late final _Cronet_UrlResponseInfo_received_byte_count_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlResponseInfoPtr,
              ffi.Int64)>>('Cronet_UrlResponseInfo_received_byte_count_set');
  late final _Cronet_UrlResponseInfo_received_byte_count_set =
      _Cronet_UrlResponseInfo_received_byte_count_setPtr.asFunction<
          void Function(Cronet_UrlResponseInfoPtr, int)>();

  Cronet_String Cronet_UrlResponseInfo_url_get(
    Cronet_UrlResponseInfoPtr self,
  ) {
    return _Cronet_UrlResponseInfo_url_get(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_url_getPtr = _lookup<
      ffi.NativeFunction<
          Cronet_String Function(
              Cronet_UrlResponseInfoPtr)>>('Cronet_UrlResponseInfo_url_get');
  late final _Cronet_UrlResponseInfo_url_get =
      _Cronet_UrlResponseInfo_url_getPtr.asFunction<
          Cronet_String Function(Cronet_UrlResponseInfoPtr)>();

  int Cronet_UrlResponseInfo_url_chain_size(
    Cronet_UrlResponseInfoPtr self,
  ) {
    return _Cronet_UrlResponseInfo_url_chain_size(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_url_chain_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(Cronet_UrlResponseInfoPtr)>>(
      'Cronet_UrlResponseInfo_url_chain_size');
  late final _Cronet_UrlResponseInfo_url_chain_size =
      _Cronet_UrlResponseInfo_url_chain_sizePtr.asFunction<
          int Function(Cronet_UrlResponseInfoPtr)>();

  Cronet_String Cronet_UrlResponseInfo_url_chain_at(
    Cronet_UrlResponseInfoPtr self,
    int index,
  ) {
    return _Cronet_UrlResponseInfo_url_chain_at(
      self,
      index,
    );
  }

  late final _Cronet_UrlResponseInfo_url_chain_atPtr = _lookup<
      ffi.NativeFunction<
          Cronet_String Function(Cronet_UrlResponseInfoPtr,
              ffi.Uint32)>>('Cronet_UrlResponseInfo_url_chain_at');
  late final _Cronet_UrlResponseInfo_url_chain_at =
      _Cronet_UrlResponseInfo_url_chain_atPtr.asFunction<
          Cronet_String Function(Cronet_UrlResponseInfoPtr, int)>();

  void Cronet_UrlResponseInfo_url_chain_clear(
    Cronet_UrlResponseInfoPtr self,
  ) {
    return _Cronet_UrlResponseInfo_url_chain_clear(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_url_chain_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_UrlResponseInfoPtr)>>(
          'Cronet_UrlResponseInfo_url_chain_clear');
  late final _Cronet_UrlResponseInfo_url_chain_clear =
      _Cronet_UrlResponseInfo_url_chain_clearPtr.asFunction<
          void Function(Cronet_UrlResponseInfoPtr)>();

  int Cronet_UrlResponseInfo_http_status_code_get(
    Cronet_UrlResponseInfoPtr self,
  ) {
    return _Cronet_UrlResponseInfo_http_status_code_get(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_http_status_code_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(Cronet_UrlResponseInfoPtr)>>(
      'Cronet_UrlResponseInfo_http_status_code_get');
  late final _Cronet_UrlResponseInfo_http_status_code_get =
      _Cronet_UrlResponseInfo_http_status_code_getPtr.asFunction<
          int Function(Cronet_UrlResponseInfoPtr)>();

  Cronet_String Cronet_UrlResponseInfo_http_status_text_get(
    Cronet_UrlResponseInfoPtr self,
  ) {
    return _Cronet_UrlResponseInfo_http_status_text_get(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_http_status_text_getPtr = _lookup<
          ffi.NativeFunction<
              Cronet_String Function(Cronet_UrlResponseInfoPtr)>>(
      'Cronet_UrlResponseInfo_http_status_text_get');
  late final _Cronet_UrlResponseInfo_http_status_text_get =
      _Cronet_UrlResponseInfo_http_status_text_getPtr.asFunction<
          Cronet_String Function(Cronet_UrlResponseInfoPtr)>();

  int Cronet_UrlResponseInfo_all_headers_list_size(
    Cronet_UrlResponseInfoPtr self,
  ) {
    return _Cronet_UrlResponseInfo_all_headers_list_size(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_all_headers_list_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(Cronet_UrlResponseInfoPtr)>>(
      'Cronet_UrlResponseInfo_all_headers_list_size');
  late final _Cronet_UrlResponseInfo_all_headers_list_size =
      _Cronet_UrlResponseInfo_all_headers_list_sizePtr.asFunction<
          int Function(Cronet_UrlResponseInfoPtr)>();

  Cronet_HttpHeaderPtr Cronet_UrlResponseInfo_all_headers_list_at(
    Cronet_UrlResponseInfoPtr self,
    int index,
  ) {
    return _Cronet_UrlResponseInfo_all_headers_list_at(
      self,
      index,
    );
  }

  late final _Cronet_UrlResponseInfo_all_headers_list_atPtr = _lookup<
      ffi.NativeFunction<
          Cronet_HttpHeaderPtr Function(Cronet_UrlResponseInfoPtr,
              ffi.Uint32)>>('Cronet_UrlResponseInfo_all_headers_list_at');
  late final _Cronet_UrlResponseInfo_all_headers_list_at =
      _Cronet_UrlResponseInfo_all_headers_list_atPtr.asFunction<
          Cronet_HttpHeaderPtr Function(Cronet_UrlResponseInfoPtr, int)>();

  void Cronet_UrlResponseInfo_all_headers_list_clear(
    Cronet_UrlResponseInfoPtr self,
  ) {
    return _Cronet_UrlResponseInfo_all_headers_list_clear(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_all_headers_list_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_UrlResponseInfoPtr)>>(
          'Cronet_UrlResponseInfo_all_headers_list_clear');
  late final _Cronet_UrlResponseInfo_all_headers_list_clear =
      _Cronet_UrlResponseInfo_all_headers_list_clearPtr.asFunction<
          void Function(Cronet_UrlResponseInfoPtr)>();

  bool Cronet_UrlResponseInfo_was_cached_get(
    Cronet_UrlResponseInfoPtr self,
  ) {
    return _Cronet_UrlResponseInfo_was_cached_get(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_was_cached_getPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Cronet_UrlResponseInfoPtr)>>(
          'Cronet_UrlResponseInfo_was_cached_get');
  late final _Cronet_UrlResponseInfo_was_cached_get =
      _Cronet_UrlResponseInfo_was_cached_getPtr.asFunction<
          bool Function(Cronet_UrlResponseInfoPtr)>();

  Cronet_String Cronet_UrlResponseInfo_negotiated_protocol_get(
    Cronet_UrlResponseInfoPtr self,
  ) {
    return _Cronet_UrlResponseInfo_negotiated_protocol_get(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_negotiated_protocol_getPtr = _lookup<
          ffi.NativeFunction<
              Cronet_String Function(Cronet_UrlResponseInfoPtr)>>(
      'Cronet_UrlResponseInfo_negotiated_protocol_get');
  late final _Cronet_UrlResponseInfo_negotiated_protocol_get =
      _Cronet_UrlResponseInfo_negotiated_protocol_getPtr.asFunction<
          Cronet_String Function(Cronet_UrlResponseInfoPtr)>();

  Cronet_String Cronet_UrlResponseInfo_proxy_server_get(
    Cronet_UrlResponseInfoPtr self,
  ) {
    return _Cronet_UrlResponseInfo_proxy_server_get(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_proxy_server_getPtr = _lookup<
          ffi.NativeFunction<
              Cronet_String Function(Cronet_UrlResponseInfoPtr)>>(
      'Cronet_UrlResponseInfo_proxy_server_get');
  late final _Cronet_UrlResponseInfo_proxy_server_get =
      _Cronet_UrlResponseInfo_proxy_server_getPtr.asFunction<
          Cronet_String Function(Cronet_UrlResponseInfoPtr)>();

  int Cronet_UrlResponseInfo_received_byte_count_get(
    Cronet_UrlResponseInfoPtr self,
  ) {
    return _Cronet_UrlResponseInfo_received_byte_count_get(
      self,
    );
  }

  late final _Cronet_UrlResponseInfo_received_byte_count_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(Cronet_UrlResponseInfoPtr)>>(
      'Cronet_UrlResponseInfo_received_byte_count_get');
  late final _Cronet_UrlResponseInfo_received_byte_count_get =
      _Cronet_UrlResponseInfo_received_byte_count_getPtr.asFunction<
          int Function(Cronet_UrlResponseInfoPtr)>();

  /// ////////////////////
  Cronet_UrlRequestParamsPtr Cronet_UrlRequestParams_Create() {
    return _Cronet_UrlRequestParams_Create();
  }

  late final _Cronet_UrlRequestParams_CreatePtr =
      _lookup<ffi.NativeFunction<Cronet_UrlRequestParamsPtr Function()>>(
          'Cronet_UrlRequestParams_Create');
  late final _Cronet_UrlRequestParams_Create =
      _Cronet_UrlRequestParams_CreatePtr.asFunction<
          Cronet_UrlRequestParamsPtr Function()>();

  void Cronet_UrlRequestParams_Destroy(
    Cronet_UrlRequestParamsPtr self,
  ) {
    return _Cronet_UrlRequestParams_Destroy(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_DestroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_UrlRequestParamsPtr)>>(
      'Cronet_UrlRequestParams_Destroy');
  late final _Cronet_UrlRequestParams_Destroy =
      _Cronet_UrlRequestParams_DestroyPtr.asFunction<
          void Function(Cronet_UrlRequestParamsPtr)>();

  void Cronet_UrlRequestParams_http_method_set(
    Cronet_UrlRequestParamsPtr self,
    Cronet_String http_method,
  ) {
    return _Cronet_UrlRequestParams_http_method_set(
      self,
      http_method,
    );
  }

  late final _Cronet_UrlRequestParams_http_method_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestParamsPtr,
              Cronet_String)>>('Cronet_UrlRequestParams_http_method_set');
  late final _Cronet_UrlRequestParams_http_method_set =
      _Cronet_UrlRequestParams_http_method_setPtr.asFunction<
          void Function(Cronet_UrlRequestParamsPtr, Cronet_String)>();

  void Cronet_UrlRequestParams_request_headers_add(
    Cronet_UrlRequestParamsPtr self,
    Cronet_HttpHeaderPtr element,
  ) {
    return _Cronet_UrlRequestParams_request_headers_add(
      self,
      element,
    );
  }

  late final _Cronet_UrlRequestParams_request_headers_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  Cronet_UrlRequestParamsPtr, Cronet_HttpHeaderPtr)>>(
      'Cronet_UrlRequestParams_request_headers_add');
  late final _Cronet_UrlRequestParams_request_headers_add =
      _Cronet_UrlRequestParams_request_headers_addPtr.asFunction<
          void Function(Cronet_UrlRequestParamsPtr, Cronet_HttpHeaderPtr)>();

  void Cronet_UrlRequestParams_disable_cache_set(
    Cronet_UrlRequestParamsPtr self,
    bool disable_cache,
  ) {
    return _Cronet_UrlRequestParams_disable_cache_set(
      self,
      disable_cache,
    );
  }

  late final _Cronet_UrlRequestParams_disable_cache_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestParamsPtr,
              ffi.Bool)>>('Cronet_UrlRequestParams_disable_cache_set');
  late final _Cronet_UrlRequestParams_disable_cache_set =
      _Cronet_UrlRequestParams_disable_cache_setPtr.asFunction<
          void Function(Cronet_UrlRequestParamsPtr, bool)>();

  void Cronet_UrlRequestParams_priority_set(
    Cronet_UrlRequestParamsPtr self,
    int priority,
  ) {
    return _Cronet_UrlRequestParams_priority_set(
      self,
      priority,
    );
  }

  late final _Cronet_UrlRequestParams_priority_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestParamsPtr,
              ffi.Int32)>>('Cronet_UrlRequestParams_priority_set');
  late final _Cronet_UrlRequestParams_priority_set =
      _Cronet_UrlRequestParams_priority_setPtr.asFunction<
          void Function(Cronet_UrlRequestParamsPtr, int)>();

  void Cronet_UrlRequestParams_upload_data_provider_set(
    Cronet_UrlRequestParamsPtr self,
    Cronet_UploadDataProviderPtr upload_data_provider,
  ) {
    return _Cronet_UrlRequestParams_upload_data_provider_set(
      self,
      upload_data_provider,
    );
  }

  late final _Cronet_UrlRequestParams_upload_data_provider_setPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  Cronet_UrlRequestParamsPtr, Cronet_UploadDataProviderPtr)>>(
      'Cronet_UrlRequestParams_upload_data_provider_set');
  late final _Cronet_UrlRequestParams_upload_data_provider_set =
      _Cronet_UrlRequestParams_upload_data_provider_setPtr.asFunction<
          void Function(
              Cronet_UrlRequestParamsPtr, Cronet_UploadDataProviderPtr)>();

  void Cronet_UrlRequestParams_upload_data_provider_executor_set(
    Cronet_UrlRequestParamsPtr self,
    Cronet_ExecutorPtr upload_data_provider_executor,
  ) {
    return _Cronet_UrlRequestParams_upload_data_provider_executor_set(
      self,
      upload_data_provider_executor,
    );
  }

  late final _Cronet_UrlRequestParams_upload_data_provider_executor_setPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      Cronet_UrlRequestParamsPtr, Cronet_ExecutorPtr)>>(
          'Cronet_UrlRequestParams_upload_data_provider_executor_set');
  late final _Cronet_UrlRequestParams_upload_data_provider_executor_set =
      _Cronet_UrlRequestParams_upload_data_provider_executor_setPtr.asFunction<
          void Function(Cronet_UrlRequestParamsPtr, Cronet_ExecutorPtr)>();

  void Cronet_UrlRequestParams_allow_direct_executor_set(
    Cronet_UrlRequestParamsPtr self,
    bool allow_direct_executor,
  ) {
    return _Cronet_UrlRequestParams_allow_direct_executor_set(
      self,
      allow_direct_executor,
    );
  }

  late final _Cronet_UrlRequestParams_allow_direct_executor_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestParamsPtr,
              ffi.Bool)>>('Cronet_UrlRequestParams_allow_direct_executor_set');
  late final _Cronet_UrlRequestParams_allow_direct_executor_set =
      _Cronet_UrlRequestParams_allow_direct_executor_setPtr.asFunction<
          void Function(Cronet_UrlRequestParamsPtr, bool)>();

  void Cronet_UrlRequestParams_annotations_add(
    Cronet_UrlRequestParamsPtr self,
    Cronet_RawDataPtr element,
  ) {
    return _Cronet_UrlRequestParams_annotations_add(
      self,
      element,
    );
  }

  late final _Cronet_UrlRequestParams_annotations_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestParamsPtr,
              Cronet_RawDataPtr)>>('Cronet_UrlRequestParams_annotations_add');
  late final _Cronet_UrlRequestParams_annotations_add =
      _Cronet_UrlRequestParams_annotations_addPtr.asFunction<
          void Function(Cronet_UrlRequestParamsPtr, Cronet_RawDataPtr)>();

  void Cronet_UrlRequestParams_request_finished_listener_set(
    Cronet_UrlRequestParamsPtr self,
    Cronet_RequestFinishedInfoListenerPtr request_finished_listener,
  ) {
    return _Cronet_UrlRequestParams_request_finished_listener_set(
      self,
      request_finished_listener,
    );
  }

  late final _Cronet_UrlRequestParams_request_finished_listener_setPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(Cronet_UrlRequestParamsPtr,
                      Cronet_RequestFinishedInfoListenerPtr)>>(
          'Cronet_UrlRequestParams_request_finished_listener_set');
  late final _Cronet_UrlRequestParams_request_finished_listener_set =
      _Cronet_UrlRequestParams_request_finished_listener_setPtr.asFunction<
          void Function(Cronet_UrlRequestParamsPtr,
              Cronet_RequestFinishedInfoListenerPtr)>();

  void Cronet_UrlRequestParams_request_finished_executor_set(
    Cronet_UrlRequestParamsPtr self,
    Cronet_ExecutorPtr request_finished_executor,
  ) {
    return _Cronet_UrlRequestParams_request_finished_executor_set(
      self,
      request_finished_executor,
    );
  }

  late final _Cronet_UrlRequestParams_request_finished_executor_setPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      Cronet_UrlRequestParamsPtr, Cronet_ExecutorPtr)>>(
          'Cronet_UrlRequestParams_request_finished_executor_set');
  late final _Cronet_UrlRequestParams_request_finished_executor_set =
      _Cronet_UrlRequestParams_request_finished_executor_setPtr.asFunction<
          void Function(Cronet_UrlRequestParamsPtr, Cronet_ExecutorPtr)>();

  void Cronet_UrlRequestParams_idempotency_set(
    Cronet_UrlRequestParamsPtr self,
    int idempotency,
  ) {
    return _Cronet_UrlRequestParams_idempotency_set(
      self,
      idempotency,
    );
  }

  late final _Cronet_UrlRequestParams_idempotency_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestParamsPtr,
              ffi.Int32)>>('Cronet_UrlRequestParams_idempotency_set');
  late final _Cronet_UrlRequestParams_idempotency_set =
      _Cronet_UrlRequestParams_idempotency_setPtr.asFunction<
          void Function(Cronet_UrlRequestParamsPtr, int)>();

  Cronet_String Cronet_UrlRequestParams_http_method_get(
    Cronet_UrlRequestParamsPtr self,
  ) {
    return _Cronet_UrlRequestParams_http_method_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_http_method_getPtr = _lookup<
          ffi.NativeFunction<
              Cronet_String Function(Cronet_UrlRequestParamsPtr)>>(
      'Cronet_UrlRequestParams_http_method_get');
  late final _Cronet_UrlRequestParams_http_method_get =
      _Cronet_UrlRequestParams_http_method_getPtr.asFunction<
          Cronet_String Function(Cronet_UrlRequestParamsPtr)>();

  int Cronet_UrlRequestParams_request_headers_size(
    Cronet_UrlRequestParamsPtr self,
  ) {
    return _Cronet_UrlRequestParams_request_headers_size(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_request_headers_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(Cronet_UrlRequestParamsPtr)>>(
      'Cronet_UrlRequestParams_request_headers_size');
  late final _Cronet_UrlRequestParams_request_headers_size =
      _Cronet_UrlRequestParams_request_headers_sizePtr.asFunction<
          int Function(Cronet_UrlRequestParamsPtr)>();

  Cronet_HttpHeaderPtr Cronet_UrlRequestParams_request_headers_at(
    Cronet_UrlRequestParamsPtr self,
    int index,
  ) {
    return _Cronet_UrlRequestParams_request_headers_at(
      self,
      index,
    );
  }

  late final _Cronet_UrlRequestParams_request_headers_atPtr = _lookup<
      ffi.NativeFunction<
          Cronet_HttpHeaderPtr Function(Cronet_UrlRequestParamsPtr,
              ffi.Uint32)>>('Cronet_UrlRequestParams_request_headers_at');
  late final _Cronet_UrlRequestParams_request_headers_at =
      _Cronet_UrlRequestParams_request_headers_atPtr.asFunction<
          Cronet_HttpHeaderPtr Function(Cronet_UrlRequestParamsPtr, int)>();

  void Cronet_UrlRequestParams_request_headers_clear(
    Cronet_UrlRequestParamsPtr self,
  ) {
    return _Cronet_UrlRequestParams_request_headers_clear(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_request_headers_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_UrlRequestParamsPtr)>>(
      'Cronet_UrlRequestParams_request_headers_clear');
  late final _Cronet_UrlRequestParams_request_headers_clear =
      _Cronet_UrlRequestParams_request_headers_clearPtr.asFunction<
          void Function(Cronet_UrlRequestParamsPtr)>();

  bool Cronet_UrlRequestParams_disable_cache_get(
    Cronet_UrlRequestParamsPtr self,
  ) {
    return _Cronet_UrlRequestParams_disable_cache_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_disable_cache_getPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Cronet_UrlRequestParamsPtr)>>(
      'Cronet_UrlRequestParams_disable_cache_get');
  late final _Cronet_UrlRequestParams_disable_cache_get =
      _Cronet_UrlRequestParams_disable_cache_getPtr.asFunction<
          bool Function(Cronet_UrlRequestParamsPtr)>();

  int Cronet_UrlRequestParams_priority_get(
    Cronet_UrlRequestParamsPtr self,
  ) {
    return _Cronet_UrlRequestParams_priority_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_priority_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(Cronet_UrlRequestParamsPtr)>>(
      'Cronet_UrlRequestParams_priority_get');
  late final _Cronet_UrlRequestParams_priority_get =
      _Cronet_UrlRequestParams_priority_getPtr.asFunction<
          int Function(Cronet_UrlRequestParamsPtr)>();

  Cronet_UploadDataProviderPtr Cronet_UrlRequestParams_upload_data_provider_get(
    Cronet_UrlRequestParamsPtr self,
  ) {
    return _Cronet_UrlRequestParams_upload_data_provider_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_upload_data_provider_getPtr = _lookup<
          ffi.NativeFunction<
              Cronet_UploadDataProviderPtr Function(
                  Cronet_UrlRequestParamsPtr)>>(
      'Cronet_UrlRequestParams_upload_data_provider_get');
  late final _Cronet_UrlRequestParams_upload_data_provider_get =
      _Cronet_UrlRequestParams_upload_data_provider_getPtr.asFunction<
          Cronet_UploadDataProviderPtr Function(Cronet_UrlRequestParamsPtr)>();

  Cronet_ExecutorPtr Cronet_UrlRequestParams_upload_data_provider_executor_get(
    Cronet_UrlRequestParamsPtr self,
  ) {
    return _Cronet_UrlRequestParams_upload_data_provider_executor_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_upload_data_provider_executor_getPtr =
      _lookup<
              ffi.NativeFunction<
                  Cronet_ExecutorPtr Function(Cronet_UrlRequestParamsPtr)>>(
          'Cronet_UrlRequestParams_upload_data_provider_executor_get');
  late final _Cronet_UrlRequestParams_upload_data_provider_executor_get =
      _Cronet_UrlRequestParams_upload_data_provider_executor_getPtr.asFunction<
          Cronet_ExecutorPtr Function(Cronet_UrlRequestParamsPtr)>();

  bool Cronet_UrlRequestParams_allow_direct_executor_get(
    Cronet_UrlRequestParamsPtr self,
  ) {
    return _Cronet_UrlRequestParams_allow_direct_executor_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_allow_direct_executor_getPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Cronet_UrlRequestParamsPtr)>>(
      'Cronet_UrlRequestParams_allow_direct_executor_get');
  late final _Cronet_UrlRequestParams_allow_direct_executor_get =
      _Cronet_UrlRequestParams_allow_direct_executor_getPtr.asFunction<
          bool Function(Cronet_UrlRequestParamsPtr)>();

  int Cronet_UrlRequestParams_annotations_size(
    Cronet_UrlRequestParamsPtr self,
  ) {
    return _Cronet_UrlRequestParams_annotations_size(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_annotations_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(Cronet_UrlRequestParamsPtr)>>(
      'Cronet_UrlRequestParams_annotations_size');
  late final _Cronet_UrlRequestParams_annotations_size =
      _Cronet_UrlRequestParams_annotations_sizePtr.asFunction<
          int Function(Cronet_UrlRequestParamsPtr)>();

  Cronet_RawDataPtr Cronet_UrlRequestParams_annotations_at(
    Cronet_UrlRequestParamsPtr self,
    int index,
  ) {
    return _Cronet_UrlRequestParams_annotations_at(
      self,
      index,
    );
  }

  late final _Cronet_UrlRequestParams_annotations_atPtr = _lookup<
      ffi.NativeFunction<
          Cronet_RawDataPtr Function(Cronet_UrlRequestParamsPtr,
              ffi.Uint32)>>('Cronet_UrlRequestParams_annotations_at');
  late final _Cronet_UrlRequestParams_annotations_at =
      _Cronet_UrlRequestParams_annotations_atPtr.asFunction<
          Cronet_RawDataPtr Function(Cronet_UrlRequestParamsPtr, int)>();

  void Cronet_UrlRequestParams_annotations_clear(
    Cronet_UrlRequestParamsPtr self,
  ) {
    return _Cronet_UrlRequestParams_annotations_clear(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_annotations_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_UrlRequestParamsPtr)>>(
      'Cronet_UrlRequestParams_annotations_clear');
  late final _Cronet_UrlRequestParams_annotations_clear =
      _Cronet_UrlRequestParams_annotations_clearPtr.asFunction<
          void Function(Cronet_UrlRequestParamsPtr)>();

  Cronet_RequestFinishedInfoListenerPtr
      Cronet_UrlRequestParams_request_finished_listener_get(
    Cronet_UrlRequestParamsPtr self,
  ) {
    return _Cronet_UrlRequestParams_request_finished_listener_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_request_finished_listener_getPtr =
      _lookup<
              ffi.NativeFunction<
                  Cronet_RequestFinishedInfoListenerPtr Function(
                      Cronet_UrlRequestParamsPtr)>>(
          'Cronet_UrlRequestParams_request_finished_listener_get');
  late final _Cronet_UrlRequestParams_request_finished_listener_get =
      _Cronet_UrlRequestParams_request_finished_listener_getPtr.asFunction<
          Cronet_RequestFinishedInfoListenerPtr Function(
              Cronet_UrlRequestParamsPtr)>();

  Cronet_ExecutorPtr Cronet_UrlRequestParams_request_finished_executor_get(
    Cronet_UrlRequestParamsPtr self,
  ) {
    return _Cronet_UrlRequestParams_request_finished_executor_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_request_finished_executor_getPtr =
      _lookup<
              ffi.NativeFunction<
                  Cronet_ExecutorPtr Function(Cronet_UrlRequestParamsPtr)>>(
          'Cronet_UrlRequestParams_request_finished_executor_get');
  late final _Cronet_UrlRequestParams_request_finished_executor_get =
      _Cronet_UrlRequestParams_request_finished_executor_getPtr.asFunction<
          Cronet_ExecutorPtr Function(Cronet_UrlRequestParamsPtr)>();

  int Cronet_UrlRequestParams_idempotency_get(
    Cronet_UrlRequestParamsPtr self,
  ) {
    return _Cronet_UrlRequestParams_idempotency_get(
      self,
    );
  }

  late final _Cronet_UrlRequestParams_idempotency_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(Cronet_UrlRequestParamsPtr)>>(
      'Cronet_UrlRequestParams_idempotency_get');
  late final _Cronet_UrlRequestParams_idempotency_get =
      _Cronet_UrlRequestParams_idempotency_getPtr.asFunction<
          int Function(Cronet_UrlRequestParamsPtr)>();

  /// ////////////////////
  Cronet_DateTimePtr Cronet_DateTime_Create() {
    return _Cronet_DateTime_Create();
  }

  late final _Cronet_DateTime_CreatePtr =
      _lookup<ffi.NativeFunction<Cronet_DateTimePtr Function()>>(
          'Cronet_DateTime_Create');
  late final _Cronet_DateTime_Create =
      _Cronet_DateTime_CreatePtr.asFunction<Cronet_DateTimePtr Function()>();

  void Cronet_DateTime_Destroy(
    Cronet_DateTimePtr self,
  ) {
    return _Cronet_DateTime_Destroy(
      self,
    );
  }

  late final _Cronet_DateTime_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_DateTimePtr)>>(
          'Cronet_DateTime_Destroy');
  late final _Cronet_DateTime_Destroy = _Cronet_DateTime_DestroyPtr.asFunction<
      void Function(Cronet_DateTimePtr)>();

  void Cronet_DateTime_value_set(
    Cronet_DateTimePtr self,
    int value,
  ) {
    return _Cronet_DateTime_value_set(
      self,
      value,
    );
  }

  late final _Cronet_DateTime_value_setPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_DateTimePtr, ffi.Int64)>>(
      'Cronet_DateTime_value_set');
  late final _Cronet_DateTime_value_set = _Cronet_DateTime_value_setPtr
      .asFunction<void Function(Cronet_DateTimePtr, int)>();

  int Cronet_DateTime_value_get(
    Cronet_DateTimePtr self,
  ) {
    return _Cronet_DateTime_value_get(
      self,
    );
  }

  late final _Cronet_DateTime_value_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(Cronet_DateTimePtr)>>(
          'Cronet_DateTime_value_get');
  late final _Cronet_DateTime_value_get = _Cronet_DateTime_value_getPtr
      .asFunction<int Function(Cronet_DateTimePtr)>();

  /// ////////////////////
  Cronet_MetricsPtr Cronet_Metrics_Create() {
    return _Cronet_Metrics_Create();
  }

  late final _Cronet_Metrics_CreatePtr =
      _lookup<ffi.NativeFunction<Cronet_MetricsPtr Function()>>(
          'Cronet_Metrics_Create');
  late final _Cronet_Metrics_Create =
      _Cronet_Metrics_CreatePtr.asFunction<Cronet_MetricsPtr Function()>();

  void Cronet_Metrics_Destroy(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_Destroy(
      self,
    );
  }

  late final _Cronet_Metrics_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Cronet_MetricsPtr)>>(
          'Cronet_Metrics_Destroy');
  late final _Cronet_Metrics_Destroy =
      _Cronet_Metrics_DestroyPtr.asFunction<void Function(Cronet_MetricsPtr)>();

  void Cronet_Metrics_request_start_set(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr request_start,
  ) {
    return _Cronet_Metrics_request_start_set(
      self,
      request_start,
    );
  }

  late final _Cronet_Metrics_request_start_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_request_start_set');
  late final _Cronet_Metrics_request_start_set =
      _Cronet_Metrics_request_start_setPtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_request_start_move(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr request_start,
  ) {
    return _Cronet_Metrics_request_start_move(
      self,
      request_start,
    );
  }

  late final _Cronet_Metrics_request_start_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_request_start_move');
  late final _Cronet_Metrics_request_start_move =
      _Cronet_Metrics_request_start_movePtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_dns_start_set(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr dns_start,
  ) {
    return _Cronet_Metrics_dns_start_set(
      self,
      dns_start,
    );
  }

  late final _Cronet_Metrics_dns_start_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_dns_start_set');
  late final _Cronet_Metrics_dns_start_set = _Cronet_Metrics_dns_start_setPtr
      .asFunction<void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_dns_start_move(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr dns_start,
  ) {
    return _Cronet_Metrics_dns_start_move(
      self,
      dns_start,
    );
  }

  late final _Cronet_Metrics_dns_start_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_dns_start_move');
  late final _Cronet_Metrics_dns_start_move = _Cronet_Metrics_dns_start_movePtr
      .asFunction<void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_dns_end_set(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr dns_end,
  ) {
    return _Cronet_Metrics_dns_end_set(
      self,
      dns_end,
    );
  }

  late final _Cronet_Metrics_dns_end_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_dns_end_set');
  late final _Cronet_Metrics_dns_end_set = _Cronet_Metrics_dns_end_setPtr
      .asFunction<void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_dns_end_move(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr dns_end,
  ) {
    return _Cronet_Metrics_dns_end_move(
      self,
      dns_end,
    );
  }

  late final _Cronet_Metrics_dns_end_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_dns_end_move');
  late final _Cronet_Metrics_dns_end_move = _Cronet_Metrics_dns_end_movePtr
      .asFunction<void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_connect_start_set(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr connect_start,
  ) {
    return _Cronet_Metrics_connect_start_set(
      self,
      connect_start,
    );
  }

  late final _Cronet_Metrics_connect_start_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_connect_start_set');
  late final _Cronet_Metrics_connect_start_set =
      _Cronet_Metrics_connect_start_setPtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_connect_start_move(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr connect_start,
  ) {
    return _Cronet_Metrics_connect_start_move(
      self,
      connect_start,
    );
  }

  late final _Cronet_Metrics_connect_start_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_connect_start_move');
  late final _Cronet_Metrics_connect_start_move =
      _Cronet_Metrics_connect_start_movePtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_connect_end_set(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr connect_end,
  ) {
    return _Cronet_Metrics_connect_end_set(
      self,
      connect_end,
    );
  }

  late final _Cronet_Metrics_connect_end_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_connect_end_set');
  late final _Cronet_Metrics_connect_end_set =
      _Cronet_Metrics_connect_end_setPtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_connect_end_move(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr connect_end,
  ) {
    return _Cronet_Metrics_connect_end_move(
      self,
      connect_end,
    );
  }

  late final _Cronet_Metrics_connect_end_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_connect_end_move');
  late final _Cronet_Metrics_connect_end_move =
      _Cronet_Metrics_connect_end_movePtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_ssl_start_set(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr ssl_start,
  ) {
    return _Cronet_Metrics_ssl_start_set(
      self,
      ssl_start,
    );
  }

  late final _Cronet_Metrics_ssl_start_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_ssl_start_set');
  late final _Cronet_Metrics_ssl_start_set = _Cronet_Metrics_ssl_start_setPtr
      .asFunction<void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_ssl_start_move(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr ssl_start,
  ) {
    return _Cronet_Metrics_ssl_start_move(
      self,
      ssl_start,
    );
  }

  late final _Cronet_Metrics_ssl_start_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_ssl_start_move');
  late final _Cronet_Metrics_ssl_start_move = _Cronet_Metrics_ssl_start_movePtr
      .asFunction<void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_ssl_end_set(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr ssl_end,
  ) {
    return _Cronet_Metrics_ssl_end_set(
      self,
      ssl_end,
    );
  }

  late final _Cronet_Metrics_ssl_end_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_ssl_end_set');
  late final _Cronet_Metrics_ssl_end_set = _Cronet_Metrics_ssl_end_setPtr
      .asFunction<void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_ssl_end_move(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr ssl_end,
  ) {
    return _Cronet_Metrics_ssl_end_move(
      self,
      ssl_end,
    );
  }

  late final _Cronet_Metrics_ssl_end_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_ssl_end_move');
  late final _Cronet_Metrics_ssl_end_move = _Cronet_Metrics_ssl_end_movePtr
      .asFunction<void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_sending_start_set(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr sending_start,
  ) {
    return _Cronet_Metrics_sending_start_set(
      self,
      sending_start,
    );
  }

  late final _Cronet_Metrics_sending_start_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_sending_start_set');
  late final _Cronet_Metrics_sending_start_set =
      _Cronet_Metrics_sending_start_setPtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_sending_start_move(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr sending_start,
  ) {
    return _Cronet_Metrics_sending_start_move(
      self,
      sending_start,
    );
  }

  late final _Cronet_Metrics_sending_start_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_sending_start_move');
  late final _Cronet_Metrics_sending_start_move =
      _Cronet_Metrics_sending_start_movePtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_sending_end_set(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr sending_end,
  ) {
    return _Cronet_Metrics_sending_end_set(
      self,
      sending_end,
    );
  }

  late final _Cronet_Metrics_sending_end_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_sending_end_set');
  late final _Cronet_Metrics_sending_end_set =
      _Cronet_Metrics_sending_end_setPtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_sending_end_move(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr sending_end,
  ) {
    return _Cronet_Metrics_sending_end_move(
      self,
      sending_end,
    );
  }

  late final _Cronet_Metrics_sending_end_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_sending_end_move');
  late final _Cronet_Metrics_sending_end_move =
      _Cronet_Metrics_sending_end_movePtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_push_start_set(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr push_start,
  ) {
    return _Cronet_Metrics_push_start_set(
      self,
      push_start,
    );
  }

  late final _Cronet_Metrics_push_start_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_push_start_set');
  late final _Cronet_Metrics_push_start_set = _Cronet_Metrics_push_start_setPtr
      .asFunction<void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_push_start_move(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr push_start,
  ) {
    return _Cronet_Metrics_push_start_move(
      self,
      push_start,
    );
  }

  late final _Cronet_Metrics_push_start_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_push_start_move');
  late final _Cronet_Metrics_push_start_move =
      _Cronet_Metrics_push_start_movePtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_push_end_set(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr push_end,
  ) {
    return _Cronet_Metrics_push_end_set(
      self,
      push_end,
    );
  }

  late final _Cronet_Metrics_push_end_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_push_end_set');
  late final _Cronet_Metrics_push_end_set = _Cronet_Metrics_push_end_setPtr
      .asFunction<void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_push_end_move(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr push_end,
  ) {
    return _Cronet_Metrics_push_end_move(
      self,
      push_end,
    );
  }

  late final _Cronet_Metrics_push_end_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_push_end_move');
  late final _Cronet_Metrics_push_end_move = _Cronet_Metrics_push_end_movePtr
      .asFunction<void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_response_start_set(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr response_start,
  ) {
    return _Cronet_Metrics_response_start_set(
      self,
      response_start,
    );
  }

  late final _Cronet_Metrics_response_start_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_response_start_set');
  late final _Cronet_Metrics_response_start_set =
      _Cronet_Metrics_response_start_setPtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_response_start_move(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr response_start,
  ) {
    return _Cronet_Metrics_response_start_move(
      self,
      response_start,
    );
  }

  late final _Cronet_Metrics_response_start_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_response_start_move');
  late final _Cronet_Metrics_response_start_move =
      _Cronet_Metrics_response_start_movePtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_request_end_set(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr request_end,
  ) {
    return _Cronet_Metrics_request_end_set(
      self,
      request_end,
    );
  }

  late final _Cronet_Metrics_request_end_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_request_end_set');
  late final _Cronet_Metrics_request_end_set =
      _Cronet_Metrics_request_end_setPtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_request_end_move(
    Cronet_MetricsPtr self,
    Cronet_DateTimePtr request_end,
  ) {
    return _Cronet_Metrics_request_end_move(
      self,
      request_end,
    );
  }

  late final _Cronet_Metrics_request_end_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_MetricsPtr,
              Cronet_DateTimePtr)>>('Cronet_Metrics_request_end_move');
  late final _Cronet_Metrics_request_end_move =
      _Cronet_Metrics_request_end_movePtr.asFunction<
          void Function(Cronet_MetricsPtr, Cronet_DateTimePtr)>();

  void Cronet_Metrics_socket_reused_set(
    Cronet_MetricsPtr self,
    bool socket_reused,
  ) {
    return _Cronet_Metrics_socket_reused_set(
      self,
      socket_reused,
    );
  }

  late final _Cronet_Metrics_socket_reused_setPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_MetricsPtr, ffi.Bool)>>(
      'Cronet_Metrics_socket_reused_set');
  late final _Cronet_Metrics_socket_reused_set =
      _Cronet_Metrics_socket_reused_setPtr.asFunction<
          void Function(Cronet_MetricsPtr, bool)>();

  void Cronet_Metrics_sent_byte_count_set(
    Cronet_MetricsPtr self,
    int sent_byte_count,
  ) {
    return _Cronet_Metrics_sent_byte_count_set(
      self,
      sent_byte_count,
    );
  }

  late final _Cronet_Metrics_sent_byte_count_setPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_MetricsPtr, ffi.Int64)>>(
      'Cronet_Metrics_sent_byte_count_set');
  late final _Cronet_Metrics_sent_byte_count_set =
      _Cronet_Metrics_sent_byte_count_setPtr.asFunction<
          void Function(Cronet_MetricsPtr, int)>();

  void Cronet_Metrics_received_byte_count_set(
    Cronet_MetricsPtr self,
    int received_byte_count,
  ) {
    return _Cronet_Metrics_received_byte_count_set(
      self,
      received_byte_count,
    );
  }

  late final _Cronet_Metrics_received_byte_count_setPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_MetricsPtr, ffi.Int64)>>(
      'Cronet_Metrics_received_byte_count_set');
  late final _Cronet_Metrics_received_byte_count_set =
      _Cronet_Metrics_received_byte_count_setPtr.asFunction<
          void Function(Cronet_MetricsPtr, int)>();

  Cronet_DateTimePtr Cronet_Metrics_request_start_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_request_start_get(
      self,
    );
  }

  late final _Cronet_Metrics_request_start_getPtr = _lookup<
          ffi.NativeFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>>(
      'Cronet_Metrics_request_start_get');
  late final _Cronet_Metrics_request_start_get =
      _Cronet_Metrics_request_start_getPtr.asFunction<
          Cronet_DateTimePtr Function(Cronet_MetricsPtr)>();

  Cronet_DateTimePtr Cronet_Metrics_dns_start_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_dns_start_get(
      self,
    );
  }

  late final _Cronet_Metrics_dns_start_getPtr = _lookup<
          ffi.NativeFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>>(
      'Cronet_Metrics_dns_start_get');
  late final _Cronet_Metrics_dns_start_get = _Cronet_Metrics_dns_start_getPtr
      .asFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>();

  Cronet_DateTimePtr Cronet_Metrics_dns_end_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_dns_end_get(
      self,
    );
  }

  late final _Cronet_Metrics_dns_end_getPtr = _lookup<
          ffi.NativeFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>>(
      'Cronet_Metrics_dns_end_get');
  late final _Cronet_Metrics_dns_end_get = _Cronet_Metrics_dns_end_getPtr
      .asFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>();

  Cronet_DateTimePtr Cronet_Metrics_connect_start_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_connect_start_get(
      self,
    );
  }

  late final _Cronet_Metrics_connect_start_getPtr = _lookup<
          ffi.NativeFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>>(
      'Cronet_Metrics_connect_start_get');
  late final _Cronet_Metrics_connect_start_get =
      _Cronet_Metrics_connect_start_getPtr.asFunction<
          Cronet_DateTimePtr Function(Cronet_MetricsPtr)>();

  Cronet_DateTimePtr Cronet_Metrics_connect_end_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_connect_end_get(
      self,
    );
  }

  late final _Cronet_Metrics_connect_end_getPtr = _lookup<
          ffi.NativeFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>>(
      'Cronet_Metrics_connect_end_get');
  late final _Cronet_Metrics_connect_end_get =
      _Cronet_Metrics_connect_end_getPtr.asFunction<
          Cronet_DateTimePtr Function(Cronet_MetricsPtr)>();

  Cronet_DateTimePtr Cronet_Metrics_ssl_start_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_ssl_start_get(
      self,
    );
  }

  late final _Cronet_Metrics_ssl_start_getPtr = _lookup<
          ffi.NativeFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>>(
      'Cronet_Metrics_ssl_start_get');
  late final _Cronet_Metrics_ssl_start_get = _Cronet_Metrics_ssl_start_getPtr
      .asFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>();

  Cronet_DateTimePtr Cronet_Metrics_ssl_end_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_ssl_end_get(
      self,
    );
  }

  late final _Cronet_Metrics_ssl_end_getPtr = _lookup<
          ffi.NativeFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>>(
      'Cronet_Metrics_ssl_end_get');
  late final _Cronet_Metrics_ssl_end_get = _Cronet_Metrics_ssl_end_getPtr
      .asFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>();

  Cronet_DateTimePtr Cronet_Metrics_sending_start_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_sending_start_get(
      self,
    );
  }

  late final _Cronet_Metrics_sending_start_getPtr = _lookup<
          ffi.NativeFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>>(
      'Cronet_Metrics_sending_start_get');
  late final _Cronet_Metrics_sending_start_get =
      _Cronet_Metrics_sending_start_getPtr.asFunction<
          Cronet_DateTimePtr Function(Cronet_MetricsPtr)>();

  Cronet_DateTimePtr Cronet_Metrics_sending_end_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_sending_end_get(
      self,
    );
  }

  late final _Cronet_Metrics_sending_end_getPtr = _lookup<
          ffi.NativeFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>>(
      'Cronet_Metrics_sending_end_get');
  late final _Cronet_Metrics_sending_end_get =
      _Cronet_Metrics_sending_end_getPtr.asFunction<
          Cronet_DateTimePtr Function(Cronet_MetricsPtr)>();

  Cronet_DateTimePtr Cronet_Metrics_push_start_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_push_start_get(
      self,
    );
  }

  late final _Cronet_Metrics_push_start_getPtr = _lookup<
          ffi.NativeFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>>(
      'Cronet_Metrics_push_start_get');
  late final _Cronet_Metrics_push_start_get = _Cronet_Metrics_push_start_getPtr
      .asFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>();

  Cronet_DateTimePtr Cronet_Metrics_push_end_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_push_end_get(
      self,
    );
  }

  late final _Cronet_Metrics_push_end_getPtr = _lookup<
          ffi.NativeFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>>(
      'Cronet_Metrics_push_end_get');
  late final _Cronet_Metrics_push_end_get = _Cronet_Metrics_push_end_getPtr
      .asFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>();

  Cronet_DateTimePtr Cronet_Metrics_response_start_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_response_start_get(
      self,
    );
  }

  late final _Cronet_Metrics_response_start_getPtr = _lookup<
          ffi.NativeFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>>(
      'Cronet_Metrics_response_start_get');
  late final _Cronet_Metrics_response_start_get =
      _Cronet_Metrics_response_start_getPtr.asFunction<
          Cronet_DateTimePtr Function(Cronet_MetricsPtr)>();

  Cronet_DateTimePtr Cronet_Metrics_request_end_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_request_end_get(
      self,
    );
  }

  late final _Cronet_Metrics_request_end_getPtr = _lookup<
          ffi.NativeFunction<Cronet_DateTimePtr Function(Cronet_MetricsPtr)>>(
      'Cronet_Metrics_request_end_get');
  late final _Cronet_Metrics_request_end_get =
      _Cronet_Metrics_request_end_getPtr.asFunction<
          Cronet_DateTimePtr Function(Cronet_MetricsPtr)>();

  bool Cronet_Metrics_socket_reused_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_socket_reused_get(
      self,
    );
  }

  late final _Cronet_Metrics_socket_reused_getPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Cronet_MetricsPtr)>>(
          'Cronet_Metrics_socket_reused_get');
  late final _Cronet_Metrics_socket_reused_get =
      _Cronet_Metrics_socket_reused_getPtr.asFunction<
          bool Function(Cronet_MetricsPtr)>();

  int Cronet_Metrics_sent_byte_count_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_sent_byte_count_get(
      self,
    );
  }

  late final _Cronet_Metrics_sent_byte_count_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(Cronet_MetricsPtr)>>(
          'Cronet_Metrics_sent_byte_count_get');
  late final _Cronet_Metrics_sent_byte_count_get =
      _Cronet_Metrics_sent_byte_count_getPtr.asFunction<
          int Function(Cronet_MetricsPtr)>();

  int Cronet_Metrics_received_byte_count_get(
    Cronet_MetricsPtr self,
  ) {
    return _Cronet_Metrics_received_byte_count_get(
      self,
    );
  }

  late final _Cronet_Metrics_received_byte_count_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(Cronet_MetricsPtr)>>(
          'Cronet_Metrics_received_byte_count_get');
  late final _Cronet_Metrics_received_byte_count_get =
      _Cronet_Metrics_received_byte_count_getPtr.asFunction<
          int Function(Cronet_MetricsPtr)>();

  /// ////////////////////
  Cronet_RequestFinishedInfoPtr Cronet_RequestFinishedInfo_Create() {
    return _Cronet_RequestFinishedInfo_Create();
  }

  late final _Cronet_RequestFinishedInfo_CreatePtr =
      _lookup<ffi.NativeFunction<Cronet_RequestFinishedInfoPtr Function()>>(
          'Cronet_RequestFinishedInfo_Create');
  late final _Cronet_RequestFinishedInfo_Create =
      _Cronet_RequestFinishedInfo_CreatePtr.asFunction<
          Cronet_RequestFinishedInfoPtr Function()>();

  void Cronet_RequestFinishedInfo_Destroy(
    Cronet_RequestFinishedInfoPtr self,
  ) {
    return _Cronet_RequestFinishedInfo_Destroy(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfo_DestroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_RequestFinishedInfoPtr)>>(
      'Cronet_RequestFinishedInfo_Destroy');
  late final _Cronet_RequestFinishedInfo_Destroy =
      _Cronet_RequestFinishedInfo_DestroyPtr.asFunction<
          void Function(Cronet_RequestFinishedInfoPtr)>();

  void Cronet_RequestFinishedInfo_metrics_set(
    Cronet_RequestFinishedInfoPtr self,
    Cronet_MetricsPtr metrics,
  ) {
    return _Cronet_RequestFinishedInfo_metrics_set(
      self,
      metrics,
    );
  }

  late final _Cronet_RequestFinishedInfo_metrics_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_RequestFinishedInfoPtr,
              Cronet_MetricsPtr)>>('Cronet_RequestFinishedInfo_metrics_set');
  late final _Cronet_RequestFinishedInfo_metrics_set =
      _Cronet_RequestFinishedInfo_metrics_setPtr.asFunction<
          void Function(Cronet_RequestFinishedInfoPtr, Cronet_MetricsPtr)>();

  void Cronet_RequestFinishedInfo_metrics_move(
    Cronet_RequestFinishedInfoPtr self,
    Cronet_MetricsPtr metrics,
  ) {
    return _Cronet_RequestFinishedInfo_metrics_move(
      self,
      metrics,
    );
  }

  late final _Cronet_RequestFinishedInfo_metrics_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_RequestFinishedInfoPtr,
              Cronet_MetricsPtr)>>('Cronet_RequestFinishedInfo_metrics_move');
  late final _Cronet_RequestFinishedInfo_metrics_move =
      _Cronet_RequestFinishedInfo_metrics_movePtr.asFunction<
          void Function(Cronet_RequestFinishedInfoPtr, Cronet_MetricsPtr)>();

  void Cronet_RequestFinishedInfo_annotations_add(
    Cronet_RequestFinishedInfoPtr self,
    Cronet_RawDataPtr element,
  ) {
    return _Cronet_RequestFinishedInfo_annotations_add(
      self,
      element,
    );
  }

  late final _Cronet_RequestFinishedInfo_annotations_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  Cronet_RequestFinishedInfoPtr, Cronet_RawDataPtr)>>(
      'Cronet_RequestFinishedInfo_annotations_add');
  late final _Cronet_RequestFinishedInfo_annotations_add =
      _Cronet_RequestFinishedInfo_annotations_addPtr.asFunction<
          void Function(Cronet_RequestFinishedInfoPtr, Cronet_RawDataPtr)>();

  void Cronet_RequestFinishedInfo_finished_reason_set(
    Cronet_RequestFinishedInfoPtr self,
    int finished_reason,
  ) {
    return _Cronet_RequestFinishedInfo_finished_reason_set(
      self,
      finished_reason,
    );
  }

  late final _Cronet_RequestFinishedInfo_finished_reason_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_RequestFinishedInfoPtr,
              ffi.Int32)>>('Cronet_RequestFinishedInfo_finished_reason_set');
  late final _Cronet_RequestFinishedInfo_finished_reason_set =
      _Cronet_RequestFinishedInfo_finished_reason_setPtr.asFunction<
          void Function(Cronet_RequestFinishedInfoPtr, int)>();

  Cronet_MetricsPtr Cronet_RequestFinishedInfo_metrics_get(
    Cronet_RequestFinishedInfoPtr self,
  ) {
    return _Cronet_RequestFinishedInfo_metrics_get(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfo_metrics_getPtr = _lookup<
          ffi.NativeFunction<
              Cronet_MetricsPtr Function(Cronet_RequestFinishedInfoPtr)>>(
      'Cronet_RequestFinishedInfo_metrics_get');
  late final _Cronet_RequestFinishedInfo_metrics_get =
      _Cronet_RequestFinishedInfo_metrics_getPtr.asFunction<
          Cronet_MetricsPtr Function(Cronet_RequestFinishedInfoPtr)>();

  int Cronet_RequestFinishedInfo_annotations_size(
    Cronet_RequestFinishedInfoPtr self,
  ) {
    return _Cronet_RequestFinishedInfo_annotations_size(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfo_annotations_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint32 Function(Cronet_RequestFinishedInfoPtr)>>(
      'Cronet_RequestFinishedInfo_annotations_size');
  late final _Cronet_RequestFinishedInfo_annotations_size =
      _Cronet_RequestFinishedInfo_annotations_sizePtr.asFunction<
          int Function(Cronet_RequestFinishedInfoPtr)>();

  Cronet_RawDataPtr Cronet_RequestFinishedInfo_annotations_at(
    Cronet_RequestFinishedInfoPtr self,
    int index,
  ) {
    return _Cronet_RequestFinishedInfo_annotations_at(
      self,
      index,
    );
  }

  late final _Cronet_RequestFinishedInfo_annotations_atPtr = _lookup<
      ffi.NativeFunction<
          Cronet_RawDataPtr Function(Cronet_RequestFinishedInfoPtr,
              ffi.Uint32)>>('Cronet_RequestFinishedInfo_annotations_at');
  late final _Cronet_RequestFinishedInfo_annotations_at =
      _Cronet_RequestFinishedInfo_annotations_atPtr.asFunction<
          Cronet_RawDataPtr Function(Cronet_RequestFinishedInfoPtr, int)>();

  void Cronet_RequestFinishedInfo_annotations_clear(
    Cronet_RequestFinishedInfoPtr self,
  ) {
    return _Cronet_RequestFinishedInfo_annotations_clear(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfo_annotations_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_RequestFinishedInfoPtr)>>(
      'Cronet_RequestFinishedInfo_annotations_clear');
  late final _Cronet_RequestFinishedInfo_annotations_clear =
      _Cronet_RequestFinishedInfo_annotations_clearPtr.asFunction<
          void Function(Cronet_RequestFinishedInfoPtr)>();

  int Cronet_RequestFinishedInfo_finished_reason_get(
    Cronet_RequestFinishedInfoPtr self,
  ) {
    return _Cronet_RequestFinishedInfo_finished_reason_get(
      self,
    );
  }

  late final _Cronet_RequestFinishedInfo_finished_reason_getPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(Cronet_RequestFinishedInfoPtr)>>(
      'Cronet_RequestFinishedInfo_finished_reason_get');
  late final _Cronet_RequestFinishedInfo_finished_reason_get =
      _Cronet_RequestFinishedInfo_finished_reason_getPtr.asFunction<
          int Function(Cronet_RequestFinishedInfoPtr)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final Cronet _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<Cronet_BufferPtr Function()>>
      get Cronet_Buffer_Create => _library._Cronet_Buffer_CreatePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Cronet_BufferPtr, ffi.Uint64)>>
      get Cronet_Buffer_InitWithAlloc =>
          _library._Cronet_Buffer_InitWithAllocPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Cronet_RunnablePtr)>>
      get Cronet_Runnable_Destroy => _library._Cronet_Runnable_DestroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Cronet_RunnablePtr)>>
      get Cronet_Runnable_Run => _library._Cronet_Runnable_RunPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Cronet_ExecutorPtr)>>
      get Cronet_Executor_Destroy => _library._Cronet_Executor_DestroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Cronet_ExecutorPtr, Cronet_ClientContext)>>
      get Cronet_Executor_SetClientContext =>
          _library._Cronet_Executor_SetClientContextPtr;
  ffi.Pointer<
          ffi.NativeFunction<Cronet_ClientContext Function(Cronet_ExecutorPtr)>>
      get Cronet_Executor_GetClientContext =>
          _library._Cronet_Executor_GetClientContextPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              Cronet_ExecutorPtr Function(Cronet_Executor_ExecuteFunc)>>
      get Cronet_Executor_CreateWith => _library._Cronet_Executor_CreateWithPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Cronet_EnginePtr)>>
      get Cronet_Engine_Destroy => _library._Cronet_Engine_DestroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(Cronet_EnginePtr)>>
      get Cronet_Engine_Shutdown => _library._Cronet_Engine_ShutdownPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              Cronet_ClientContext Function(Cronet_UploadDataProviderPtr)>>
      get Cronet_UploadDataProvider_GetClientContext =>
          _library._Cronet_UploadDataProvider_GetClientContextPtr;
  ffi.Pointer<ffi.NativeFunction<Cronet_String Function(Cronet_ErrorPtr)>>
      get Cronet_Error_message_get => _library._Cronet_Error_message_getPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(Cronet_UrlResponseInfoPtr)>>
      get Cronet_UrlResponseInfo_http_status_code_get =>
          _library._Cronet_UrlResponseInfo_http_status_code_getPtr;
  ffi.Pointer<
          ffi.NativeFunction<Cronet_String Function(Cronet_UrlResponseInfoPtr)>>
      get Cronet_UrlResponseInfo_http_status_text_get =>
          _library._Cronet_UrlResponseInfo_http_status_text_getPtr;
}

class Cronet_Buffer extends ffi.Opaque {}

class Cronet_BufferCallback extends ffi.Opaque {}

class Cronet_Runnable extends ffi.Opaque {}

class Cronet_Executor extends ffi.Opaque {}

class Cronet_Engine extends ffi.Opaque {}

class Cronet_UrlRequestStatusListener extends ffi.Opaque {}

class Cronet_UrlRequestCallback extends ffi.Opaque {}

class Cronet_UploadDataSink extends ffi.Opaque {}

class Cronet_UploadDataProvider extends ffi.Opaque {}

class Cronet_UrlRequest extends ffi.Opaque {}

class Cronet_RequestFinishedInfoListener extends ffi.Opaque {}

class Cronet_Error extends ffi.Opaque {}

class Cronet_QuicHint extends ffi.Opaque {}

class Cronet_PublicKeyPins extends ffi.Opaque {}

class Cronet_EngineParams extends ffi.Opaque {}

class Cronet_HttpHeader extends ffi.Opaque {}

class Cronet_UrlResponseInfo extends ffi.Opaque {}

class Cronet_UrlRequestParams extends ffi.Opaque {}

class Cronet_DateTime extends ffi.Opaque {}

class Cronet_Metrics extends ffi.Opaque {}

class Cronet_RequestFinishedInfo extends ffi.Opaque {}

abstract class Cronet_RESULT {
  static const int Cronet_RESULT_SUCCESS = 0;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT = -100;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_STORAGE_PATH_MUST_EXIST =
      -101;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_PIN = -102;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HOSTNAME = -103;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_METHOD = -104;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_HEADER = -105;
  static const int Cronet_RESULT_ILLEGAL_STATE = -200;
  static const int Cronet_RESULT_ILLEGAL_STATE_STORAGE_PATH_IN_USE = -201;
  static const int
      Cronet_RESULT_ILLEGAL_STATE_CANNOT_SHUTDOWN_ENGINE_FROM_NETWORK_THREAD =
      -202;
  static const int Cronet_RESULT_ILLEGAL_STATE_ENGINE_ALREADY_STARTED = -203;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_STARTED = -204;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_NOT_INITIALIZED = -205;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_INITIALIZED =
      -206;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_NOT_STARTED = -207;
  static const int Cronet_RESULT_ILLEGAL_STATE_UNEXPECTED_REDIRECT = -208;
  static const int Cronet_RESULT_ILLEGAL_STATE_UNEXPECTED_READ = -209;
  static const int Cronet_RESULT_ILLEGAL_STATE_READ_FAILED = -210;
  static const int Cronet_RESULT_NULL_POINTER = -300;
  static const int Cronet_RESULT_NULL_POINTER_HOSTNAME = -301;
  static const int Cronet_RESULT_NULL_POINTER_SHA256_PINS = -302;
  static const int Cronet_RESULT_NULL_POINTER_EXPIRATION_DATE = -303;
  static const int Cronet_RESULT_NULL_POINTER_ENGINE = -304;
  static const int Cronet_RESULT_NULL_POINTER_URL = -305;
  static const int Cronet_RESULT_NULL_POINTER_CALLBACK = -306;
  static const int Cronet_RESULT_NULL_POINTER_EXECUTOR = -307;
  static const int Cronet_RESULT_NULL_POINTER_METHOD = -308;
  static const int Cronet_RESULT_NULL_POINTER_HEADER_NAME = -309;
  static const int Cronet_RESULT_NULL_POINTER_HEADER_VALUE = -310;
  static const int Cronet_RESULT_NULL_POINTER_PARAMS = -311;
  static const int
      Cronet_RESULT_NULL_POINTER_REQUEST_FINISHED_INFO_LISTENER_EXECUTOR = -312;
}

abstract class Cronet_Error_ERROR_CODE {
  static const int Cronet_Error_ERROR_CODE_ERROR_CALLBACK = 0;
  static const int Cronet_Error_ERROR_CODE_ERROR_HOSTNAME_NOT_RESOLVED = 1;
  static const int Cronet_Error_ERROR_CODE_ERROR_INTERNET_DISCONNECTED = 2;
  static const int Cronet_Error_ERROR_CODE_ERROR_NETWORK_CHANGED = 3;
  static const int Cronet_Error_ERROR_CODE_ERROR_TIMED_OUT = 4;
  static const int Cronet_Error_ERROR_CODE_ERROR_CONNECTION_CLOSED = 5;
  static const int Cronet_Error_ERROR_CODE_ERROR_CONNECTION_TIMED_OUT = 6;
  static const int Cronet_Error_ERROR_CODE_ERROR_CONNECTION_REFUSED = 7;
  static const int Cronet_Error_ERROR_CODE_ERROR_CONNECTION_RESET = 8;
  static const int Cronet_Error_ERROR_CODE_ERROR_ADDRESS_UNREACHABLE = 9;
  static const int Cronet_Error_ERROR_CODE_ERROR_QUIC_PROTOCOL_FAILED = 10;
  static const int Cronet_Error_ERROR_CODE_ERROR_OTHER = 11;
}

abstract class Cronet_EngineParams_HTTP_CACHE_MODE {
  static const int Cronet_EngineParams_HTTP_CACHE_MODE_DISABLED = 0;
  static const int Cronet_EngineParams_HTTP_CACHE_MODE_IN_MEMORY = 1;
  static const int Cronet_EngineParams_HTTP_CACHE_MODE_DISK_NO_HTTP = 2;
  static const int Cronet_EngineParams_HTTP_CACHE_MODE_DISK = 3;
}

abstract class Cronet_UrlRequestParams_REQUEST_PRIORITY {
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_IDLE = 0;
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_LOWEST = 1;
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_LOW = 2;
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_MEDIUM = 3;
  static const int
      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_HIGHEST = 4;
}

abstract class Cronet_UrlRequestParams_IDEMPOTENCY {
  static const int Cronet_UrlRequestParams_IDEMPOTENCY_DEFAULT_IDEMPOTENCY = 0;
  static const int Cronet_UrlRequestParams_IDEMPOTENCY_IDEMPOTENT = 1;
  static const int Cronet_UrlRequestParams_IDEMPOTENCY_NOT_IDEMPOTENT = 2;
}

abstract class Cronet_RequestFinishedInfo_FINISHED_REASON {
  static const int Cronet_RequestFinishedInfo_FINISHED_REASON_SUCCEEDED = 0;
  static const int Cronet_RequestFinishedInfo_FINISHED_REASON_FAILED = 1;
  static const int Cronet_RequestFinishedInfo_FINISHED_REASON_CANCELED = 2;
}

abstract class Cronet_UrlRequestStatusListener_Status {
  static const int Cronet_UrlRequestStatusListener_Status_INVALID = -1;
  static const int Cronet_UrlRequestStatusListener_Status_IDLE = 0;
  static const int
      Cronet_UrlRequestStatusListener_Status_WAITING_FOR_STALLED_SOCKET_POOL =
      1;
  static const int
      Cronet_UrlRequestStatusListener_Status_WAITING_FOR_AVAILABLE_SOCKET = 2;
  static const int Cronet_UrlRequestStatusListener_Status_WAITING_FOR_DELEGATE =
      3;
  static const int Cronet_UrlRequestStatusListener_Status_WAITING_FOR_CACHE = 4;
  static const int Cronet_UrlRequestStatusListener_Status_DOWNLOADING_PAC_FILE =
      5;
  static const int
      Cronet_UrlRequestStatusListener_Status_RESOLVING_PROXY_FOR_URL = 6;
  static const int
      Cronet_UrlRequestStatusListener_Status_RESOLVING_HOST_IN_PAC_FILE = 7;
  static const int
      Cronet_UrlRequestStatusListener_Status_ESTABLISHING_PROXY_TUNNEL = 8;
  static const int Cronet_UrlRequestStatusListener_Status_RESOLVING_HOST = 9;
  static const int Cronet_UrlRequestStatusListener_Status_CONNECTING = 10;
  static const int Cronet_UrlRequestStatusListener_Status_SSL_HANDSHAKE = 11;
  static const int Cronet_UrlRequestStatusListener_Status_SENDING_REQUEST = 12;
  static const int Cronet_UrlRequestStatusListener_Status_WAITING_FOR_RESPONSE =
      13;
  static const int Cronet_UrlRequestStatusListener_Status_READING_RESPONSE = 14;
}

typedef Cronet_BufferPtr = ffi.Pointer<Cronet_Buffer>;
typedef Cronet_ClientContext = ffi.Pointer<ffi.Void>;
typedef Cronet_RawDataPtr = ffi.Pointer<ffi.Void>;
typedef Cronet_BufferCallbackPtr = ffi.Pointer<Cronet_BufferCallback>;
typedef Cronet_Buffer_InitWithDataAndCallbackFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_BufferPtr, Cronet_RawDataPtr, ffi.Uint64,
            Cronet_BufferCallbackPtr)>>;
typedef Cronet_Buffer_InitWithAllocFunc = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(Cronet_BufferPtr, ffi.Uint64)>>;
typedef Cronet_Buffer_GetSizeFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Uint64 Function(Cronet_BufferPtr)>>;
typedef Cronet_Buffer_GetDataFunc = ffi
    .Pointer<ffi.NativeFunction<Cronet_RawDataPtr Function(Cronet_BufferPtr)>>;
typedef Cronet_BufferCallback_OnDestroyFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_BufferCallbackPtr, Cronet_BufferPtr)>>;
typedef Cronet_RunnablePtr = ffi.Pointer<Cronet_Runnable>;
typedef Cronet_Runnable_RunFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Cronet_RunnablePtr)>>;
typedef Cronet_ExecutorPtr = ffi.Pointer<Cronet_Executor>;
typedef Cronet_Executor_ExecuteFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_ExecutorPtr, Cronet_RunnablePtr)>>;
typedef Cronet_EnginePtr = ffi.Pointer<Cronet_Engine>;
typedef Cronet_EngineParamsPtr = ffi.Pointer<Cronet_EngineParams>;
typedef Cronet_String = ffi.Pointer<ffi.Char>;
typedef Cronet_RequestFinishedInfoListenerPtr
    = ffi.Pointer<Cronet_RequestFinishedInfoListener>;
typedef Cronet_Engine_StartWithParamsFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(Cronet_EnginePtr, Cronet_EngineParamsPtr)>>;
typedef Cronet_Engine_StartNetLogToFileFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(Cronet_EnginePtr, Cronet_String, ffi.Bool)>>;
typedef Cronet_Engine_StopNetLogFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Cronet_EnginePtr)>>;
typedef Cronet_Engine_ShutdownFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(Cronet_EnginePtr)>>;
typedef Cronet_Engine_GetVersionStringFunc
    = ffi.Pointer<ffi.NativeFunction<Cronet_String Function(Cronet_EnginePtr)>>;
typedef Cronet_Engine_GetDefaultUserAgentFunc
    = ffi.Pointer<ffi.NativeFunction<Cronet_String Function(Cronet_EnginePtr)>>;
typedef Cronet_Engine_AddRequestFinishedListenerFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_EnginePtr,
            Cronet_RequestFinishedInfoListenerPtr, Cronet_ExecutorPtr)>>;
typedef Cronet_Engine_RemoveRequestFinishedListenerFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            Cronet_EnginePtr, Cronet_RequestFinishedInfoListenerPtr)>>;
typedef Cronet_UrlRequestStatusListenerPtr
    = ffi.Pointer<Cronet_UrlRequestStatusListener>;
typedef Cronet_UrlRequestStatusListener_OnStatusFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_UrlRequestStatusListenerPtr, ffi.Int32)>>;
typedef Cronet_UrlRequestCallbackPtr = ffi.Pointer<Cronet_UrlRequestCallback>;
typedef Cronet_UrlRequestPtr = ffi.Pointer<Cronet_UrlRequest>;
typedef Cronet_UrlResponseInfoPtr = ffi.Pointer<Cronet_UrlResponseInfo>;
typedef Cronet_ErrorPtr = ffi.Pointer<Cronet_Error>;
typedef Cronet_UrlRequestCallback_OnRedirectReceivedFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
            Cronet_UrlResponseInfoPtr, Cronet_String)>>;
typedef Cronet_UrlRequestCallback_OnResponseStartedFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
            Cronet_UrlResponseInfoPtr)>>;
typedef Cronet_UrlRequestCallback_OnReadCompletedFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
            Cronet_UrlResponseInfoPtr, Cronet_BufferPtr, ffi.Uint64)>>;
typedef Cronet_UrlRequestCallback_OnSucceededFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
            Cronet_UrlResponseInfoPtr)>>;
typedef Cronet_UrlRequestCallback_OnFailedFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
            Cronet_UrlResponseInfoPtr, Cronet_ErrorPtr)>>;
typedef Cronet_UrlRequestCallback_OnCanceledFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
            Cronet_UrlResponseInfoPtr)>>;
typedef Cronet_UploadDataSinkPtr = ffi.Pointer<Cronet_UploadDataSink>;
typedef Cronet_UploadDataSink_OnReadSucceededFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_UploadDataSinkPtr, ffi.Uint64, ffi.Bool)>>;
typedef Cronet_UploadDataSink_OnReadErrorFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_UploadDataSinkPtr, Cronet_String)>>;
typedef Cronet_UploadDataSink_OnRewindSucceededFunc = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(Cronet_UploadDataSinkPtr)>>;
typedef Cronet_UploadDataSink_OnRewindErrorFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_UploadDataSinkPtr, Cronet_String)>>;
typedef Cronet_UploadDataProviderPtr = ffi.Pointer<Cronet_UploadDataProvider>;
typedef Cronet_UploadDataProvider_GetLengthFunc = ffi.Pointer<
    ffi.NativeFunction<ffi.Int64 Function(Cronet_UploadDataProviderPtr)>>;
typedef Cronet_UploadDataProvider_ReadFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_UploadDataProviderPtr,
            Cronet_UploadDataSinkPtr, Cronet_BufferPtr)>>;
typedef Cronet_UploadDataProvider_RewindFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            Cronet_UploadDataProviderPtr, Cronet_UploadDataSinkPtr)>>;
typedef Cronet_UploadDataProvider_CloseFunc = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(Cronet_UploadDataProviderPtr)>>;
typedef Cronet_UrlRequestParamsPtr = ffi.Pointer<Cronet_UrlRequestParams>;
typedef Cronet_UrlRequest_InitWithParamsFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            Cronet_UrlRequestPtr,
            Cronet_EnginePtr,
            Cronet_String,
            Cronet_UrlRequestParamsPtr,
            Cronet_UrlRequestCallbackPtr,
            Cronet_ExecutorPtr)>>;
typedef Cronet_UrlRequest_StartFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(Cronet_UrlRequestPtr)>>;
typedef Cronet_UrlRequest_FollowRedirectFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(Cronet_UrlRequestPtr)>>;
typedef Cronet_UrlRequest_ReadFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(Cronet_UrlRequestPtr, Cronet_BufferPtr)>>;
typedef Cronet_UrlRequest_CancelFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Cronet_UrlRequestPtr)>>;
typedef Cronet_UrlRequest_IsDoneFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Cronet_UrlRequestPtr)>>;
typedef Cronet_UrlRequest_GetStatusFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            Cronet_UrlRequestPtr, Cronet_UrlRequestStatusListenerPtr)>>;
typedef Cronet_RequestFinishedInfoPtr = ffi.Pointer<Cronet_RequestFinishedInfo>;
typedef Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            Cronet_RequestFinishedInfoListenerPtr,
            Cronet_RequestFinishedInfoPtr,
            Cronet_UrlResponseInfoPtr,
            Cronet_ErrorPtr)>>;
typedef Cronet_QuicHintPtr = ffi.Pointer<Cronet_QuicHint>;
typedef Cronet_PublicKeyPinsPtr = ffi.Pointer<Cronet_PublicKeyPins>;
typedef Cronet_HttpHeaderPtr = ffi.Pointer<Cronet_HttpHeader>;
typedef Cronet_DateTimePtr = ffi.Pointer<Cronet_DateTime>;
typedef Cronet_MetricsPtr = ffi.Pointer<Cronet_Metrics>;
