// Copyright (c) 2021, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to Wrapper for Cronet
class Wrapper {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Wrapper(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Wrapper.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int InitDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _InitDartApiDL(
      data,
    );
  }

  late final _InitDartApiDL_ptr =
      _lookup<ffi.NativeFunction<_c_InitDartApiDL>>('InitDartApiDL');
  late final _dart_InitDartApiDL _InitDartApiDL =
      _InitDartApiDL_ptr.asFunction<_dart_InitDartApiDL>();

  void InitCronetApi(
    ffi.Pointer<ffi.NativeFunction<_typedefC_1>> Cronet_Engine_Shutdown,
    ffi.Pointer<ffi.NativeFunction<_typedefC_2>> Cronet_Engine_Destroy,
    ffi.Pointer<ffi.NativeFunction<_typedefC_3>> Cronet_Buffer_Create,
    ffi.Pointer<ffi.NativeFunction<_typedefC_4>> Cronet_Buffer_InitWithAlloc,
    ffi.Pointer<ffi.NativeFunction<_typedefC_5>>
        Cronet_UrlRequestCallback_CreateWith,
    ffi.Pointer<ffi.NativeFunction<_typedefC_6>>
        Cronet_UrlRequest_InitWithParams,
  ) {
    return _InitCronetApi(
      Cronet_Engine_Shutdown,
      Cronet_Engine_Destroy,
      Cronet_Buffer_Create,
      Cronet_Buffer_InitWithAlloc,
      Cronet_UrlRequestCallback_CreateWith,
      Cronet_UrlRequest_InitWithParams,
    );
  }

  late final _InitCronetApi_ptr =
      _lookup<ffi.NativeFunction<_c_InitCronetApi>>('InitCronetApi');
  late final _dart_InitCronetApi _InitCronetApi =
      _InitCronetApi_ptr.asFunction<_dart_InitCronetApi>();

  void InitCronetExecutorApi(
    ffi.Pointer<ffi.NativeFunction<_typedefC_7>> Cronet_Executor_CreateWith,
    ffi.Pointer<ffi.NativeFunction<_typedefC_8>>
        Cronet_Executor_SetClientContext,
    ffi.Pointer<ffi.NativeFunction<_typedefC_9>>
        Cronet_Executor_GetClientContext,
    ffi.Pointer<ffi.NativeFunction<_typedefC_10>> Cronet_Executor_Destroy,
    ffi.Pointer<ffi.NativeFunction<_typedefC_11>> Cronet_Runnable_Run,
    ffi.Pointer<ffi.NativeFunction<_typedefC_12>> Cronet_Runnable_Destroy,
  ) {
    return _InitCronetExecutorApi(
      Cronet_Executor_CreateWith,
      Cronet_Executor_SetClientContext,
      Cronet_Executor_GetClientContext,
      Cronet_Executor_Destroy,
      Cronet_Runnable_Run,
      Cronet_Runnable_Destroy,
    );
  }

  late final _InitCronetExecutorApi_ptr =
      _lookup<ffi.NativeFunction<_c_InitCronetExecutorApi>>(
          'InitCronetExecutorApi');
  late final _dart_InitCronetExecutorApi _InitCronetExecutorApi =
      _InitCronetExecutorApi_ptr.asFunction<_dart_InitCronetExecutorApi>();

  ffi.Pointer<ffi.Void> Create_Executor() {
    return _Create_Executor();
  }

  late final _Create_Executor_ptr =
      _lookup<ffi.NativeFunction<_c_Create_Executor>>('Create_Executor');
  late final _dart_Create_Executor _Create_Executor =
      _Create_Executor_ptr.asFunction<_dart_Create_Executor>();

  void Destroy_Executor(
    ffi.Pointer<ffi.Void> executor,
  ) {
    return _Destroy_Executor(
      executor,
    );
  }

  late final _Destroy_Executor_ptr =
      _lookup<ffi.NativeFunction<_c_Destroy_Executor>>('Destroy_Executor');
  late final _dart_Destroy_Executor _Destroy_Executor =
      _Destroy_Executor_ptr.asFunction<_dart_Destroy_Executor>();

  void RegisterHttpClient(
    Object h,
    ffi.Pointer<Cronet_EnginePtr> ce,
  ) {
    return _RegisterHttpClient(
      h,
      ce,
    );
  }

  late final _RegisterHttpClient_ptr =
      _lookup<ffi.NativeFunction<_c_RegisterHttpClient>>('RegisterHttpClient');
  late final _dart_RegisterHttpClient _RegisterHttpClient =
      _RegisterHttpClient_ptr.asFunction<_dart_RegisterHttpClient>();

  void RegisterCallbackHandler(
    int nativePort,
    ffi.Pointer<Cronet_UrlRequestPtr> rp,
  ) {
    return _RegisterCallbackHandler(
      nativePort,
      rp,
    );
  }

  late final _RegisterCallbackHandler_ptr =
      _lookup<ffi.NativeFunction<_c_RegisterCallbackHandler>>(
          'RegisterCallbackHandler');
  late final _dart_RegisterCallbackHandler _RegisterCallbackHandler =
      _RegisterCallbackHandler_ptr.asFunction<_dart_RegisterCallbackHandler>();

  void RemoveRequest(
    ffi.Pointer<Cronet_UrlRequestPtr> rp,
  ) {
    return _RemoveRequest(
      rp,
    );
  }

  late final _RemoveRequest_ptr =
      _lookup<ffi.NativeFunction<_c_RemoveRequest>>('RemoveRequest');
  late final _dart_RemoveRequest _RemoveRequest =
      _RemoveRequest_ptr.asFunction<_dart_RemoveRequest>();

  int Cronet_UrlRequest_Init(
    ffi.Pointer<Cronet_UrlRequestPtr> self,
    ffi.Pointer<Cronet_EnginePtr> engine,
    ffi.Pointer<ffi.Int8> url,
    ffi.Pointer<Cronet_UrlRequestParamsPtr> params,
    ffi.Pointer<ffi.Void> _executor,
  ) {
    return _Cronet_UrlRequest_Init(
      self,
      engine,
      url,
      params,
      _executor,
    );
  }

  late final _Cronet_UrlRequest_Init_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequest_Init>>(
          'Cronet_UrlRequest_Init');
  late final _dart_Cronet_UrlRequest_Init _Cronet_UrlRequest_Init =
      _Cronet_UrlRequest_Init_ptr.asFunction<_dart_Cronet_UrlRequest_Init>();
}

class Cronet_EnginePtr extends ffi.Opaque {}

class Cronet_BufferPtr extends ffi.Opaque {}

class Cronet_UrlRequestCallbackPtr extends ffi.Opaque {}

class Cronet_UrlRequestPtr extends ffi.Opaque {}

class Cronet_UrlResponseInfoPtr extends ffi.Opaque {}

class Cronet_ErrorPtr extends ffi.Opaque {}

class Cronet_UrlRequestParamsPtr extends ffi.Opaque {}

class Cronet_ExecutorPtr extends ffi.Opaque {}

class Cronet_RunnablePtr extends ffi.Opaque {}

typedef _c_InitDartApiDL = ffi.IntPtr Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_InitDartApiDL = int Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _typedefC_1 = ffi.Int32 Function(
  ffi.Pointer<Cronet_EnginePtr>,
);

typedef _typedefC_2 = ffi.Void Function(
  ffi.Pointer<Cronet_EnginePtr>,
);

typedef _typedefC_3 = ffi.Pointer<Cronet_BufferPtr> Function();

typedef _typedefC_4 = ffi.Void Function(
  ffi.Pointer<Cronet_BufferPtr>,
  ffi.Uint64,
);

typedef Cronet_UrlRequestCallback_OnRedirectReceivedFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr>,
  ffi.Pointer<Cronet_UrlRequestPtr>,
  ffi.Pointer<Cronet_UrlResponseInfoPtr>,
  ffi.Pointer<ffi.Int8>,
);

typedef Cronet_UrlRequestCallback_OnResponseStartedFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr>,
  ffi.Pointer<Cronet_UrlRequestPtr>,
  ffi.Pointer<Cronet_UrlResponseInfoPtr>,
);

typedef Cronet_UrlRequestCallback_OnReadCompletedFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr>,
  ffi.Pointer<Cronet_UrlRequestPtr>,
  ffi.Pointer<Cronet_UrlResponseInfoPtr>,
  ffi.Pointer<Cronet_BufferPtr>,
  ffi.Uint64,
);

typedef Cronet_UrlRequestCallback_OnSucceededFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr>,
  ffi.Pointer<Cronet_UrlRequestPtr>,
  ffi.Pointer<Cronet_UrlResponseInfoPtr>,
);

typedef Cronet_UrlRequestCallback_OnFailedFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr>,
  ffi.Pointer<Cronet_UrlRequestPtr>,
  ffi.Pointer<Cronet_UrlResponseInfoPtr>,
  ffi.Pointer<Cronet_ErrorPtr>,
);

typedef Cronet_UrlRequestCallback_OnCanceledFunc = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr>,
  ffi.Pointer<Cronet_UrlRequestPtr>,
  ffi.Pointer<Cronet_UrlResponseInfoPtr>,
);

typedef _typedefC_5 = ffi.Pointer<Cronet_UrlRequestCallbackPtr> Function(
  ffi.Pointer<
      ffi.NativeFunction<Cronet_UrlRequestCallback_OnRedirectReceivedFunc>>,
  ffi.Pointer<
      ffi.NativeFunction<Cronet_UrlRequestCallback_OnResponseStartedFunc>>,
  ffi.Pointer<
      ffi.NativeFunction<Cronet_UrlRequestCallback_OnReadCompletedFunc>>,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestCallback_OnSucceededFunc>>,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestCallback_OnFailedFunc>>,
  ffi.Pointer<ffi.NativeFunction<Cronet_UrlRequestCallback_OnCanceledFunc>>,
);

typedef _typedefC_6 = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestPtr>,
  ffi.Pointer<Cronet_EnginePtr>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<Cronet_UrlRequestParamsPtr>,
  ffi.Pointer<Cronet_UrlRequestCallbackPtr>,
  ffi.Pointer<Cronet_ExecutorPtr>,
);

typedef _c_InitCronetApi = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> Cronet_Engine_Shutdown,
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> Cronet_Engine_Destroy,
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> Cronet_Buffer_Create,
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> Cronet_Buffer_InitWithAlloc,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>>
      Cronet_UrlRequestCallback_CreateWith,
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> Cronet_UrlRequest_InitWithParams,
);

typedef _dart_InitCronetApi = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> Cronet_Engine_Shutdown,
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> Cronet_Engine_Destroy,
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> Cronet_Buffer_Create,
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> Cronet_Buffer_InitWithAlloc,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>>
      Cronet_UrlRequestCallback_CreateWith,
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> Cronet_UrlRequest_InitWithParams,
);

typedef Cronet_Executor_ExecuteFunc = ffi.Void Function(
  ffi.Pointer<Cronet_ExecutorPtr>,
  ffi.Pointer<Cronet_RunnablePtr>,
);

typedef _typedefC_7 = ffi.Pointer<Cronet_ExecutorPtr> Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_Executor_ExecuteFunc>>,
);

typedef _typedefC_8 = ffi.Void Function(
  ffi.Pointer<Cronet_ExecutorPtr>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_9 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_ExecutorPtr>,
);

typedef _typedefC_10 = ffi.Void Function(
  ffi.Pointer<Cronet_ExecutorPtr>,
);

typedef _typedefC_11 = ffi.Void Function(
  ffi.Pointer<Cronet_RunnablePtr>,
);

typedef _typedefC_12 = ffi.Void Function(
  ffi.Pointer<Cronet_RunnablePtr>,
);

typedef _c_InitCronetExecutorApi = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> Cronet_Executor_CreateWith,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> Cronet_Executor_SetClientContext,
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> Cronet_Executor_GetClientContext,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> Cronet_Executor_Destroy,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> Cronet_Runnable_Run,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> Cronet_Runnable_Destroy,
);

typedef _dart_InitCronetExecutorApi = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> Cronet_Executor_CreateWith,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> Cronet_Executor_SetClientContext,
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> Cronet_Executor_GetClientContext,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> Cronet_Executor_Destroy,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> Cronet_Runnable_Run,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> Cronet_Runnable_Destroy,
);

typedef _c_Create_Executor = ffi.Pointer<ffi.Void> Function();

typedef _dart_Create_Executor = ffi.Pointer<ffi.Void> Function();

typedef _c_Destroy_Executor = ffi.Void Function(
  ffi.Pointer<ffi.Void> executor,
);

typedef _dart_Destroy_Executor = void Function(
  ffi.Pointer<ffi.Void> executor,
);

typedef _c_RegisterHttpClient = ffi.Void Function(
  ffi.Handle h,
  ffi.Pointer<Cronet_EnginePtr> ce,
);

typedef _dart_RegisterHttpClient = void Function(
  Object h,
  ffi.Pointer<Cronet_EnginePtr> ce,
);

typedef _c_RegisterCallbackHandler = ffi.Void Function(
  ffi.Int64 nativePort,
  ffi.Pointer<Cronet_UrlRequestPtr> rp,
);

typedef _dart_RegisterCallbackHandler = void Function(
  int nativePort,
  ffi.Pointer<Cronet_UrlRequestPtr> rp,
);

typedef _c_RemoveRequest = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestPtr> rp,
);

typedef _dart_RemoveRequest = void Function(
  ffi.Pointer<Cronet_UrlRequestPtr> rp,
);

typedef _c_Cronet_UrlRequest_Init = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequestPtr> self,
  ffi.Pointer<Cronet_EnginePtr> engine,
  ffi.Pointer<ffi.Int8> url,
  ffi.Pointer<Cronet_UrlRequestParamsPtr> params,
  ffi.Pointer<ffi.Void> _executor,
);

typedef _dart_Cronet_UrlRequest_Init = int Function(
  ffi.Pointer<Cronet_UrlRequestPtr> self,
  ffi.Pointer<Cronet_EnginePtr> engine,
  ffi.Pointer<ffi.Int8> url,
  ffi.Pointer<Cronet_UrlRequestParamsPtr> params,
  ffi.Pointer<ffi.Void> _executor,
);
