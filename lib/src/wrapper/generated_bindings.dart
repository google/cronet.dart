// Copyright (c) 2021, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// ignore_for_file: non_constant_identifier_names, camel_case_types
// ignore_for_file: constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to Wrapper for Cronet
class Wrapper {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Wrapper(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Wrapper.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void dispatchCallback(
    ffi.Pointer<ffi.Int8> methodname,
  ) {
    return _dispatchCallback(
      methodname,
    );
  }

  late final _dispatchCallback_ptr =
      _lookup<ffi.NativeFunction<_c_dispatchCallback>>('dispatchCallback');
  late final _dart_dispatchCallback _dispatchCallback =
      _dispatchCallback_ptr.asFunction<_dart_dispatchCallback>();

  int InitDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _InitDartApiDL(
      data,
    );
  }

  late final _InitDartApiDL_ptr =
      _lookup<ffi.NativeFunction<_c_InitDartApiDL>>('InitDartApiDL');
  late final _dart_InitDartApiDL _InitDartApiDL =
      _InitDartApiDL_ptr.asFunction<_dart_InitDartApiDL>();

  void InitCronetApi(
    ffi.Pointer<ffi.Void> shutdown,
    ffi.Pointer<ffi.Void> destroy,
    ffi.Pointer<ffi.Void> buffer_create,
    ffi.Pointer<ffi.Void> buffer_InitWithAlloc,
    ffi.Pointer<ffi.Void> UrlRequestCallback_CreateWith,
    ffi.Pointer<ffi.Void> UrlRequest_InitWithParams,
  ) {
    return _InitCronetApi(
      shutdown,
      destroy,
      buffer_create,
      buffer_InitWithAlloc,
      UrlRequestCallback_CreateWith,
      UrlRequest_InitWithParams,
    );
  }

  late final _InitCronetApi_ptr =
      _lookup<ffi.NativeFunction<_c_InitCronetApi>>('InitCronetApi');
  late final _dart_InitCronetApi _InitCronetApi =
      _InitCronetApi_ptr.asFunction<_dart_InitCronetApi>();

  void InitCronetExecutorApi(
    ffi.Pointer<ffi.Void> executor_createWith,
    ffi.Pointer<ffi.Void> executor_setClientContext,
    ffi.Pointer<ffi.Void> executor_getClientContext,
    ffi.Pointer<ffi.Void> executor_destroy,
    ffi.Pointer<ffi.Void> runnable_run,
    ffi.Pointer<ffi.Void> runnable_destroy,
  ) {
    return _InitCronetExecutorApi(
      executor_createWith,
      executor_setClientContext,
      executor_getClientContext,
      executor_destroy,
      runnable_run,
      runnable_destroy,
    );
  }

  late final _InitCronetExecutorApi_ptr =
      _lookup<ffi.NativeFunction<_c_InitCronetExecutorApi>>(
          'InitCronetExecutorApi');
  late final _dart_InitCronetExecutorApi _InitCronetExecutorApi =
      _InitCronetExecutorApi_ptr.asFunction<_dart_InitCronetExecutorApi>();

  ffi.Pointer<ffi.Void> Create_Executor() {
    return _Create_Executor();
  }

  late final _Create_Executor_ptr =
      _lookup<ffi.NativeFunction<_c_Create_Executor>>('Create_Executor');
  late final _dart_Create_Executor _Create_Executor =
      _Create_Executor_ptr.asFunction<_dart_Create_Executor>();

  void Destroy_Executor(
    ffi.Pointer<ffi.Void> executor,
  ) {
    return _Destroy_Executor(
      executor,
    );
  }

  late final _Destroy_Executor_ptr =
      _lookup<ffi.NativeFunction<_c_Destroy_Executor>>('Destroy_Executor');
  late final _dart_Destroy_Executor _Destroy_Executor =
      _Destroy_Executor_ptr.asFunction<_dart_Destroy_Executor>();

  void registerHttpClient(
    Object h,
    ffi.Pointer<Cronet_Engine> ce,
  ) {
    return _registerHttpClient(
      h,
      ce,
    );
  }

  late final _registerHttpClient_ptr =
      _lookup<ffi.NativeFunction<_c_registerHttpClient>>('registerHttpClient');
  late final _dart_registerHttpClient _registerHttpClient =
      _registerHttpClient_ptr.asFunction<_dart_registerHttpClient>();

  void registerCallbackHandler(
    int nativePort,
    ffi.Pointer<Cronet_UrlRequest> rp,
  ) {
    return _registerCallbackHandler(
      nativePort,
      rp,
    );
  }

  late final _registerCallbackHandler_ptr =
      _lookup<ffi.NativeFunction<_c_registerCallbackHandler>>(
          'registerCallbackHandler');
  late final _dart_registerCallbackHandler _registerCallbackHandler =
      _registerCallbackHandler_ptr.asFunction<_dart_registerCallbackHandler>();

  void removeRequest(
    ffi.Pointer<Cronet_UrlRequest> rp,
  ) {
    return _removeRequest(
      rp,
    );
  }

  late final _removeRequest_ptr =
      _lookup<ffi.NativeFunction<_c_removeRequest>>('removeRequest');
  late final _dart_removeRequest _removeRequest =
      _removeRequest_ptr.asFunction<_dart_removeRequest>();

  int Cronet_UrlRequest_Init(
    ffi.Pointer<Cronet_UrlRequest> self,
    ffi.Pointer<Cronet_Engine> engine,
    ffi.Pointer<ffi.Int8> url,
    ffi.Pointer<Cronet_UrlRequestParams> params,
    ffi.Pointer<ffi.Void> _executor,
  ) {
    return _Cronet_UrlRequest_Init(
      self,
      engine,
      url,
      params,
      _executor,
    );
  }

  late final _Cronet_UrlRequest_Init_ptr =
      _lookup<ffi.NativeFunction<_c_Cronet_UrlRequest_Init>>(
          'Cronet_UrlRequest_Init');
  late final _dart_Cronet_UrlRequest_Init _Cronet_UrlRequest_Init =
      _Cronet_UrlRequest_Init_ptr.asFunction<_dart_Cronet_UrlRequest_Init>();
}

class Cronet_Engine extends ffi.Opaque {}

class Cronet_UrlRequest extends ffi.Opaque {}

class Cronet_UrlRequestParams extends ffi.Opaque {}

typedef _c_dispatchCallback = ffi.Void Function(
  ffi.Pointer<ffi.Int8> methodname,
);

typedef _dart_dispatchCallback = void Function(
  ffi.Pointer<ffi.Int8> methodname,
);

typedef _c_InitDartApiDL = ffi.IntPtr Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_InitDartApiDL = int Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_InitCronetApi = ffi.Void Function(
  ffi.Pointer<ffi.Void> shutdown,
  ffi.Pointer<ffi.Void> destroy,
  ffi.Pointer<ffi.Void> buffer_create,
  ffi.Pointer<ffi.Void> buffer_InitWithAlloc,
  ffi.Pointer<ffi.Void> UrlRequestCallback_CreateWith,
  ffi.Pointer<ffi.Void> UrlRequest_InitWithParams,
);

typedef _dart_InitCronetApi = void Function(
  ffi.Pointer<ffi.Void> shutdown,
  ffi.Pointer<ffi.Void> destroy,
  ffi.Pointer<ffi.Void> buffer_create,
  ffi.Pointer<ffi.Void> buffer_InitWithAlloc,
  ffi.Pointer<ffi.Void> UrlRequestCallback_CreateWith,
  ffi.Pointer<ffi.Void> UrlRequest_InitWithParams,
);

typedef _c_InitCronetExecutorApi = ffi.Void Function(
  ffi.Pointer<ffi.Void> executor_createWith,
  ffi.Pointer<ffi.Void> executor_setClientContext,
  ffi.Pointer<ffi.Void> executor_getClientContext,
  ffi.Pointer<ffi.Void> executor_destroy,
  ffi.Pointer<ffi.Void> runnable_run,
  ffi.Pointer<ffi.Void> runnable_destroy,
);

typedef _dart_InitCronetExecutorApi = void Function(
  ffi.Pointer<ffi.Void> executor_createWith,
  ffi.Pointer<ffi.Void> executor_setClientContext,
  ffi.Pointer<ffi.Void> executor_getClientContext,
  ffi.Pointer<ffi.Void> executor_destroy,
  ffi.Pointer<ffi.Void> runnable_run,
  ffi.Pointer<ffi.Void> runnable_destroy,
);

typedef _c_Create_Executor = ffi.Pointer<ffi.Void> Function();

typedef _dart_Create_Executor = ffi.Pointer<ffi.Void> Function();

typedef _c_Destroy_Executor = ffi.Void Function(
  ffi.Pointer<ffi.Void> executor,
);

typedef _dart_Destroy_Executor = void Function(
  ffi.Pointer<ffi.Void> executor,
);

typedef _c_registerHttpClient = ffi.Void Function(
  ffi.Handle h,
  ffi.Pointer<Cronet_Engine> ce,
);

typedef _dart_registerHttpClient = void Function(
  Object h,
  ffi.Pointer<Cronet_Engine> ce,
);

typedef _c_registerCallbackHandler = ffi.Void Function(
  ffi.Int64 nativePort,
  ffi.Pointer<Cronet_UrlRequest> rp,
);

typedef _dart_registerCallbackHandler = void Function(
  int nativePort,
  ffi.Pointer<Cronet_UrlRequest> rp,
);

typedef _c_removeRequest = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequest> rp,
);

typedef _dart_removeRequest = void Function(
  ffi.Pointer<Cronet_UrlRequest> rp,
);

typedef _c_Cronet_UrlRequest_Init = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlRequest> self,
  ffi.Pointer<Cronet_Engine> engine,
  ffi.Pointer<ffi.Int8> url,
  ffi.Pointer<Cronet_UrlRequestParams> params,
  ffi.Pointer<ffi.Void> _executor,
);

typedef _dart_Cronet_UrlRequest_Init = int Function(
  ffi.Pointer<Cronet_UrlRequest> self,
  ffi.Pointer<Cronet_Engine> engine,
  ffi.Pointer<ffi.Int8> url,
  ffi.Pointer<Cronet_UrlRequestParams> params,
  ffi.Pointer<ffi.Void> _executor,
);
