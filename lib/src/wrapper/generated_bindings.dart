// Copyright (c) 2021, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to Wrapper for Cronet
class Wrapper {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Wrapper(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Wrapper.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> VersionString() {
    return _VersionString();
  }

  late final _VersionStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'VersionString');
  late final _VersionString =
      _VersionStringPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int InitDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _InitDartApiDL(
      data,
    );
  }

  late final _InitDartApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'InitDartApiDL');
  late final _InitDartApiDL =
      _InitDartApiDLPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void InitCronetApi(
    ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(Cronet_EnginePtr)>>
        Cronet_Engine_Shutdown,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Cronet_EnginePtr)>>
        Cronet_Engine_Destroy,
    ffi.Pointer<ffi.NativeFunction<Cronet_BufferPtr Function()>>
        Cronet_Buffer_Create,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Void Function(Cronet_BufferPtr, ffi.Uint64)>>
        Cronet_Buffer_InitWithAlloc,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int32 Function(Cronet_UrlResponseInfoPtr)>>
        Cronet_UrlResponseInfo_http_status_code_get,
    ffi.Pointer<ffi.NativeFunction<Cronet_String Function(Cronet_ErrorPtr)>>
        Cronet_Error_message_get,
    ffi.Pointer<
            ffi.NativeFunction<
                Cronet_String Function(Cronet_UrlResponseInfoPtr)>>
        Cronet_UrlResponseInfo_http_status_text_get,
    ffi.Pointer<
            ffi.NativeFunction<
                Cronet_ClientContext Function(Cronet_UploadDataProviderPtr)>>
        Cronet_UploadDataProvider_GetClientContext,
  ) {
    return _InitCronetApi(
      Cronet_Engine_Shutdown,
      Cronet_Engine_Destroy,
      Cronet_Buffer_Create,
      Cronet_Buffer_InitWithAlloc,
      Cronet_UrlResponseInfo_http_status_code_get,
      Cronet_Error_message_get,
      Cronet_UrlResponseInfo_http_status_text_get,
      Cronet_UploadDataProvider_GetClientContext,
    );
  }

  late final _InitCronetApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Int32 Function(Cronet_EnginePtr)>>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(Cronet_EnginePtr)>>,
              ffi.Pointer<ffi.NativeFunction<Cronet_BufferPtr Function()>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(Cronet_BufferPtr, ffi.Uint64)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int32 Function(Cronet_UrlResponseInfoPtr)>>,
              ffi.Pointer<
                  ffi.NativeFunction<Cronet_String Function(Cronet_ErrorPtr)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      Cronet_String Function(Cronet_UrlResponseInfoPtr)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      Cronet_ClientContext Function(
                          Cronet_UploadDataProviderPtr)>>)>>('InitCronetApi');
  late final _InitCronetApi = _InitCronetApiPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(Cronet_EnginePtr)>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Cronet_EnginePtr)>>,
          ffi.Pointer<ffi.NativeFunction<Cronet_BufferPtr Function()>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(Cronet_BufferPtr, ffi.Uint64)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(Cronet_UrlResponseInfoPtr)>>,
          ffi.Pointer<
              ffi.NativeFunction<Cronet_String Function(Cronet_ErrorPtr)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  Cronet_String Function(Cronet_UrlResponseInfoPtr)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  Cronet_ClientContext Function(
                      Cronet_UploadDataProviderPtr)>>)>();

  /// Forward declaration. Implementation on sample_executor.cc
  void InitCronetExecutorApi(
    ffi.Pointer<
            ffi.NativeFunction<
                Cronet_ExecutorPtr Function(Cronet_Executor_ExecuteFunc)>>
        Cronet_Executor_CreateWith,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(Cronet_ExecutorPtr, Cronet_ClientContext)>>
        Cronet_Executor_SetClientContext,
    ffi.Pointer<
            ffi.NativeFunction<
                Cronet_ClientContext Function(Cronet_ExecutorPtr)>>
        Cronet_Executor_GetClientContext,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Cronet_ExecutorPtr)>>
        Cronet_Executor_Destroy,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Cronet_RunnablePtr)>>
        Cronet_Runnable_Run,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Cronet_RunnablePtr)>>
        Cronet_Runnable_Destroy,
  ) {
    return _InitCronetExecutorApi(
      Cronet_Executor_CreateWith,
      Cronet_Executor_SetClientContext,
      Cronet_Executor_GetClientContext,
      Cronet_Executor_Destroy,
      Cronet_Runnable_Run,
      Cronet_Runnable_Destroy,
    );
  }

  late final _InitCronetExecutorApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      Cronet_ExecutorPtr Function(
                          Cronet_Executor_ExecuteFunc)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          Cronet_ExecutorPtr, Cronet_ClientContext)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      Cronet_ClientContext Function(Cronet_ExecutorPtr)>>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(Cronet_ExecutorPtr)>>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(Cronet_RunnablePtr)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          Cronet_RunnablePtr)>>)>>('InitCronetExecutorApi');
  late final _InitCronetExecutorApi = _InitCronetExecutorApiPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  Cronet_ExecutorPtr Function(Cronet_Executor_ExecuteFunc)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(Cronet_ExecutorPtr, Cronet_ClientContext)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  Cronet_ClientContext Function(Cronet_ExecutorPtr)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(Cronet_ExecutorPtr)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(Cronet_RunnablePtr)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(Cronet_RunnablePtr)>>)>();

  void RegisterHttpClient(
    Object h,
    ffi.Pointer<Cronet_Engine> ce,
  ) {
    return _RegisterHttpClient(
      h,
      ce,
    );
  }

  late final _RegisterHttpClientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Handle, ffi.Pointer<Cronet_Engine>)>>('RegisterHttpClient');
  late final _RegisterHttpClient = _RegisterHttpClientPtr.asFunction<
      void Function(Object, ffi.Pointer<Cronet_Engine>)>();

  void RegisterCallbackHandler(
    int nativePort,
    ffi.Pointer<Cronet_UrlRequest> rp,
  ) {
    return _RegisterCallbackHandler(
      nativePort,
      rp,
    );
  }

  late final _RegisterCallbackHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_Port,
              ffi.Pointer<Cronet_UrlRequest>)>>('RegisterCallbackHandler');
  late final _RegisterCallbackHandler = _RegisterCallbackHandlerPtr.asFunction<
      void Function(int, ffi.Pointer<Cronet_UrlRequest>)>();

  void RemoveRequest(
    ffi.Pointer<Cronet_UrlRequest> rp,
  ) {
    return _RemoveRequest(
      rp,
    );
  }

  late final _RemoveRequestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Cronet_UrlRequest>)>>('RemoveRequest');
  late final _RemoveRequest = _RemoveRequestPtr.asFunction<
      void Function(ffi.Pointer<Cronet_UrlRequest>)>();

  /// Callbacks. ISSUE: https://github.com/dart-lang/sdk/issues/37022
  void OnRedirectReceived(
    Cronet_UrlRequestCallbackPtr self,
    Cronet_UrlRequestPtr request,
    Cronet_UrlResponseInfoPtr info,
    Cronet_String newLocationUrl,
  ) {
    return _OnRedirectReceived(
      self,
      request,
      info,
      newLocationUrl,
    );
  }

  late final _OnRedirectReceivedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr, Cronet_String)>>('OnRedirectReceived');
  late final _OnRedirectReceived = _OnRedirectReceivedPtr.asFunction<
      void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
          Cronet_UrlResponseInfoPtr, Cronet_String)>();

  void OnResponseStarted(
    Cronet_UrlRequestCallbackPtr self,
    Cronet_UrlRequestPtr request,
    Cronet_UrlResponseInfoPtr info,
  ) {
    return _OnResponseStarted(
      self,
      request,
      info,
    );
  }

  late final _OnResponseStartedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr)>>('OnResponseStarted');
  late final _OnResponseStarted = _OnResponseStartedPtr.asFunction<
      void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
          Cronet_UrlResponseInfoPtr)>();

  void OnReadCompleted(
    Cronet_UrlRequestCallbackPtr self,
    Cronet_UrlRequestPtr request,
    Cronet_UrlResponseInfoPtr info,
    Cronet_BufferPtr buffer,
    int bytes_read,
  ) {
    return _OnReadCompleted(
      self,
      request,
      info,
      buffer,
      bytes_read,
    );
  }

  late final _OnReadCompletedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Cronet_UrlRequestCallbackPtr,
              Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr,
              Cronet_BufferPtr,
              ffi.Uint64)>>('OnReadCompleted');
  late final _OnReadCompleted = _OnReadCompletedPtr.asFunction<
      void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
          Cronet_UrlResponseInfoPtr, Cronet_BufferPtr, int)>();

  void OnSucceeded(
    Cronet_UrlRequestCallbackPtr self,
    Cronet_UrlRequestPtr request,
    Cronet_UrlResponseInfoPtr info,
  ) {
    return _OnSucceeded(
      self,
      request,
      info,
    );
  }

  late final _OnSucceededPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr)>>('OnSucceeded');
  late final _OnSucceeded = _OnSucceededPtr.asFunction<
      void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
          Cronet_UrlResponseInfoPtr)>();

  void OnFailed(
    Cronet_UrlRequestCallbackPtr self,
    Cronet_UrlRequestPtr request,
    Cronet_UrlResponseInfoPtr info,
    Cronet_ErrorPtr error,
  ) {
    return _OnFailed(
      self,
      request,
      info,
      error,
    );
  }

  late final _OnFailedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr, Cronet_ErrorPtr)>>('OnFailed');
  late final _OnFailed = _OnFailedPtr.asFunction<
      void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
          Cronet_UrlResponseInfoPtr, Cronet_ErrorPtr)>();

  void OnCanceled(
    Cronet_UrlRequestCallbackPtr self,
    Cronet_UrlRequestPtr request,
    Cronet_UrlResponseInfoPtr info,
  ) {
    return _OnCanceled(
      self,
      request,
      info,
    );
  }

  late final _OnCanceledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr)>>('OnCanceled');
  late final _OnCanceled = _OnCanceledPtr.asFunction<
      void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
          Cronet_UrlResponseInfoPtr)>();

  /// Sample Executor C APIs
  SampleExecutorPtr SampleExecutorCreate() {
    return _SampleExecutorCreate();
  }

  late final _SampleExecutorCreatePtr =
      _lookup<ffi.NativeFunction<SampleExecutorPtr Function()>>(
          'SampleExecutorCreate');
  late final _SampleExecutorCreate =
      _SampleExecutorCreatePtr.asFunction<SampleExecutorPtr Function()>();

  void SampleExecutorDestroy(
    SampleExecutorPtr executor,
  ) {
    return _SampleExecutorDestroy(
      executor,
    );
  }

  late final _SampleExecutorDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SampleExecutorPtr)>>(
          'SampleExecutorDestroy');
  late final _SampleExecutorDestroy =
      _SampleExecutorDestroyPtr.asFunction<void Function(SampleExecutorPtr)>();

  void InitSampleExecutor(
    SampleExecutorPtr self,
  ) {
    return _InitSampleExecutor(
      self,
    );
  }

  late final _InitSampleExecutorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SampleExecutorPtr)>>(
          'InitSampleExecutor');
  late final _InitSampleExecutor =
      _InitSampleExecutorPtr.asFunction<void Function(SampleExecutorPtr)>();

  Cronet_ExecutorPtr SampleExecutor_Cronet_ExecutorPtr_get(
    SampleExecutorPtr self,
  ) {
    return _SampleExecutor_Cronet_ExecutorPtr_get(
      self,
    );
  }

  late final _SampleExecutor_Cronet_ExecutorPtr_getPtr = _lookup<
          ffi.NativeFunction<Cronet_ExecutorPtr Function(SampleExecutorPtr)>>(
      'SampleExecutor_Cronet_ExecutorPtr_get');
  late final _SampleExecutor_Cronet_ExecutorPtr_get =
      _SampleExecutor_Cronet_ExecutorPtr_getPtr.asFunction<
          Cronet_ExecutorPtr Function(SampleExecutorPtr)>();

  /// Upload Data Provider C APIs
  UploadDataProviderPtr UploadDataProviderCreate() {
    return _UploadDataProviderCreate();
  }

  late final _UploadDataProviderCreatePtr =
      _lookup<ffi.NativeFunction<UploadDataProviderPtr Function()>>(
          'UploadDataProviderCreate');
  late final _UploadDataProviderCreate = _UploadDataProviderCreatePtr
      .asFunction<UploadDataProviderPtr Function()>();

  void UploadDataProviderDestroy(
    UploadDataProviderPtr upload_data_provided,
  ) {
    return _UploadDataProviderDestroy(
      upload_data_provided,
    );
  }

  late final _UploadDataProviderDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UploadDataProviderPtr)>>(
          'UploadDataProviderDestroy');
  late final _UploadDataProviderDestroy = _UploadDataProviderDestroyPtr
      .asFunction<void Function(UploadDataProviderPtr)>();

  void UploadDataProviderInit(
    UploadDataProviderPtr self,
    int length,
    Cronet_UrlRequestPtr request,
  ) {
    return _UploadDataProviderInit(
      self,
      length,
      request,
    );
  }

  late final _UploadDataProviderInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(UploadDataProviderPtr, ffi.Int64,
              Cronet_UrlRequestPtr)>>('UploadDataProviderInit');
  late final _UploadDataProviderInit = _UploadDataProviderInitPtr.asFunction<
      void Function(UploadDataProviderPtr, int, Cronet_UrlRequestPtr)>();

  int UploadDataProvider_GetLength(
    Cronet_UploadDataProviderPtr self,
  ) {
    return _UploadDataProvider_GetLength(
      self,
    );
  }

  late final _UploadDataProvider_GetLengthPtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(Cronet_UploadDataProviderPtr)>>(
      'UploadDataProvider_GetLength');
  late final _UploadDataProvider_GetLength = _UploadDataProvider_GetLengthPtr
      .asFunction<int Function(Cronet_UploadDataProviderPtr)>();

  void UploadDataProvider_Read(
    Cronet_UploadDataProviderPtr self,
    Cronet_UploadDataSinkPtr upload_data_sink,
    Cronet_BufferPtr buffer,
  ) {
    return _UploadDataProvider_Read(
      self,
      upload_data_sink,
      buffer,
    );
  }

  late final _UploadDataProvider_ReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Cronet_UploadDataProviderPtr,
              Cronet_UploadDataSinkPtr,
              Cronet_BufferPtr)>>('UploadDataProvider_Read');
  late final _UploadDataProvider_Read = _UploadDataProvider_ReadPtr.asFunction<
      void Function(Cronet_UploadDataProviderPtr, Cronet_UploadDataSinkPtr,
          Cronet_BufferPtr)>();

  void UploadDataProvider_Rewind(
    Cronet_UploadDataProviderPtr self,
    Cronet_UploadDataSinkPtr upload_data_sink,
  ) {
    return _UploadDataProvider_Rewind(
      self,
      upload_data_sink,
    );
  }

  late final _UploadDataProvider_RewindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UploadDataProviderPtr,
              Cronet_UploadDataSinkPtr)>>('UploadDataProvider_Rewind');
  late final _UploadDataProvider_Rewind =
      _UploadDataProvider_RewindPtr.asFunction<
          void Function(
              Cronet_UploadDataProviderPtr, Cronet_UploadDataSinkPtr)>();

  void UploadDataProvider_CloseFunc(
    Cronet_UploadDataProviderPtr self,
  ) {
    return _UploadDataProvider_CloseFunc(
      self,
    );
  }

  late final _UploadDataProvider_CloseFuncPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Cronet_UploadDataProviderPtr)>>(
      'UploadDataProvider_CloseFunc');
  late final _UploadDataProvider_CloseFunc = _UploadDataProvider_CloseFuncPtr
      .asFunction<void Function(Cronet_UploadDataProviderPtr)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final Wrapper _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Cronet_UrlRequestCallbackPtr,
              Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr,
              Cronet_String)>> get OnRedirectReceived =>
      _library._OnRedirectReceivedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr)>> get OnResponseStarted =>
      _library._OnResponseStartedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Cronet_UrlRequestCallbackPtr,
              Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr,
              Cronet_BufferPtr,
              ffi.Uint64)>> get OnReadCompleted => _library._OnReadCompletedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr)>> get OnSucceeded =>
      _library._OnSucceededPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Cronet_UrlRequestCallbackPtr,
              Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr,
              Cronet_ErrorPtr)>> get OnFailed => _library._OnFailedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(Cronet_UrlRequestCallbackPtr, Cronet_UrlRequestPtr,
              Cronet_UrlResponseInfoPtr)>> get OnCanceled =>
      _library._OnCanceledPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int64 Function(Cronet_UploadDataProviderPtr)>>
      get UploadDataProvider_GetLength =>
          _library._UploadDataProvider_GetLengthPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Cronet_UploadDataProviderPtr,
              Cronet_UploadDataSinkPtr,
              Cronet_BufferPtr)>> get UploadDataProvider_Read =>
      _library._UploadDataProvider_ReadPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Cronet_UploadDataProviderPtr, Cronet_UploadDataSinkPtr)>>
      get UploadDataProvider_Rewind => _library._UploadDataProvider_RewindPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Cronet_UploadDataProviderPtr)>>
      get UploadDataProvider_CloseFunc =>
          _library._UploadDataProvider_CloseFuncPtr;
}

class SampleExecutor extends ffi.Opaque {}

class UploadDataProvider extends ffi.Opaque {}

/// Declare enums
abstract class Cronet_RESULT {
  static const int Cronet_RESULT_SUCCESS = 0;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT = -100;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_STORAGE_PATH_MUST_EXIST =
      -101;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_PIN = -102;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HOSTNAME = -103;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_METHOD = -104;
  static const int Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_HEADER = -105;
  static const int Cronet_RESULT_ILLEGAL_STATE = -200;
  static const int Cronet_RESULT_ILLEGAL_STATE_STORAGE_PATH_IN_USE = -201;
  static const int
      Cronet_RESULT_ILLEGAL_STATE_CANNOT_SHUTDOWN_ENGINE_FROM_NETWORK_THREAD =
      -202;
  static const int Cronet_RESULT_ILLEGAL_STATE_ENGINE_ALREADY_STARTED = -203;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_STARTED = -204;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_NOT_INITIALIZED = -205;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_INITIALIZED =
      -206;
  static const int Cronet_RESULT_ILLEGAL_STATE_REQUEST_NOT_STARTED = -207;
  static const int Cronet_RESULT_ILLEGAL_STATE_UNEXPECTED_REDIRECT = -208;
  static const int Cronet_RESULT_ILLEGAL_STATE_UNEXPECTED_READ = -209;
  static const int Cronet_RESULT_ILLEGAL_STATE_READ_FAILED = -210;
  static const int Cronet_RESULT_NULL_POINTER = -300;
  static const int Cronet_RESULT_NULL_POINTER_HOSTNAME = -301;
  static const int Cronet_RESULT_NULL_POINTER_SHA256_PINS = -302;
  static const int Cronet_RESULT_NULL_POINTER_EXPIRATION_DATE = -303;
  static const int Cronet_RESULT_NULL_POINTER_ENGINE = -304;
  static const int Cronet_RESULT_NULL_POINTER_URL = -305;
  static const int Cronet_RESULT_NULL_POINTER_CALLBACK = -306;
  static const int Cronet_RESULT_NULL_POINTER_EXECUTOR = -307;
  static const int Cronet_RESULT_NULL_POINTER_METHOD = -308;
  static const int Cronet_RESULT_NULL_POINTER_HEADER_NAME = -309;
  static const int Cronet_RESULT_NULL_POINTER_HEADER_VALUE = -310;
  static const int Cronet_RESULT_NULL_POINTER_PARAMS = -311;
  static const int
      Cronet_RESULT_NULL_POINTER_REQUEST_FINISHED_INFO_LISTENER_EXECUTOR = -312;
}

typedef Cronet_EnginePtr = ffi.Pointer<Cronet_Engine>;

class Cronet_Engine extends ffi.Opaque {}

typedef Cronet_BufferPtr = ffi.Pointer<Cronet_Buffer>;

class Cronet_Buffer extends ffi.Opaque {}

typedef Cronet_UrlResponseInfoPtr = ffi.Pointer<Cronet_UrlResponseInfo>;

class Cronet_UrlResponseInfo extends ffi.Opaque {}

typedef Cronet_String = ffi.Pointer<ffi.Char>;
typedef Cronet_ErrorPtr = ffi.Pointer<Cronet_Error>;

class Cronet_Error extends ffi.Opaque {}

typedef Cronet_ClientContext = ffi.Pointer<ffi.Void>;
typedef Cronet_UploadDataProviderPtr = ffi.Pointer<Cronet_UploadDataProvider>;

class Cronet_UploadDataProvider extends ffi.Opaque {}

typedef Cronet_ExecutorPtr = ffi.Pointer<Cronet_Executor>;

class Cronet_Executor extends ffi.Opaque {}

/// The app implements abstract interface Cronet_Executor by defining custom
/// functions for each method.
typedef Cronet_Executor_ExecuteFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Cronet_ExecutorPtr, Cronet_RunnablePtr)>>;
typedef Cronet_RunnablePtr = ffi.Pointer<Cronet_Runnable>;

class Cronet_Runnable extends ffi.Opaque {}

/// A port is used to send or receive inter-isolate messages
typedef Dart_Port = ffi.Int64;

class Cronet_UrlRequest extends ffi.Opaque {}

typedef Cronet_UrlRequestCallbackPtr = ffi.Pointer<Cronet_UrlRequestCallback>;

class Cronet_UrlRequestCallback extends ffi.Opaque {}

typedef Cronet_UrlRequestPtr = ffi.Pointer<Cronet_UrlRequest>;
typedef SampleExecutorPtr = ffi.Pointer<SampleExecutor>;
typedef UploadDataProviderPtr = ffi.Pointer<UploadDataProvider>;
typedef Cronet_UploadDataSinkPtr = ffi.Pointer<Cronet_UploadDataSink>;

class Cronet_UploadDataSink extends ffi.Opaque {}
